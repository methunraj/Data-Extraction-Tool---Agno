"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@genkit-ai";
exports.ids = ["vendor-chunks/@genkit-ai"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/chat.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chat_exports = {};\n__export(chat_exports, {\n  Chat: () => Chat,\n  MAIN_THREAD: () => MAIN_THREAD,\n  SESSION_ID_ATTR: () => SESSION_ID_ATTR,\n  THREAD_NAME_ATTR: () => THREAD_NAME_ATTR\n});\nmodule.exports = __toCommonJS(chat_exports);\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nconst MAIN_THREAD = \"main\";\nconst SESSION_ID_ATTR = `${import_tracing.ATTR_PREFIX}:sessionId`;\nconst THREAD_NAME_ATTR = `${import_tracing.ATTR_PREFIX}:threadName`;\nclass Chat {\n  constructor(session, requestBase, options) {\n    this.session = session;\n    this.sessionId = options.id;\n    this.threadName = options.thread;\n    this.requestBase = requestBase?.then((rb) => {\n      const requestBase2 = { ...rb };\n      if (requestBase2 && requestBase2[\"prompt\"]) {\n        const basePrompt = requestBase2[\"prompt\"];\n        let promptMessage;\n        if (typeof basePrompt === \"string\") {\n          promptMessage = {\n            role: \"user\",\n            content: [{ text: basePrompt }]\n          };\n        } else if (Array.isArray(basePrompt)) {\n          promptMessage = {\n            role: \"user\",\n            content: basePrompt\n          };\n        } else {\n          promptMessage = {\n            role: \"user\",\n            content: [basePrompt]\n          };\n        }\n        requestBase2.messages = [...requestBase2.messages ?? [], promptMessage];\n      }\n      if (hasPreamble(requestBase2.messages)) {\n        requestBase2.messages = [\n          // if request base contains a preamble, always put it first\n          ...getPreamble(requestBase2.messages) ?? [],\n          // strip out the preamble from history\n          ...stripPreamble(options.messages) ?? [],\n          // add whatever non-preamble remains from request\n          ...stripPreamble(requestBase2.messages) ?? []\n        ];\n      } else {\n        requestBase2.messages = [\n          ...options.messages ?? [],\n          ...requestBase2.messages ?? []\n        ];\n      }\n      this._messages = requestBase2.messages;\n      return requestBase2;\n    });\n    this._messages = options.messages;\n  }\n  requestBase;\n  sessionId;\n  _messages;\n  threadName;\n  async send(options) {\n    return (0, import_session.runWithSession)(\n      this.session.registry,\n      this.session,\n      () => (0, import_tracing.runInNewSpan)(\n        this.session.registry,\n        {\n          metadata: {\n            name: \"send\"\n          },\n          labels: {\n            [import_tracing.SPAN_TYPE_ATTR]: \"helper\",\n            [SESSION_ID_ATTR]: this.session.id,\n            [THREAD_NAME_ATTR]: this.threadName\n          }\n        },\n        async (metadata) => {\n          let resolvedOptions = resolveSendOptions(options);\n          let streamingCallback = void 0;\n          if (resolvedOptions.onChunk || resolvedOptions.streamingCallback) {\n            streamingCallback = resolvedOptions.onChunk ?? resolvedOptions.streamingCallback;\n          }\n          let request = {\n            ...await this.requestBase,\n            messages: this.messages,\n            ...resolvedOptions\n          };\n          metadata.input = resolvedOptions;\n          let response = await (0, import_index.generate)(this.session.registry, {\n            ...request,\n            onChunk: streamingCallback\n          });\n          this.requestBase = Promise.resolve({\n            ...await this.requestBase,\n            // these things may get changed by tools calling within generate.\n            tools: response?.request?.tools?.map((td) => td.name),\n            toolChoice: response?.request?.toolChoice,\n            config: response?.request?.config\n          });\n          await this.updateMessages(response.messages);\n          metadata.output = JSON.stringify(response);\n          return response;\n        }\n      )\n    );\n  }\n  sendStream(options) {\n    let channel = new import_async.Channel();\n    let resolvedOptions = resolveSendOptions(options);\n    const sent = this.send({\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    });\n    sent.then(\n      () => channel.close(),\n      (err) => channel.error(err)\n    );\n    return {\n      response: sent,\n      stream: channel\n    };\n  }\n  get messages() {\n    return this._messages ?? [];\n  }\n  async updateMessages(messages) {\n    this._messages = messages;\n    await this.session.updateMessages(this.threadName, messages);\n  }\n}\nfunction hasPreamble(msgs) {\n  return !!msgs?.find((m) => m.metadata?.preamble);\n}\nfunction getPreamble(msgs) {\n  return msgs?.filter((m) => m.metadata?.preamble);\n}\nfunction stripPreamble(msgs) {\n  return msgs?.filter((m) => !m.metadata?.preamble);\n}\nfunction resolveSendOptions(options) {\n  let resolvedOptions;\n  if (typeof options === \"string\") {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else if (Array.isArray(options)) {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else {\n    resolvedOptions = options;\n  }\n  return resolvedOptions;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/document.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar document_exports = {};\n__export(document_exports, {\n  CustomPartSchema: () => CustomPartSchema,\n  DataPartSchema: () => DataPartSchema,\n  Document: () => Document,\n  DocumentDataSchema: () => DocumentDataSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  MediaSchema: () => MediaSchema,\n  PartSchema: () => PartSchema,\n  TextPartSchema: () => TextPartSchema,\n  ToolRequestPartSchema: () => ToolRequestPartSchema,\n  ToolRequestSchema: () => ToolRequestSchema,\n  ToolResponsePartSchema: () => ToolResponsePartSchema,\n  ToolResponseSchema: () => ToolResponseSchema,\n  checkUniqueDocuments: () => checkUniqueDocuments\n});\nmodule.exports = __toCommonJS(document_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst EmptyPartSchema = import_core.z.object({\n  text: import_core.z.never().optional(),\n  media: import_core.z.never().optional(),\n  toolRequest: import_core.z.never().optional(),\n  toolResponse: import_core.z.never().optional(),\n  data: import_core.z.unknown().optional(),\n  metadata: import_core.z.record(import_core.z.unknown()).optional(),\n  custom: import_core.z.record(import_core.z.unknown()).optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the message. */\n  text: import_core.z.string()\n});\nconst MediaSchema = import_core.z.object({\n  /** The media content type. Inferred from data uri if not provided. */\n  contentType: import_core.z.string().optional(),\n  /** A `data:` or `https:` uri containing the media content.  */\n  url: import_core.z.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: MediaSchema\n});\nconst ToolRequestSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool to call. */\n  name: import_core.z.string(),\n  /** The input parameters for the tool, usually a JSON object. */\n  input: import_core.z.unknown().optional()\n});\nconst ToolRequestPartSchema = EmptyPartSchema.extend({\n  /** A request for a tool to be executed, usually provided by a model. */\n  toolRequest: ToolRequestSchema\n});\nconst ToolResponseSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool. */\n  name: import_core.z.string(),\n  /** The output data returned from the tool, usually a JSON object. */\n  output: import_core.z.unknown().optional()\n});\nconst ToolResponsePartSchema = EmptyPartSchema.extend({\n  /** A provided response to a tool call. */\n  toolResponse: ToolResponseSchema\n});\nconst DataPartSchema = EmptyPartSchema.extend({\n  data: import_core.z.unknown()\n});\nconst CustomPartSchema = EmptyPartSchema.extend({\n  custom: import_core.z.record(import_core.z.any())\n});\nconst PartSchema = import_core.z.union([TextPartSchema, MediaPartSchema]);\nconst DocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.any()).optional()\n});\nfunction deepCopy(value) {\n  if (value === void 0) {\n    return value;\n  }\n  return JSON.parse(JSON.stringify(value));\n}\nclass Document {\n  content;\n  metadata;\n  constructor(data) {\n    this.content = deepCopy(data.content);\n    this.metadata = deepCopy(data.metadata);\n  }\n  static fromText(text, metadata) {\n    return new Document({\n      content: [{ text }],\n      metadata\n    });\n  }\n  // Construct a Document from a single media item\n  static fromMedia(url, contentType, metadata) {\n    return new Document({\n      content: [\n        {\n          media: {\n            contentType,\n            url\n          }\n        }\n      ],\n      metadata\n    });\n  }\n  // Construct a Document from content\n  static fromData(data, dataType, metadata) {\n    if (dataType === \"text\") {\n      return this.fromText(data, metadata);\n    }\n    return this.fromMedia(data, dataType, metadata);\n  }\n  /**\n   * Concatenates all `text` parts present in the document with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Media array getter.\n   * @returns the array of media parts.\n   */\n  get media() {\n    return this.content.filter((part) => part.media && !part.text).map((part) => part.media);\n  }\n  /**\n   * Gets the first item in the document. Either text or media url.\n   */\n  get data() {\n    if (this.text) {\n      return this.text;\n    }\n    if (this.media) {\n      return this.media[0].url;\n    }\n    return \"\";\n  }\n  /**\n   * Gets the contentType of the data that is returned by data()\n   */\n  get dataType() {\n    if (this.text) {\n      return \"text\";\n    }\n    if (this.media && this.media[0].contentType) {\n      return this.media[0].contentType;\n    }\n    return void 0;\n  }\n  toJSON() {\n    return {\n      content: deepCopy(this.content),\n      metadata: deepCopy(this.metadata)\n    };\n  }\n  /**\n   * Embedders may return multiple embeddings for a single document.\n   * But storage still requires a 1:1 relationship. So we create an\n   * array of Documents from a single document - one per embedding.\n   * @param embeddings The embeddings to create the documents from.\n   * @returns an array of documents based on this document and the embeddings.\n   */\n  getEmbeddingDocuments(embeddings) {\n    let documents = [];\n    for (const embedding of embeddings) {\n      let jsonDoc = this.toJSON();\n      if (embedding.metadata) {\n        if (!jsonDoc.metadata) {\n          jsonDoc.metadata = {};\n        }\n        jsonDoc.metadata.embedMetadata = embedding.metadata;\n      }\n      documents.push(new Document(jsonDoc));\n    }\n    checkUniqueDocuments(documents);\n    return documents;\n  }\n}\nfunction checkUniqueDocuments(documents) {\n  const seen = /* @__PURE__ */ new Set();\n  for (const doc of documents) {\n    const serialized = JSON.stringify(doc);\n    if (seen.has(serialized)) {\n      console.warn(\n        \"Warning: embedding documents are not unique. Are you missing embed metadata?\"\n      );\n      return false;\n    }\n    seen.add(serialized);\n  }\n  return true;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/embedder.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbedderInfoSchema: () => EmbedderInfoSchema,\n  EmbeddingSchema: () => EmbeddingSchema,\n  defineEmbedder: () => defineEmbedder,\n  embed: () => embed,\n  embedMany: () => embedMany,\n  embedderActionMetadata: () => embedderActionMetadata,\n  embedderRef: () => embedderRef\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst EmbeddingSchema = import_core.z.object({\n  embedding: import_core.z.array(import_core.z.number()),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.unknown()).optional()\n});\nconst EmbedRequestSchema = import_core.z.object({\n  input: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst EmbedResponseSchema = import_core.z.object({\n  embeddings: import_core.z.array(EmbeddingSchema)\n  // TODO: stats, etc.\n});\nfunction withMetadata(embedder, configSchema) {\n  const withMeta = embedder;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineEmbedder(registry, options, runner) {\n  const embedder = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"embedder\",\n      name: options.name,\n      inputSchema: options.configSchema ? EmbedRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : EmbedRequestSchema,\n      outputSchema: EmbedResponseSchema,\n      metadata: {\n        type: \"embedder\",\n        info: options.info,\n        embedder: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      i.input.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const ewm = withMetadata(\n    embedder,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function embed(registry, params) {\n  let embedder = await resolveEmbedder(registry, params);\n  if (!embedder.embedderAction) {\n    let embedderId;\n    if (typeof params.embedder === \"string\") {\n      embedderId = params.embedder;\n    } else if (params.embedder?.__action?.name) {\n      embedderId = params.embedder.__action.name;\n    } else {\n      embedderId = params.embedder.name;\n    }\n    throw new Error(`Unable to resolve embedder ${embedderId}`);\n  }\n  const response = await embedder.embedderAction({\n    input: typeof params.content === \"string\" ? [import_document.Document.fromText(params.content, params.metadata)] : [params.content],\n    options: {\n      version: embedder.version,\n      ...embedder.config,\n      ...params.options\n    }\n  });\n  return response.embeddings;\n}\nasync function resolveEmbedder(registry, params) {\n  if (typeof params.embedder === \"string\") {\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder}`\n      )\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"__action\")) {\n    return {\n      embedderAction: params.embedder\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"name\")) {\n    const ref = params.embedder;\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder.name}`\n      ),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  throw new Error(`failed to resolve embedder ${params.embedder}`);\n}\nasync function embedMany(registry, params) {\n  let embedder;\n  if (typeof params.embedder === \"string\") {\n    embedder = await registry.lookupAction(`/embedder/${params.embedder}`);\n  } else if (Object.hasOwnProperty.call(params.embedder, \"info\")) {\n    embedder = await registry.lookupAction(\n      `/embedder/${params.embedder.name}`\n    );\n  } else {\n    embedder = params.embedder;\n  }\n  if (!embedder) {\n    throw new Error(\"Unable to utilize the provided embedder\");\n  }\n  const response = await embedder({\n    input: params.content.map(\n      (i) => typeof i === \"string\" ? import_document.Document.fromText(i, params.metadata) : i\n    ),\n    options: params.options\n  });\n  return response.embeddings;\n}\nconst EmbedderInfoSchema = import_core.z.object({\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can input this type of data. */\n    input: import_core.z.array(import_core.z.enum([\"text\", \"image\", \"video\"])).optional(),\n    /** Model can support multiple languages */\n    multilingual: import_core.z.boolean().optional()\n  }).optional(),\n  /** Embedding dimension */\n  dimensions: import_core.z.number().optional()\n});\nfunction embedderRef(options) {\n  return { ...options };\n}\nfunction embedderActionMetadata({\n  name,\n  info,\n  configSchema\n}) {\n  return {\n    actionType: \"embedder\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedRequestSchema }),\n    outputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedResponseSchema }),\n    metadata: {\n      embedder: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/evaluator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar evaluator_exports = {};\n__export(evaluator_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  BaseDataPointSchema: () => BaseDataPointSchema,\n  BaseEvalDataPointSchema: () => BaseEvalDataPointSchema,\n  EVALUATOR_METADATA_KEY_DEFINITION: () => EVALUATOR_METADATA_KEY_DEFINITION,\n  EVALUATOR_METADATA_KEY_DISPLAY_NAME: () => EVALUATOR_METADATA_KEY_DISPLAY_NAME,\n  EVALUATOR_METADATA_KEY_IS_BILLED: () => EVALUATOR_METADATA_KEY_IS_BILLED,\n  EvalResponseSchema: () => EvalResponseSchema,\n  EvalResponsesSchema: () => EvalResponsesSchema,\n  EvalStatusEnum: () => EvalStatusEnum,\n  EvaluatorInfoSchema: () => EvaluatorInfoSchema,\n  SPAN_STATE_ATTR: () => SPAN_STATE_ATTR,\n  ScoreSchema: () => ScoreSchema,\n  defineEvaluator: () => defineEvaluator,\n  evaluate: () => evaluate,\n  evaluatorRef: () => evaluatorRef\n});\nmodule.exports = __toCommonJS(evaluator_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_STATE_ATTR = ATTR_PREFIX + \":state\";\nconst BaseDataPointSchema = import_core.z.object({\n  input: import_core.z.unknown(),\n  output: import_core.z.unknown().optional(),\n  context: import_core.z.array(import_core.z.unknown()).optional(),\n  reference: import_core.z.unknown().optional(),\n  testCaseId: import_core.z.string().optional(),\n  traceIds: import_core.z.array(import_core.z.string()).optional()\n});\nconst BaseEvalDataPointSchema = BaseDataPointSchema.extend({\n  testCaseId: import_core.z.string()\n});\nconst EvalStatusEnumSchema = import_core.z.enum([\"UNKNOWN\", \"PASS\", \"FAIL\"]);\nvar EvalStatusEnum = /* @__PURE__ */ ((EvalStatusEnum2) => {\n  EvalStatusEnum2[\"UNKNOWN\"] = \"UNKNOWN\";\n  EvalStatusEnum2[\"PASS\"] = \"PASS\";\n  EvalStatusEnum2[\"FAIL\"] = \"FAIL\";\n  return EvalStatusEnum2;\n})(EvalStatusEnum || {});\nconst ScoreSchema = import_core.z.object({\n  id: import_core.z.string().describe(\n    \"Optional ID to differentiate different scores if applying in a single evaluation\"\n  ).optional(),\n  score: import_core.z.union([import_core.z.number(), import_core.z.string(), import_core.z.boolean()]).optional(),\n  status: EvalStatusEnumSchema.optional(),\n  error: import_core.z.string().optional(),\n  details: import_core.z.object({\n    reasoning: import_core.z.string().optional()\n  }).passthrough().optional()\n});\nconst EVALUATOR_METADATA_KEY_DISPLAY_NAME = \"evaluatorDisplayName\";\nconst EVALUATOR_METADATA_KEY_DEFINITION = \"evaluatorDefinition\";\nconst EVALUATOR_METADATA_KEY_IS_BILLED = \"evaluatorIsBilled\";\nconst EvalResponseSchema = import_core.z.object({\n  sampleIndex: import_core.z.number().optional(),\n  testCaseId: import_core.z.string(),\n  traceId: import_core.z.string().optional(),\n  spanId: import_core.z.string().optional(),\n  evaluation: import_core.z.union([ScoreSchema, import_core.z.array(ScoreSchema)])\n});\nconst EvalResponsesSchema = import_core.z.array(EvalResponseSchema);\nfunction withMetadata(evaluator, dataPointType, configSchema) {\n  const withMeta = evaluator;\n  withMeta.__dataPointType = dataPointType;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nconst EvalRequestSchema = import_core.z.object({\n  dataset: import_core.z.array(BaseDataPointSchema),\n  evalRunId: import_core.z.string(),\n  options: import_core.z.unknown()\n});\nfunction defineEvaluator(registry, options, runner) {\n  const evalMetadata = {};\n  evalMetadata[EVALUATOR_METADATA_KEY_IS_BILLED] = options.isBilled == void 0 ? true : options.isBilled;\n  evalMetadata[EVALUATOR_METADATA_KEY_DISPLAY_NAME] = options.displayName;\n  evalMetadata[EVALUATOR_METADATA_KEY_DEFINITION] = options.definition;\n  if (options.configSchema) {\n    evalMetadata[\"customOptions\"] = (0, import_schema.toJsonSchema)({\n      schema: options.configSchema\n    });\n  }\n  const evaluator = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"evaluator\",\n      name: options.name,\n      inputSchema: EvalRequestSchema.extend({\n        dataset: options.dataPointType ? import_core.z.array(options.dataPointType) : import_core.z.array(BaseDataPointSchema),\n        options: options.configSchema ?? import_core.z.unknown(),\n        evalRunId: import_core.z.string()\n      }),\n      outputSchema: EvalResponsesSchema,\n      metadata: {\n        type: \"evaluator\",\n        evaluator: evalMetadata\n      }\n    },\n    async (i) => {\n      let evalResponses = [];\n      for (let index = 0; index < i.dataset.length; index++) {\n        const datapoint = {\n          ...i.dataset[index],\n          testCaseId: i.dataset[index].testCaseId ?? (0, import_crypto.randomUUID)()\n        };\n        try {\n          await (0, import_tracing.runInNewSpan)(\n            registry,\n            {\n              metadata: {\n                name: `Test Case ${datapoint.testCaseId}`,\n                metadata: { \"evaluator:evalRunId\": i.evalRunId }\n              },\n              labels: {\n                [import_tracing.SPAN_TYPE_ATTR]: \"evaluator\"\n              }\n            },\n            async (metadata, otSpan) => {\n              const spanId = otSpan.spanContext().spanId;\n              const traceId = otSpan.spanContext().traceId;\n              try {\n                metadata.input = {\n                  input: datapoint.input,\n                  output: datapoint.output,\n                  context: datapoint.context\n                };\n                const testCaseOutput = await runner(datapoint, i.options);\n                testCaseOutput.sampleIndex = index;\n                testCaseOutput.spanId = spanId;\n                testCaseOutput.traceId = traceId;\n                metadata.output = testCaseOutput;\n                evalResponses.push(testCaseOutput);\n                return testCaseOutput;\n              } catch (e) {\n                evalResponses.push({\n                  sampleIndex: index,\n                  spanId,\n                  traceId,\n                  testCaseId: datapoint.testCaseId,\n                  evaluation: {\n                    error: `Evaluation of test case ${datapoint.testCaseId} failed: \n${e.stack}`,\n                    status: \"FAIL\" /* FAIL */\n                  }\n                });\n                throw e;\n              }\n            }\n          );\n        } catch (e) {\n          import_logging.logger.error(\n            `Evaluation of test case ${datapoint.testCaseId} failed: \n${e.stack}`\n          );\n          continue;\n        }\n      }\n      return evalResponses;\n    }\n  );\n  const ewm = withMetadata(\n    evaluator,\n    options.dataPointType,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function evaluate(registry, params) {\n  let evaluator;\n  if (typeof params.evaluator === \"string\") {\n    evaluator = await registry.lookupAction(`/evaluator/${params.evaluator}`);\n  } else if (Object.hasOwnProperty.call(params.evaluator, \"info\")) {\n    evaluator = await registry.lookupAction(\n      `/evaluator/${params.evaluator.name}`\n    );\n  } else {\n    evaluator = params.evaluator;\n  }\n  if (!evaluator) {\n    throw new Error(\"Unable to utilize the provided evaluator\");\n  }\n  return await evaluator({\n    dataset: params.dataset,\n    options: params.options,\n    evalRunId: params.evalRunId ?? (0, import_crypto.randomUUID)()\n  });\n}\nconst EvaluatorInfoSchema = import_core.z.object({\n  /** Friendly label for this evaluator */\n  label: import_core.z.string().optional(),\n  metrics: import_core.z.array(import_core.z.string())\n});\nfunction evaluatorRef(options) {\n  return { ...options };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=evaluator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/extract.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar extract_exports = {};\n__export(extract_exports, {\n  extractItems: () => extractItems,\n  extractJson: () => extractJson,\n  parsePartialJson: () => parsePartialJson\n});\nmodule.exports = __toCommonJS(extract_exports);\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_partial_json = __webpack_require__(/*! partial-json */ \"(action-browser)/./node_modules/partial-json/dist/index.js\");\nfunction parsePartialJson(jsonString) {\n  return import_json5.default.parse(JSON.stringify((0, import_partial_json.parse)(jsonString, import_partial_json.Allow.ALL)));\n}\nfunction extractJson(text, throwOnBadJson) {\n  let openingChar;\n  let closingChar;\n  let startPos;\n  let nestingCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i].replace(/\\u00A0/g, \" \");\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (!openingChar && (char === \"{\" || char === \"[\")) {\n      openingChar = char;\n      closingChar = char === \"{\" ? \"}\" : \"]\";\n      startPos = i;\n      nestingCount++;\n    } else if (char === openingChar) {\n      nestingCount++;\n    } else if (char === closingChar) {\n      nestingCount--;\n      if (!nestingCount) {\n        return import_json5.default.parse(text.substring(startPos || 0, i + 1));\n      }\n    }\n  }\n  if (startPos !== void 0 && nestingCount > 0) {\n    try {\n      return parsePartialJson(text.substring(startPos));\n    } catch {\n      if (throwOnBadJson) {\n        throw new Error(`Invalid JSON extracted from model output: ${text}`);\n      }\n      return null;\n    }\n  }\n  if (throwOnBadJson) {\n    throw new Error(`Invalid JSON extracted from model output: ${text}`);\n  }\n  return null;\n}\nfunction extractItems(text, cursor = 0) {\n  const items = [];\n  let currentCursor = cursor;\n  if (cursor === 0) {\n    const arrayStart = text.indexOf(\"[\");\n    if (arrayStart === -1) {\n      return { items: [], cursor: text.length };\n    }\n    currentCursor = arrayStart + 1;\n  }\n  let objectStart = -1;\n  let braceCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = currentCursor; i < text.length; i++) {\n    const char = text[i];\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (char === \"{\") {\n      if (braceCount === 0) {\n        objectStart = i;\n      }\n      braceCount++;\n    } else if (char === \"}\") {\n      braceCount--;\n      if (braceCount === 0 && objectStart !== -1) {\n        try {\n          const obj = import_json5.default.parse(text.substring(objectStart, i + 1));\n          items.push(obj);\n          currentCursor = i + 1;\n          objectStart = -1;\n        } catch {\n        }\n      }\n    } else if (char === \"]\" && braceCount === 0) {\n      break;\n    }\n  }\n  return {\n    items,\n    cursor: currentCursor\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=extract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/array.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar array_exports = {};\n__export(array_exports, {\n  arrayFormatter: () => arrayFormatter\n});\nmodule.exports = __toCommonJS(array_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst arrayFormatter = {\n  name: \"array\",\n  config: {\n    contentType: \"application/json\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"array\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type when using the 'items' parser format.`\n      });\n    }\n    let instructions;\n    if (schema) {\n      instructions = `Output should be a JSON array conforming to the following schema:\n    \n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const cursor = chunk.previousChunks?.length ? (0, import_extract.extractItems)(chunk.previousText).cursor : 0;\n        const { items } = (0, import_extract.extractItems)(chunk.accumulatedText, cursor);\n        return items;\n      },\n      parseMessage: (message) => {\n        const { items } = (0, import_extract.extractItems)(message.text, 0);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2FycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvYXJyYXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGFycmF5X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGFycmF5X2V4cG9ydHMsIHtcbiAgYXJyYXlGb3JtYXR0ZXI6ICgpID0+IGFycmF5Rm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGFycmF5X2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0XCIpO1xuY29uc3QgYXJyYXlGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiYXJyYXlcIixcbiAgY29uZmlnOiB7XG4gICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIGNvbnN0cmFpbmVkOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IChzY2hlbWEpID0+IHtcbiAgICBpZiAoc2NoZW1hICYmIHNjaGVtYS50eXBlICE9PSBcImFycmF5XCIpIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICAgIG1lc3NhZ2U6IGBNdXN0IHN1cHBseSBhbiAnYXJyYXknIHNjaGVtYSB0eXBlIHdoZW4gdXNpbmcgdGhlICdpdGVtcycgcGFyc2VyIGZvcm1hdC5gXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAoc2NoZW1hKSB7XG4gICAgICBpbnN0cnVjdGlvbnMgPSBgT3V0cHV0IHNob3VsZCBiZSBhIEpTT04gYXJyYXkgY29uZm9ybWluZyB0byB0aGUgZm9sbG93aW5nIHNjaGVtYTpcbiAgICBcblxcYFxcYFxcYFxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEpfVxuXFxgXFxgXFxgXG4gICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlQ2h1bms6IChjaHVuaykgPT4ge1xuICAgICAgICBjb25zdCBjdXJzb3IgPSBjaHVuay5wcmV2aW91c0NodW5rcz8ubGVuZ3RoID8gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RJdGVtcykoY2h1bmsucHJldmlvdXNUZXh0KS5jdXJzb3IgOiAwO1xuICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEl0ZW1zKShjaHVuay5hY2N1bXVsYXRlZFRleHQsIGN1cnNvcik7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgIH0sXG4gICAgICBwYXJzZU1lc3NhZ2U6IChtZXNzYWdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaXRlbXMgfSA9ICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SXRlbXMpKG1lc3NhZ2UudGV4dCwgMCk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgIH0sXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFycmF5Rm9ybWF0dGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/enum.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar enum_exports = {};\n__export(enum_exports, {\n  enumFormatter: () => enumFormatter\n});\nmodule.exports = __toCommonJS(enum_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst enumFormatter = {\n  name: \"enum\",\n  config: {\n    contentType: \"text/enum\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"string\" && schema.type !== \"enum\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply a 'string' or 'enum' schema type when using the enum parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.enum) {\n      instructions = `Output should be ONLY one of the following enum values. Do not output any additional information or add quotes.\n\n${schema.enum.map((v) => v.toString()).join(\"\\n\")}`;\n    }\n    return {\n      parseMessage: (message) => {\n        return message.text.replace(/['\"]/g, \"\").trim();\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsZ0RBQWdEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZm9ybWF0cy9lbnVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBlbnVtX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGVudW1fZXhwb3J0cywge1xuICBlbnVtRm9ybWF0dGVyOiAoKSA9PiBlbnVtRm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGVudW1fZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xuY29uc3QgZW51bUZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJlbnVtXCIsXG4gIGNvbmZpZzoge1xuICAgIGNvbnRlbnRUeXBlOiBcInRleHQvZW51bVwiLFxuICAgIGNvbnN0cmFpbmVkOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IChzY2hlbWEpID0+IHtcbiAgICBpZiAoc2NoZW1hICYmIHNjaGVtYS50eXBlICE9PSBcInN0cmluZ1wiICYmIHNjaGVtYS50eXBlICE9PSBcImVudW1cIikge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgICAgbWVzc2FnZTogYE11c3Qgc3VwcGx5IGEgJ3N0cmluZycgb3IgJ2VudW0nIHNjaGVtYSB0eXBlIHdoZW4gdXNpbmcgdGhlIGVudW0gcGFyc2VyIGZvcm1hdC5gXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAoc2NoZW1hPy5lbnVtKSB7XG4gICAgICBpbnN0cnVjdGlvbnMgPSBgT3V0cHV0IHNob3VsZCBiZSBPTkxZIG9uZSBvZiB0aGUgZm9sbG93aW5nIGVudW0gdmFsdWVzLiBEbyBub3Qgb3V0cHV0IGFueSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIG9yIGFkZCBxdW90ZXMuXG5cbiR7c2NoZW1hLmVudW0ubWFwKCh2KSA9PiB2LnRvU3RyaW5nKCkpLmpvaW4oXCJcXG5cIil9YDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudGV4dC5yZXBsYWNlKC9bJ1wiXS9nLCBcIlwiKS50cmltKCk7XG4gICAgICB9LFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfTtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBlbnVtRm9ybWF0dGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar formats_exports = {};\n__export(formats_exports, {\n  DEFAULT_FORMATS: () => DEFAULT_FORMATS,\n  configureFormats: () => configureFormats,\n  defineFormat: () => defineFormat,\n  injectInstructions: () => injectInstructions,\n  resolveFormat: () => resolveFormat,\n  resolveInstructions: () => resolveInstructions\n});\nmodule.exports = __toCommonJS(formats_exports);\nvar import_array = __webpack_require__(/*! ./array.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\");\nvar import_enum = __webpack_require__(/*! ./enum.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\");\nvar import_json = __webpack_require__(/*! ./json.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\");\nvar import_jsonl = __webpack_require__(/*! ./jsonl.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\");\nvar import_text = __webpack_require__(/*! ./text.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\");\nfunction defineFormat(registry, options, handler) {\n  const { name, ...config } = options;\n  const formatter = { config, handler };\n  registry.registerValue(\"format\", name, formatter);\n  return formatter;\n}\nasync function resolveFormat(registry, outputOpts) {\n  if (!outputOpts) return void 0;\n  if ((outputOpts.jsonSchema || outputOpts.schema) && !outputOpts.format) {\n    return registry.lookupValue(\"format\", \"json\");\n  }\n  if (outputOpts.format) {\n    return registry.lookupValue(\"format\", outputOpts.format);\n  }\n  return void 0;\n}\nfunction resolveInstructions(format, schema, instructionsOption) {\n  if (typeof instructionsOption === \"string\") return instructionsOption;\n  if (instructionsOption === false) return void 0;\n  if (!format) return void 0;\n  return format.handler(schema).instructions;\n}\nfunction injectInstructions(messages, instructions) {\n  if (!instructions) return messages;\n  if (messages.find(\n    (m2) => m2.content.find(\n      (p) => p.metadata?.purpose === \"output\" && !p.metadata?.pending\n    )\n  )) {\n    return messages;\n  }\n  const newPart = {\n    text: instructions,\n    metadata: { purpose: \"output\" }\n  };\n  let targetIndex = messages.findIndex((m2) => m2.role === \"system\");\n  if (targetIndex < 0)\n    targetIndex = messages.map((m2) => m2.role).lastIndexOf(\"user\");\n  if (targetIndex < 0) return messages;\n  const m = {\n    ...messages[targetIndex],\n    content: [...messages[targetIndex].content]\n  };\n  const partIndex = m.content.findIndex(\n    (p) => p.metadata?.purpose === \"output\" && p.metadata?.pending\n  );\n  if (partIndex > 0) {\n    m.content.splice(partIndex, 1, newPart);\n  } else {\n    m.content.push(newPart);\n  }\n  const outMessages = [...messages];\n  outMessages.splice(targetIndex, 1, m);\n  return outMessages;\n}\nconst DEFAULT_FORMATS = [\n  import_json.jsonFormatter,\n  import_array.arrayFormatter,\n  import_text.textFormatter,\n  import_enum.enumFormatter,\n  import_jsonl.jsonlFormatter\n];\nfunction configureFormats(registry) {\n  for (const format of DEFAULT_FORMATS) {\n    defineFormat(\n      registry,\n      { name: format.name, ...format.config },\n      format.handler\n    );\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDO0FBQ0EsVUFBVSxrQkFBa0I7QUFDNUIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFDQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQU9MO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGZvcm1hdHNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZm9ybWF0c19leHBvcnRzLCB7XG4gIERFRkFVTFRfRk9STUFUUzogKCkgPT4gREVGQVVMVF9GT1JNQVRTLFxuICBjb25maWd1cmVGb3JtYXRzOiAoKSA9PiBjb25maWd1cmVGb3JtYXRzLFxuICBkZWZpbmVGb3JtYXQ6ICgpID0+IGRlZmluZUZvcm1hdCxcbiAgaW5qZWN0SW5zdHJ1Y3Rpb25zOiAoKSA9PiBpbmplY3RJbnN0cnVjdGlvbnMsXG4gIHJlc29sdmVGb3JtYXQ6ICgpID0+IHJlc29sdmVGb3JtYXQsXG4gIHJlc29sdmVJbnN0cnVjdGlvbnM6ICgpID0+IHJlc29sdmVJbnN0cnVjdGlvbnNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZm9ybWF0c19leHBvcnRzKTtcbnZhciBpbXBvcnRfYXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheS5qc1wiKTtcbnZhciBpbXBvcnRfZW51bSA9IHJlcXVpcmUoXCIuL2VudW0uanNcIik7XG52YXIgaW1wb3J0X2pzb24gPSByZXF1aXJlKFwiLi9qc29uLmpzXCIpO1xudmFyIGltcG9ydF9qc29ubCA9IHJlcXVpcmUoXCIuL2pzb25sLmpzXCIpO1xudmFyIGltcG9ydF90ZXh0ID0gcmVxdWlyZShcIi4vdGV4dC5qc1wiKTtcbmZ1bmN0aW9uIGRlZmluZUZvcm1hdChyZWdpc3RyeSwgb3B0aW9ucywgaGFuZGxlcikge1xuICBjb25zdCB7IG5hbWUsIC4uLmNvbmZpZyB9ID0gb3B0aW9ucztcbiAgY29uc3QgZm9ybWF0dGVyID0geyBjb25maWcsIGhhbmRsZXIgfTtcbiAgcmVnaXN0cnkucmVnaXN0ZXJWYWx1ZShcImZvcm1hdFwiLCBuYW1lLCBmb3JtYXR0ZXIpO1xuICByZXR1cm4gZm9ybWF0dGVyO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUZvcm1hdChyZWdpc3RyeSwgb3V0cHV0T3B0cykge1xuICBpZiAoIW91dHB1dE9wdHMpIHJldHVybiB2b2lkIDA7XG4gIGlmICgob3V0cHV0T3B0cy5qc29uU2NoZW1hIHx8IG91dHB1dE9wdHMuc2NoZW1hKSAmJiAhb3V0cHV0T3B0cy5mb3JtYXQpIHtcbiAgICByZXR1cm4gcmVnaXN0cnkubG9va3VwVmFsdWUoXCJmb3JtYXRcIiwgXCJqc29uXCIpO1xuICB9XG4gIGlmIChvdXRwdXRPcHRzLmZvcm1hdCkge1xuICAgIHJldHVybiByZWdpc3RyeS5sb29rdXBWYWx1ZShcImZvcm1hdFwiLCBvdXRwdXRPcHRzLmZvcm1hdCk7XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVJbnN0cnVjdGlvbnMoZm9ybWF0LCBzY2hlbWEsIGluc3RydWN0aW9uc09wdGlvbikge1xuICBpZiAodHlwZW9mIGluc3RydWN0aW9uc09wdGlvbiA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGluc3RydWN0aW9uc09wdGlvbjtcbiAgaWYgKGluc3RydWN0aW9uc09wdGlvbiA9PT0gZmFsc2UpIHJldHVybiB2b2lkIDA7XG4gIGlmICghZm9ybWF0KSByZXR1cm4gdm9pZCAwO1xuICByZXR1cm4gZm9ybWF0LmhhbmRsZXIoc2NoZW1hKS5pbnN0cnVjdGlvbnM7XG59XG5mdW5jdGlvbiBpbmplY3RJbnN0cnVjdGlvbnMobWVzc2FnZXMsIGluc3RydWN0aW9ucykge1xuICBpZiAoIWluc3RydWN0aW9ucykgcmV0dXJuIG1lc3NhZ2VzO1xuICBpZiAobWVzc2FnZXMuZmluZChcbiAgICAobTIpID0+IG0yLmNvbnRlbnQuZmluZChcbiAgICAgIChwKSA9PiBwLm1ldGFkYXRhPy5wdXJwb3NlID09PSBcIm91dHB1dFwiICYmICFwLm1ldGFkYXRhPy5wZW5kaW5nXG4gICAgKVxuICApKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9XG4gIGNvbnN0IG5ld1BhcnQgPSB7XG4gICAgdGV4dDogaW5zdHJ1Y3Rpb25zLFxuICAgIG1ldGFkYXRhOiB7IHB1cnBvc2U6IFwib3V0cHV0XCIgfVxuICB9O1xuICBsZXQgdGFyZ2V0SW5kZXggPSBtZXNzYWdlcy5maW5kSW5kZXgoKG0yKSA9PiBtMi5yb2xlID09PSBcInN5c3RlbVwiKTtcbiAgaWYgKHRhcmdldEluZGV4IDwgMClcbiAgICB0YXJnZXRJbmRleCA9IG1lc3NhZ2VzLm1hcCgobTIpID0+IG0yLnJvbGUpLmxhc3RJbmRleE9mKFwidXNlclwiKTtcbiAgaWYgKHRhcmdldEluZGV4IDwgMCkgcmV0dXJuIG1lc3NhZ2VzO1xuICBjb25zdCBtID0ge1xuICAgIC4uLm1lc3NhZ2VzW3RhcmdldEluZGV4XSxcbiAgICBjb250ZW50OiBbLi4ubWVzc2FnZXNbdGFyZ2V0SW5kZXhdLmNvbnRlbnRdXG4gIH07XG4gIGNvbnN0IHBhcnRJbmRleCA9IG0uY29udGVudC5maW5kSW5kZXgoXG4gICAgKHApID0+IHAubWV0YWRhdGE/LnB1cnBvc2UgPT09IFwib3V0cHV0XCIgJiYgcC5tZXRhZGF0YT8ucGVuZGluZ1xuICApO1xuICBpZiAocGFydEluZGV4ID4gMCkge1xuICAgIG0uY29udGVudC5zcGxpY2UocGFydEluZGV4LCAxLCBuZXdQYXJ0KTtcbiAgfSBlbHNlIHtcbiAgICBtLmNvbnRlbnQucHVzaChuZXdQYXJ0KTtcbiAgfVxuICBjb25zdCBvdXRNZXNzYWdlcyA9IFsuLi5tZXNzYWdlc107XG4gIG91dE1lc3NhZ2VzLnNwbGljZSh0YXJnZXRJbmRleCwgMSwgbSk7XG4gIHJldHVybiBvdXRNZXNzYWdlcztcbn1cbmNvbnN0IERFRkFVTFRfRk9STUFUUyA9IFtcbiAgaW1wb3J0X2pzb24uanNvbkZvcm1hdHRlcixcbiAgaW1wb3J0X2FycmF5LmFycmF5Rm9ybWF0dGVyLFxuICBpbXBvcnRfdGV4dC50ZXh0Rm9ybWF0dGVyLFxuICBpbXBvcnRfZW51bS5lbnVtRm9ybWF0dGVyLFxuICBpbXBvcnRfanNvbmwuanNvbmxGb3JtYXR0ZXJcbl07XG5mdW5jdGlvbiBjb25maWd1cmVGb3JtYXRzKHJlZ2lzdHJ5KSB7XG4gIGZvciAoY29uc3QgZm9ybWF0IG9mIERFRkFVTFRfRk9STUFUUykge1xuICAgIGRlZmluZUZvcm1hdChcbiAgICAgIHJlZ2lzdHJ5LFxuICAgICAgeyBuYW1lOiBmb3JtYXQubmFtZSwgLi4uZm9ybWF0LmNvbmZpZyB9LFxuICAgICAgZm9ybWF0LmhhbmRsZXJcbiAgICApO1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgREVGQVVMVF9GT1JNQVRTLFxuICBjb25maWd1cmVGb3JtYXRzLFxuICBkZWZpbmVGb3JtYXQsXG4gIGluamVjdEluc3RydWN0aW9ucyxcbiAgcmVzb2x2ZUZvcm1hdCxcbiAgcmVzb2x2ZUluc3RydWN0aW9uc1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/json.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar json_exports = {};\n__export(json_exports, {\n  jsonFormatter: () => jsonFormatter\n});\nmodule.exports = __toCommonJS(json_exports);\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst jsonFormatter = {\n  name: \"json\",\n  config: {\n    format: \"json\",\n    contentType: \"application/json\",\n    constrained: true,\n    defaultInstructions: false\n  },\n  handler: (schema) => {\n    let instructions;\n    if (schema) {\n      instructions = `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\n    }\n    return {\n      parseChunk: (chunk) => {\n        return (0, import_extract.extractJson)(chunk.accumulatedText);\n      },\n      parseMessage: (message) => {\n        return (0, import_extract.extractJson)(message.text);\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=json.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvanNvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIganNvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydChqc29uX2V4cG9ydHMsIHtcbiAganNvbkZvcm1hdHRlcjogKCkgPT4ganNvbkZvcm1hdHRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhqc29uX2V4cG9ydHMpO1xudmFyIGltcG9ydF9leHRyYWN0ID0gcmVxdWlyZShcIi4uL2V4dHJhY3RcIik7XG5jb25zdCBqc29uRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImpzb25cIixcbiAgY29uZmlnOiB7XG4gICAgZm9ybWF0OiBcImpzb25cIixcbiAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgY29uc3RyYWluZWQ6IHRydWUsXG4gICAgZGVmYXVsdEluc3RydWN0aW9uczogZmFsc2VcbiAgfSxcbiAgaGFuZGxlcjogKHNjaGVtYSkgPT4ge1xuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYSkge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgaW4gSlNPTiBmb3JtYXQgYW5kIGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBzY2hlbWE6XG5cblxcYFxcYFxcYFxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEpfVxuXFxgXFxgXFxgXG5gO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2VDaHVuazogKGNodW5rKSA9PiB7XG4gICAgICAgIHJldHVybiAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKGNodW5rLmFjY3VtdWxhdGVkVGV4dCk7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICByZXR1cm4gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RKc29uKShtZXNzYWdlLnRleHQpO1xuICAgICAgfSxcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH07XG4gIH1cbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAganNvbkZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/jsonl.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar jsonl_exports = {};\n__export(jsonl_exports, {\n  jsonlFormatter: () => jsonlFormatter\n});\nmodule.exports = __toCommonJS(jsonl_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nfunction objectLines(text) {\n  return text.split(\"\\n\").map((line) => line.trim()).filter((line) => line.startsWith(\"{\"));\n}\nconst jsonlFormatter = {\n  name: \"jsonl\",\n  config: {\n    contentType: \"application/jsonl\"\n  },\n  handler: (schema) => {\n    if (schema && (schema.type !== \"array\" || schema.items?.type !== \"object\")) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type containing 'object' items when using the 'jsonl' parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.items) {\n      instructions = `Output should be JSONL format, a sequence of JSON objects (one per line) separated by a newline \\`\\\\n\\` character. Each line should be a JSON object conforming to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema.items)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const results = [];\n        const text = chunk.accumulatedText;\n        let startIndex = 0;\n        if (chunk.previousChunks?.length) {\n          const lastNewline = chunk.previousText.lastIndexOf(\"\\n\");\n          if (lastNewline !== -1) {\n            startIndex = lastNewline + 1;\n          }\n        }\n        const lines = text.slice(startIndex).split(\"\\n\");\n        for (const line of lines) {\n          const trimmed = line.trim();\n          if (trimmed.startsWith(\"{\")) {\n            try {\n              const result = import_json5.default.parse(trimmed);\n              if (result) {\n                results.push(result);\n              }\n            } catch (e) {\n              break;\n            }\n          }\n        }\n        return results;\n      },\n      parseMessage: (message) => {\n        const items = objectLines(message.text).map((l) => (0, import_extract.extractJson)(l)).filter((l) => !!l);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=jsonl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb25sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQywyQkFBMkIsbUJBQU8sQ0FBQyxtRUFBTztBQUMxQyxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBLHdGQUF3RjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZm9ybWF0cy9qc29ubC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIganNvbmxfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoanNvbmxfZXhwb3J0cywge1xuICBqc29ubEZvcm1hdHRlcjogKCkgPT4ganNvbmxGb3JtYXR0ZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoanNvbmxfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9qc29uNSA9IF9fdG9FU00ocmVxdWlyZShcImpzb241XCIpKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0XCIpO1xuZnVuY3Rpb24gb2JqZWN0TGluZXModGV4dCkge1xuICByZXR1cm4gdGV4dC5zcGxpdChcIlxcblwiKS5tYXAoKGxpbmUpID0+IGxpbmUudHJpbSgpKS5maWx0ZXIoKGxpbmUpID0+IGxpbmUuc3RhcnRzV2l0aChcIntcIikpO1xufVxuY29uc3QganNvbmxGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwianNvbmxcIixcbiAgY29uZmlnOiB7XG4gICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbmxcIlxuICB9LFxuICBoYW5kbGVyOiAoc2NoZW1hKSA9PiB7XG4gICAgaWYgKHNjaGVtYSAmJiAoc2NoZW1hLnR5cGUgIT09IFwiYXJyYXlcIiB8fCBzY2hlbWEuaXRlbXM/LnR5cGUgIT09IFwib2JqZWN0XCIpKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgICBtZXNzYWdlOiBgTXVzdCBzdXBwbHkgYW4gJ2FycmF5JyBzY2hlbWEgdHlwZSBjb250YWluaW5nICdvYmplY3QnIGl0ZW1zIHdoZW4gdXNpbmcgdGhlICdqc29ubCcgcGFyc2VyIGZvcm1hdC5gXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAoc2NoZW1hPy5pdGVtcykge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgSlNPTkwgZm9ybWF0LCBhIHNlcXVlbmNlIG9mIEpTT04gb2JqZWN0cyAob25lIHBlciBsaW5lKSBzZXBhcmF0ZWQgYnkgYSBuZXdsaW5lIFxcYFxcXFxuXFxgIGNoYXJhY3Rlci4gRWFjaCBsaW5lIHNob3VsZCBiZSBhIEpTT04gb2JqZWN0IGNvbmZvcm1pbmcgdG8gdGhlIGZvbGxvd2luZyBzY2hlbWE6XG5cblxcYFxcYFxcYFxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEuaXRlbXMpfVxuXFxgXFxgXFxgXG4gICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlQ2h1bms6IChjaHVuaykgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgICAgIGNvbnN0IHRleHQgPSBjaHVuay5hY2N1bXVsYXRlZFRleHQ7XG4gICAgICAgIGxldCBzdGFydEluZGV4ID0gMDtcbiAgICAgICAgaWYgKGNodW5rLnByZXZpb3VzQ2h1bmtzPy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBsYXN0TmV3bGluZSA9IGNodW5rLnByZXZpb3VzVGV4dC5sYXN0SW5kZXhPZihcIlxcblwiKTtcbiAgICAgICAgICBpZiAobGFzdE5ld2xpbmUgIT09IC0xKSB7XG4gICAgICAgICAgICBzdGFydEluZGV4ID0gbGFzdE5ld2xpbmUgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lcyA9IHRleHQuc2xpY2Uoc3RhcnRJbmRleCkuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgIGNvbnN0IHRyaW1tZWQgPSBsaW5lLnRyaW0oKTtcbiAgICAgICAgICBpZiAodHJpbW1lZC5zdGFydHNXaXRoKFwie1wiKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaW1wb3J0X2pzb241LmRlZmF1bHQucGFyc2UodHJpbW1lZCk7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IG9iamVjdExpbmVzKG1lc3NhZ2UudGV4dCkubWFwKChsKSA9PiAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKGwpKS5maWx0ZXIoKGwpID0+ICEhbCk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgIH0sXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGpzb25sRm9ybWF0dGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb25sLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/text.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar text_exports = {};\n__export(text_exports, {\n  textFormatter: () => textFormatter\n});\nmodule.exports = __toCommonJS(text_exports);\nconst textFormatter = {\n  name: \"text\",\n  config: {\n    contentType: \"text/plain\"\n  },\n  handler: () => {\n    return {\n      parseChunk: (chunk) => {\n        return chunk.text;\n      },\n      parseMessage: (message) => {\n        return message.text;\n      }\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=text.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL3RleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL3RleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHRleHRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodGV4dF9leHBvcnRzLCB7XG4gIHRleHRGb3JtYXR0ZXI6ICgpID0+IHRleHRGb3JtYXR0ZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModGV4dF9leHBvcnRzKTtcbmNvbnN0IHRleHRGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwidGV4dFwiLFxuICBjb25maWc6IHtcbiAgICBjb250ZW50VHlwZTogXCJ0ZXh0L3BsYWluXCJcbiAgfSxcbiAgaGFuZGxlcjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJzZUNodW5rOiAoY2h1bmspID0+IHtcbiAgICAgICAgcmV0dXJuIGNodW5rLnRleHQ7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS50ZXh0O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGV4dEZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar generate_exports = {};\n__export(generate_exports, {\n  GenerateResponse: () => import_response.GenerateResponse,\n  GenerateResponseChunk: () => import_chunk.GenerateResponseChunk,\n  GenerationBlockedError: () => GenerationBlockedError,\n  GenerationResponseError: () => GenerationResponseError,\n  generate: () => generate,\n  generateStream: () => generateStream,\n  tagAsPreamble: () => tagAsPreamble,\n  toGenerateActionOptions: () => toGenerateActionOptions,\n  toGenerateRequest: () => toGenerateRequest\n});\nmodule.exports = __toCommonJS(generate_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_formats = __webpack_require__(/*! ./formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\nvar import_chunk = __webpack_require__(/*! ./generate/chunk.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\");\nvar import_response = __webpack_require__(/*! ./generate/response.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nasync function toGenerateRequest(registry, options) {\n  let messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages.map((m) => import_message.Message.parseData(m)));\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  if (options.resume && !(messages.at(-1)?.role === \"model\" && messages.at(-1)?.content.find((p) => !!p.toolRequest))) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Last message must be a 'model' role with at least one tool request to 'resume' generation.`,\n      detail: messages.at(-1)\n    });\n  }\n  let tools;\n  if (options.tools) {\n    tools = await (0, import_tool.resolveTools)(registry, options.tools);\n  }\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, options.output);\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    resolvedSchema,\n    options?.output?.instructions\n  );\n  const out = {\n    messages: (0, import_action.shouldInjectFormatInstructions)(\n      resolvedFormat?.config,\n      options.output\n    ) ? (0, import_formats.injectInstructions)(messages, instructions) : messages,\n    config: options.config,\n    docs: options.docs,\n    tools: tools?.map(import_tool.toToolDefinition) || [],\n    output: {\n      ...resolvedFormat?.config || {},\n      ...options.output,\n      schema: resolvedSchema\n    }\n  };\n  if (!out?.output?.schema) delete out?.output?.schema;\n  return out;\n}\nclass GenerationResponseError extends import_core.GenkitError {\n  detail;\n  constructor(response, message, status, detail) {\n    super({\n      status: status || \"FAILED_PRECONDITION\",\n      message\n    });\n    this.detail = { response, ...detail };\n  }\n}\nasync function toolsToActionRefs(registry, toolOpt) {\n  if (!toolOpt) return;\n  let tools = [];\n  for (const t of toolOpt) {\n    if (typeof t === \"string\") {\n      tools.push(await resolveFullToolName(registry, t));\n    } else if (t.__action) {\n      tools.push(\n        `/${t.__action.metadata?.type}/${t.__action.name}`\n      );\n    } else if (typeof t.asTool === \"function\") {\n      const promptToolAction = await t.asTool();\n      tools.push(`/prompt/${promptToolAction.__action.name}`);\n    } else if (t.name) {\n      tools.push(await resolveFullToolName(registry, t.name));\n    } else {\n      throw new Error(`Unable to determine type of tool: ${JSON.stringify(t)}`);\n    }\n  }\n  return tools;\n}\nfunction messagesFromOptions(options) {\n  const messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages);\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  return messages;\n}\nclass GenerationBlockedError extends GenerationResponseError {\n}\nasync function generate(registry, options) {\n  const resolvedOptions = {\n    ...await Promise.resolve(options)\n  };\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, resolvedOptions.output);\n  registry = maybeRegisterDynamicTools(registry, resolvedOptions);\n  const params = await toGenerateActionOptions(registry, resolvedOptions);\n  const tools = await toolsToActionRefs(registry, resolvedOptions.tools);\n  return await (0, import_core.runWithStreamingCallback)(\n    registry,\n    stripNoop(resolvedOptions.onChunk ?? resolvedOptions.streamingCallback),\n    async () => {\n      const response = await (0, import_core.runWithContext)(\n        registry,\n        resolvedOptions.context,\n        () => (0, import_action.generateHelper)(registry, {\n          rawRequest: params,\n          middleware: resolvedOptions.use\n        })\n      );\n      const request = await toGenerateRequest(registry, {\n        ...resolvedOptions,\n        tools\n      });\n      return new import_response.GenerateResponse(response, {\n        request: response.request ?? request,\n        parser: resolvedFormat?.handler(request.output?.schema).parseMessage\n      });\n    }\n  );\n}\nfunction maybeRegisterDynamicTools(registry, options) {\n  let hasDynamicTools = false;\n  options?.tools?.forEach((t) => {\n    if (t.__action && t.__action.metadata?.type === \"tool\" && t.__action.metadata?.dynamic) {\n      if (!hasDynamicTools) {\n        hasDynamicTools = true;\n        registry = import_registry.Registry.withParent(registry);\n      }\n      registry.registerAction(\"tool\", t);\n    }\n  });\n  return registry;\n}\nasync function toGenerateActionOptions(registry, options) {\n  const resolvedModel = await (0, import_model.resolveModel)(registry, options.model);\n  const tools = await toolsToActionRefs(registry, options.tools);\n  const messages = messagesFromOptions(options);\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  if ((options.output?.schema || options.output?.jsonSchema) && !options.output?.format) {\n    options.output.format = \"json\";\n  }\n  const params = {\n    model: resolvedModel.modelAction.__action.name,\n    docs: options.docs,\n    messages,\n    tools,\n    toolChoice: options.toolChoice,\n    config: {\n      version: resolvedModel.version,\n      ...stripUndefinedOptions(resolvedModel.config),\n      ...stripUndefinedOptions(options.config)\n    },\n    output: options.output && {\n      ...options.output,\n      format: options.output.format,\n      jsonSchema: resolvedSchema\n    },\n    // coerce reply and restart into arrays for the action schema\n    resume: options.resume && {\n      respond: [options.resume.respond || []].flat(),\n      restart: [options.resume.restart || []].flat(),\n      metadata: options.resume.metadata\n    },\n    returnToolRequests: options.returnToolRequests,\n    maxTurns: options.maxTurns\n  };\n  if (Object.keys(params.config).length === 0 && !options.config) {\n    delete params.config;\n  }\n  return params;\n}\nfunction stripNoop(callback) {\n  if (callback === import_core.sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return callback;\n}\nfunction stripUndefinedOptions(input) {\n  if (!input) return input;\n  const copy = { ...input };\n  Object.keys(input).forEach((key) => {\n    if (copy[key] === void 0) {\n      delete copy[key];\n    }\n  });\n  return copy;\n}\nasync function resolveFullToolName(registry, name) {\n  if (await registry.lookupAction(`/tool/${name}`)) {\n    return `/tool/${name}`;\n  } else if (await registry.lookupAction(`/prompt/${name}`)) {\n    return `/prompt/${name}`;\n  } else {\n    throw new Error(`Unable to determine type of of tool: ${name}`);\n  }\n}\nfunction generateStream(registry, options) {\n  let channel = new import_async.Channel();\n  const generated = Promise.resolve(options).then(\n    (resolvedOptions) => generate(registry, {\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    })\n  );\n  generated.then(\n    () => channel.close(),\n    (err) => channel.error(err)\n  );\n  return {\n    response: generated,\n    stream: channel\n  };\n}\nfunction tagAsPreamble(msgs) {\n  if (!msgs) {\n    return void 0;\n  }\n  return msgs.map((m) => ({\n    ...m,\n    metadata: {\n      ...m.metadata,\n      preamble: true\n    }\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=generate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/action.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  defineGenerateAction: () => defineGenerateAction,\n  generateHelper: () => generateHelper,\n  inferRoleFromParts: () => inferRoleFromParts,\n  shouldInjectFormatInstructions: () => shouldInjectFormatInstructions\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_model = __webpack_require__(/*! ../model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nvar import_resolve_tool_requests = __webpack_require__(/*! ./resolve-tool-requests.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\");\nfunction defineGenerateAction(registry) {\n  return (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"util\",\n      name: \"generate\",\n      inputSchema: import_model.GenerateActionOptionsSchema,\n      outputSchema: import_model.GenerateResponseSchema,\n      streamSchema: import_model.GenerateResponseChunkSchema\n    },\n    async (request, { sendChunk }) => {\n      const generateFn = () => generate(registry, {\n        rawRequest: request,\n        currentTurn: 0,\n        messageIndex: 0,\n        // Generate util action does not support middleware. Maybe when we add named/registered middleware....\n        middleware: []\n      });\n      return sendChunk ? (0, import_core.runWithStreamingCallback)(\n        registry,\n        (c) => sendChunk(c.toJSON ? c.toJSON() : c),\n        generateFn\n      ) : generateFn();\n    }\n  );\n}\nasync function generateHelper(registry, options) {\n  let currentTurn = options.currentTurn ?? 0;\n  let messageIndex = options.messageIndex ?? 0;\n  return await (0, import_tracing.runInNewSpan)(\n    registry,\n    {\n      metadata: {\n        name: \"generate\"\n      },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"util\"\n      }\n    },\n    async (metadata) => {\n      metadata.name = \"generate\";\n      metadata.input = options.rawRequest;\n      const output = await generate(registry, {\n        rawRequest: options.rawRequest,\n        middleware: options.middleware,\n        currentTurn,\n        messageIndex\n      });\n      metadata.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\nasync function resolveParameters(registry, request) {\n  const [model, tools, format] = await Promise.all([\n    (0, import_model.resolveModel)(registry, request.model, { warnDeprecated: true }).then(\n      (r) => r.modelAction\n    ),\n    (0, import_tool.resolveTools)(registry, request.tools),\n    (0, import_formats.resolveFormat)(registry, request.output)\n  ]);\n  return { model, tools, format };\n}\nfunction applyFormat(rawRequest, resolvedFormat) {\n  const outRequest = { ...rawRequest };\n  if (rawRequest.output?.jsonSchema && !rawRequest.output?.format) {\n    outRequest.output = { ...rawRequest.output, format: \"json\" };\n  }\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    outRequest.output?.jsonSchema,\n    outRequest?.output?.instructions\n  );\n  if (resolvedFormat) {\n    if (shouldInjectFormatInstructions(resolvedFormat.config, rawRequest?.output)) {\n      outRequest.messages = (0, import_formats.injectInstructions)(\n        outRequest.messages,\n        instructions\n      );\n    }\n    outRequest.output = {\n      // use output config from the format\n      ...resolvedFormat.config,\n      // if anything is set explicitly, use that\n      ...outRequest.output\n    };\n  }\n  return outRequest;\n}\nfunction shouldInjectFormatInstructions(formatConfig, rawRequestConfig) {\n  return formatConfig?.defaultInstructions !== false || rawRequestConfig?.instructions;\n}\nfunction applyTransferPreamble(rawRequest, transferPreamble) {\n  if (!transferPreamble) {\n    return rawRequest;\n  }\n  return (0, import_core.stripUndefinedProps)({\n    ...rawRequest,\n    messages: [\n      ...(0, import_generate.tagAsPreamble)(transferPreamble.messages),\n      ...rawRequest.messages.filter((m) => !m.metadata?.preamble)\n    ],\n    toolChoice: transferPreamble.toolChoice || rawRequest.toolChoice,\n    tools: transferPreamble.tools || rawRequest.tools,\n    config: transferPreamble.config || rawRequest.config\n  });\n}\nasync function generate(registry, {\n  rawRequest,\n  middleware,\n  currentTurn,\n  messageIndex\n}) {\n  const { model, tools, format } = await resolveParameters(\n    registry,\n    rawRequest\n  );\n  rawRequest = applyFormat(rawRequest, format);\n  await (0, import_resolve_tool_requests.assertValidToolNames)(tools);\n  const {\n    revisedRequest,\n    interruptedResponse,\n    toolMessage: resumedToolMessage\n  } = await (0, import_resolve_tool_requests.resolveResumeOption)(registry, rawRequest);\n  if (interruptedResponse) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: \"One or more tools triggered an interrupt during a restarted execution.\",\n      detail: { message: interruptedResponse.message }\n    });\n  }\n  rawRequest = revisedRequest;\n  const request = await actionToGenerateRequest(\n    rawRequest,\n    tools,\n    format,\n    model\n  );\n  const previousChunks = [];\n  let chunkRole = \"model\";\n  const makeChunk = (role, chunk) => {\n    if (role !== chunkRole && previousChunks.length) messageIndex++;\n    chunkRole = role;\n    const prevToSend = [...previousChunks];\n    previousChunks.push(chunk);\n    return new import_generate.GenerateResponseChunk(chunk, {\n      index: messageIndex,\n      role,\n      previousChunks: prevToSend,\n      parser: format?.handler(request.output?.schema).parseChunk\n    });\n  };\n  const streamingCallback = (0, import_core.getStreamingCallback)(registry);\n  if (resumedToolMessage && streamingCallback) {\n    streamingCallback(makeChunk(\"tool\", resumedToolMessage));\n  }\n  const response = await (0, import_core.runWithStreamingCallback)(\n    registry,\n    streamingCallback && ((chunk) => streamingCallback(makeChunk(\"model\", chunk))),\n    async () => {\n      const dispatch = async (index, req) => {\n        if (!middleware || index === middleware.length) {\n          return await model(req);\n        }\n        const currentMiddleware = middleware[index];\n        return currentMiddleware(\n          req,\n          async (modifiedReq) => dispatch(index + 1, modifiedReq || req)\n        );\n      };\n      return new import_generate.GenerateResponse(await dispatch(0, request), {\n        request,\n        parser: format?.handler(request.output?.schema).parseMessage\n      });\n    }\n  );\n  response.assertValid();\n  const generatedMessage = response.message;\n  const toolRequests = generatedMessage.content.filter(\n    (part) => !!part.toolRequest\n  );\n  if (rawRequest.returnToolRequests || toolRequests.length === 0) {\n    if (toolRequests.length === 0) response.assertValidSchema(request);\n    return response.toJSON();\n  }\n  const maxIterations = rawRequest.maxTurns ?? 5;\n  if (currentTurn + 1 > maxIterations) {\n    throw new import_generate.GenerationResponseError(\n      response,\n      `Exceeded maximum tool call iterations (${maxIterations})`,\n      \"ABORTED\",\n      { request }\n    );\n  }\n  const { revisedModelMessage, toolMessage, transferPreamble } = await (0, import_resolve_tool_requests.resolveToolRequests)(registry, rawRequest, generatedMessage);\n  if (revisedModelMessage) {\n    return {\n      ...response.toJSON(),\n      finishReason: \"interrupted\",\n      finishMessage: \"One or more tool calls resulted in interrupts.\",\n      message: revisedModelMessage\n    };\n  }\n  streamingCallback?.(\n    makeChunk(\"tool\", {\n      content: toolMessage.content\n    })\n  );\n  let nextRequest = {\n    ...rawRequest,\n    messages: [...rawRequest.messages, generatedMessage.toJSON(), toolMessage]\n  };\n  nextRequest = applyTransferPreamble(nextRequest, transferPreamble);\n  return await generateHelper(registry, {\n    rawRequest: nextRequest,\n    middleware,\n    currentTurn: currentTurn + 1,\n    messageIndex: messageIndex + 1\n  });\n}\nasync function actionToGenerateRequest(options, resolvedTools, resolvedFormat, model) {\n  const modelInfo = model.__action.metadata?.model;\n  if ((options.tools?.length ?? 0) > 0 && modelInfo?.supports && !modelInfo?.supports?.tools) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support tools (you set: ${options.tools?.length} tools). The model may not behave the way you expect.`\n    );\n  }\n  if (options.toolChoice && modelInfo?.supports && !modelInfo?.supports?.toolChoice) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support the 'toolChoice' option (you set: ${options.toolChoice}). The model may not behave the way you expect.`\n    );\n  }\n  const out = {\n    messages: options.messages,\n    config: options.config,\n    docs: options.docs,\n    tools: resolvedTools?.map(import_tool.toToolDefinition) || [],\n    output: (0, import_core.stripUndefinedProps)({\n      constrained: options.output?.constrained,\n      contentType: options.output?.contentType,\n      format: options.output?.format,\n      schema: options.output?.jsonSchema\n    })\n  };\n  if (options.toolChoice) {\n    out.toolChoice = options.toolChoice;\n  }\n  if (out.output && !out.output.schema) delete out.output.schema;\n  return out;\n}\nfunction inferRoleFromParts(parts) {\n  const uniqueRoles = /* @__PURE__ */ new Set();\n  for (const part of parts) {\n    const role = getRoleFromPart(part);\n    uniqueRoles.add(role);\n    if (uniqueRoles.size > 1) {\n      throw new Error(\"Contents contain mixed roles\");\n    }\n  }\n  return Array.from(uniqueRoles)[0];\n}\nfunction getRoleFromPart(part) {\n  if (part.toolRequest !== void 0) return \"model\";\n  if (part.toolResponse !== void 0) return \"tool\";\n  if (part.text !== void 0) return \"user\";\n  if (part.media !== void 0) return \"user\";\n  if (part.data !== void 0) return \"user\";\n  throw new Error(\"No recognized fields in content\");\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/chunk.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chunk_exports = {};\n__export(chunk_exports, {\n  GenerateResponseChunk: () => GenerateResponseChunk\n});\nmodule.exports = __toCommonJS(chunk_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass GenerateResponseChunk {\n  /** The index of the message this chunk corresponds to, starting with `0` for the first model response of the generation. */\n  index;\n  /** The role of the message this chunk corresponds to. Will always be `model` or `tool`. */\n  role;\n  /** The content generated in this chunk. */\n  content;\n  /** Custom model-specific data for this chunk. */\n  custom;\n  /** Accumulated chunks for partial output extraction. */\n  previousChunks;\n  /** The parser to be used to parse `output` from this chunk. */\n  parser;\n  constructor(data, options) {\n    this.content = data.content || [];\n    this.custom = data.custom;\n    this.previousChunks = options.previousChunks ? [...options.previousChunks] : void 0;\n    this.index = options.index;\n    this.role = options.role;\n    this.parser = options.parser;\n  }\n  /**\n   * Concatenates all `text` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `text` parts of all chunks from the response thus far.\n   * @returns A string of all concatenated chunk text content.\n   */\n  get accumulatedText() {\n    return this.previousText + this.text;\n  }\n  /**\n   * Concatenates all `text` parts of all preceding chunks.\n   */\n  get previousText() {\n    if (!this.previousChunks)\n      throw new import_core.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Cannot compose accumulated text without previous chunks.\"\n      });\n    return this.previousChunks?.map((c) => c.content.map((p) => p.text || \"\").join(\"\")).join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the chunk. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the chunk.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a chunk.\n   * @returns The first `data` part detected in the chunk (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this chunk.\n   * @returns Array of all tool request found in this chunk.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Parses the chunk into the desired output format using the parser associated\n   * with the generate request, or falls back to naive JSON parsing otherwise.\n   */\n  get output() {\n    if (this.parser) return this.parser(this);\n    return this.data || (0, import_extract.extractJson)(this.accumulatedText);\n  }\n  toJSON() {\n    const data = {\n      role: this.role,\n      index: this.index,\n      content: this.content\n    };\n    if (this.custom) {\n      data.custom = this.custom;\n    }\n    return data;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chunk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9jaHVuay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQyxxQkFBcUIsbUJBQU8sQ0FBQyxtRkFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2dlbmVyYXRlL2NodW5rLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBjaHVua19leHBvcnRzID0ge307XG5fX2V4cG9ydChjaHVua19leHBvcnRzLCB7XG4gIEdlbmVyYXRlUmVzcG9uc2VDaHVuazogKCkgPT4gR2VuZXJhdGVSZXNwb25zZUNodW5rXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNodW5rX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0LmpzXCIpO1xuY2xhc3MgR2VuZXJhdGVSZXNwb25zZUNodW5rIHtcbiAgLyoqIFRoZSBpbmRleCBvZiB0aGUgbWVzc2FnZSB0aGlzIGNodW5rIGNvcnJlc3BvbmRzIHRvLCBzdGFydGluZyB3aXRoIGAwYCBmb3IgdGhlIGZpcnN0IG1vZGVsIHJlc3BvbnNlIG9mIHRoZSBnZW5lcmF0aW9uLiAqL1xuICBpbmRleDtcbiAgLyoqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIHRoaXMgY2h1bmsgY29ycmVzcG9uZHMgdG8uIFdpbGwgYWx3YXlzIGJlIGBtb2RlbGAgb3IgYHRvb2xgLiAqL1xuICByb2xlO1xuICAvKiogVGhlIGNvbnRlbnQgZ2VuZXJhdGVkIGluIHRoaXMgY2h1bmsuICovXG4gIGNvbnRlbnQ7XG4gIC8qKiBDdXN0b20gbW9kZWwtc3BlY2lmaWMgZGF0YSBmb3IgdGhpcyBjaHVuay4gKi9cbiAgY3VzdG9tO1xuICAvKiogQWNjdW11bGF0ZWQgY2h1bmtzIGZvciBwYXJ0aWFsIG91dHB1dCBleHRyYWN0aW9uLiAqL1xuICBwcmV2aW91c0NodW5rcztcbiAgLyoqIFRoZSBwYXJzZXIgdG8gYmUgdXNlZCB0byBwYXJzZSBgb3V0cHV0YCBmcm9tIHRoaXMgY2h1bmsuICovXG4gIHBhcnNlcjtcbiAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMuY29udGVudCA9IGRhdGEuY29udGVudCB8fCBbXTtcbiAgICB0aGlzLmN1c3RvbSA9IGRhdGEuY3VzdG9tO1xuICAgIHRoaXMucHJldmlvdXNDaHVua3MgPSBvcHRpb25zLnByZXZpb3VzQ2h1bmtzID8gWy4uLm9wdGlvbnMucHJldmlvdXNDaHVua3NdIDogdm9pZCAwO1xuICAgIHRoaXMuaW5kZXggPSBvcHRpb25zLmluZGV4O1xuICAgIHRoaXMucm9sZSA9IG9wdGlvbnMucm9sZTtcbiAgICB0aGlzLnBhcnNlciA9IG9wdGlvbnMucGFyc2VyO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBwcmVzZW50IGluIHRoZSBjaHVuayB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBvZiBhbGwgY2h1bmtzIGZyb20gdGhlIHJlc3BvbnNlIHRodXMgZmFyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIGNodW5rIHRleHQgY29udGVudC5cbiAgICovXG4gIGdldCBhY2N1bXVsYXRlZFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJldmlvdXNUZXh0ICsgdGhpcy50ZXh0O1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBvZiBhbGwgcHJlY2VkaW5nIGNodW5rcy5cbiAgICovXG4gIGdldCBwcmV2aW91c1RleHQoKSB7XG4gICAgaWYgKCF0aGlzLnByZXZpb3VzQ2h1bmtzKVxuICAgICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgICAgc3RhdHVzOiBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgICAgICAgbWVzc2FnZTogXCJDYW5ub3QgY29tcG9zZSBhY2N1bXVsYXRlZCB0ZXh0IHdpdGhvdXQgcHJldmlvdXMgY2h1bmtzLlwiXG4gICAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wcmV2aW91c0NodW5rcz8ubWFwKChjKSA9PiBjLmNvbnRlbnQubWFwKChwKSA9PiBwLnRleHQgfHwgXCJcIikuam9pbihcIlwiKSkuam9pbihcIlwiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgbWVkaWEgcGFydCBkZXRlY3RlZCBpbiB0aGUgY2h1bmsuIFVzZWZ1bCBmb3IgZXh0cmFjdGluZ1xuICAgKiAoZm9yIGV4YW1wbGUpIGFuIGltYWdlIGZyb20gYSBnZW5lcmF0aW9uIGV4cGVjdGVkIHRvIGNyZWF0ZSBvbmUuXG4gICAqIEByZXR1cm5zIFRoZSBmaXJzdCBkZXRlY3RlZCBgbWVkaWFgIHBhcnQgaW4gdGhlIGNodW5rLlxuICAgKi9cbiAgZ2V0IG1lZGlhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmluZCgocGFydCkgPT4gcGFydC5tZWRpYSk/Lm1lZGlhIHx8IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGRldGVjdGVkIGBkYXRhYCBwYXJ0IG9mIGEgY2h1bmsuXG4gICAqIEByZXR1cm5zIFRoZSBmaXJzdCBgZGF0YWAgcGFydCBkZXRlY3RlZCBpbiB0aGUgY2h1bmsgKGlmIGFueSkuXG4gICAqL1xuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50LmZpbmQoKHBhcnQpID0+IHBhcnQuZGF0YSk/LmRhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRvb2wgcmVxdWVzdCBmb3VuZCBpbiB0aGlzIGNodW5rLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoaXMgY2h1bmsuXG4gICAqL1xuICBnZXQgdG9vbFJlcXVlc3RzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmlsdGVyKFxuICAgICAgKHBhcnQpID0+ICEhcGFydC50b29sUmVxdWVzdFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgY2h1bmsgaW50byB0aGUgZGVzaXJlZCBvdXRwdXQgZm9ybWF0IHVzaW5nIHRoZSBwYXJzZXIgYXNzb2NpYXRlZFxuICAgKiB3aXRoIHRoZSBnZW5lcmF0ZSByZXF1ZXN0LCBvciBmYWxscyBiYWNrIHRvIG5haXZlIEpTT04gcGFyc2luZyBvdGhlcndpc2UuXG4gICAqL1xuICBnZXQgb3V0cHV0KCkge1xuICAgIGlmICh0aGlzLnBhcnNlcikgcmV0dXJuIHRoaXMucGFyc2VyKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLmRhdGEgfHwgKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RKc29uKSh0aGlzLmFjY3VtdWxhdGVkVGV4dCk7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgIGNvbnRlbnQ6IHRoaXMuY29udGVudFxuICAgIH07XG4gICAgaWYgKHRoaXMuY3VzdG9tKSB7XG4gICAgICBkYXRhLmN1c3RvbSA9IHRoaXMuY3VzdG9tO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdlbmVyYXRlUmVzcG9uc2VDaHVua1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar resolve_tool_requests_exports = {};\n__export(resolve_tool_requests_exports, {\n  assertValidToolNames: () => assertValidToolNames,\n  resolveRestartedTools: () => resolveRestartedTools,\n  resolveResumeOption: () => resolveResumeOption,\n  resolveToolRequest: () => resolveToolRequest,\n  resolveToolRequests: () => resolveToolRequests,\n  toPendingOutput: () => toPendingOutput,\n  toToolMap: () => toToolMap\n});\nmodule.exports = __toCommonJS(resolve_tool_requests_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_prompt = __webpack_require__(/*! ../prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nfunction toToolMap(tools) {\n  assertValidToolNames(tools);\n  const out = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    out[shortName] = tool;\n  }\n  return out;\n}\nfunction assertValidToolNames(tools) {\n  const nameMap = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    if (nameMap[shortName]) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Cannot provide two tools with the same name: '${name}' and '${nameMap[shortName]}'`\n      });\n    }\n    nameMap[shortName] = name;\n  }\n}\nfunction toRunOptions(part) {\n  const out = { metadata: part.metadata };\n  if (part.metadata?.resumed) out.resumed = part.metadata.resumed;\n  return out;\n}\nfunction toPendingOutput(part, response) {\n  return {\n    ...part,\n    metadata: {\n      ...part.metadata,\n      pendingOutput: response.toolResponse.output\n    }\n  };\n}\nasync function resolveToolRequest(rawRequest, part, toolMap, runOptions) {\n  const tool = toolMap[part.toolRequest.name];\n  if (!tool) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Tool ${part.toolRequest.name} not found`,\n      detail: { request: rawRequest }\n    });\n  }\n  if ((0, import_prompt.isPromptAction)(tool)) {\n    const preamble = await tool(part.toolRequest.input);\n    const response = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: `transferred to ${part.toolRequest.name}`\n      }\n    };\n    return { preamble, response };\n  }\n  try {\n    const output = await tool(part.toolRequest.input, toRunOptions(part));\n    const response = (0, import_core.stripUndefinedProps)({\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output\n      }\n    });\n    return { response };\n  } catch (e) {\n    if (e instanceof import_tool.ToolInterruptError || // There's an inexplicable case when the above type check fails, only in tests.\n    e.name === \"ToolInterruptError\") {\n      const ie = e;\n      import_logging.logger.debug(\n        `tool '${toolMap[part.toolRequest?.name].__action.name}' triggered an interrupt${ie.metadata ? `: ${JSON.stringify(ie.metadata)}` : \"\"}`\n      );\n      const interrupt = {\n        toolRequest: part.toolRequest,\n        metadata: { ...part.metadata, interrupt: ie.metadata || true }\n      };\n      return { interrupt };\n    }\n    throw e;\n  }\n}\nasync function resolveToolRequests(registry, rawRequest, generatedMessage) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const responseParts = [];\n  let hasInterrupts = false;\n  let transferPreamble;\n  const revisedModelMessage = {\n    ...generatedMessage,\n    content: [...generatedMessage.content]\n  };\n  await Promise.all(\n    revisedModelMessage.content.map(async (part, i) => {\n      if (!part.toolRequest) return;\n      const { preamble, response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (preamble) {\n        if (transferPreamble) {\n          throw new import_core.GenkitError({\n            status: \"INVALID_ARGUMENT\",\n            message: `Model attempted to transfer to multiple prompt tools.`\n          });\n        }\n        transferPreamble = preamble;\n      }\n      if (response) {\n        responseParts.push(response);\n        revisedModelMessage.content.splice(\n          i,\n          1,\n          toPendingOutput(part, response)\n        );\n      }\n      if (interrupt) {\n        revisedModelMessage.content.splice(i, 1, interrupt);\n        hasInterrupts = true;\n      }\n    })\n  );\n  if (hasInterrupts) {\n    return { revisedModelMessage };\n  }\n  return {\n    toolMessage: { role: \"tool\", content: responseParts },\n    transferPreamble\n  };\n}\nfunction findCorrespondingToolRequest(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolRequest?.name === name && p.toolRequest?.ref === ref\n  );\n}\nfunction findCorrespondingToolResponse(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolResponse?.name === name && p.toolResponse?.ref === ref\n  );\n}\nasync function resolveResumedToolRequest(rawRequest, part, toolMap) {\n  if (part.metadata?.pendingOutput) {\n    const { pendingOutput, ...metadata } = part.metadata;\n    const toolResponse = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: pendingOutput\n      },\n      metadata: { ...metadata, source: \"pending\" }\n    };\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: { ...part, metadata }\n    });\n  }\n  const providedResponse = findCorrespondingToolResponse(\n    rawRequest.resume?.respond || [],\n    part\n  );\n  if (providedResponse) {\n    const toolResponse = providedResponse;\n    const { interrupt, ...metadata } = part.metadata || {};\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: {\n        ...part,\n        metadata: { ...metadata, resolvedInterrupt: interrupt }\n      }\n    });\n  }\n  const restartRequest = findCorrespondingToolRequest(\n    rawRequest.resume?.restart || [],\n    part\n  );\n  if (restartRequest) {\n    const { response, interrupt, preamble } = await resolveToolRequest(\n      rawRequest,\n      restartRequest,\n      toolMap\n    );\n    if (preamble) {\n      throw new import_core.GenkitError({\n        status: \"INTERNAL\",\n        message: `Prompt tool '${restartRequest.toolRequest.name}' executed inside 'restart' resolution. This should never happen.`\n      });\n    }\n    if (interrupt) return { interrupt };\n    if (response) {\n      const toolResponse = response;\n      const { interrupt: interrupt2, ...metadata } = part.metadata || {};\n      return (0, import_core.stripUndefinedProps)({\n        toolResponse,\n        toolRequest: {\n          ...part,\n          metadata: { ...metadata, resolvedInterrupt: interrupt2 }\n        }\n      });\n    }\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unresolved tool request '${part.toolRequest.name}${part.toolRequest.ref ? `#${part.toolRequest.ref}` : \"\"}' was not handled by the 'resume' argument. You must supply replies or restarts for all interrupted tool requests.'`\n  });\n}\nasync function resolveResumeOption(registry, rawRequest) {\n  if (!rawRequest.resume) return { revisedRequest: rawRequest };\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const messages = rawRequest.messages;\n  const lastMessage = messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\" || !lastMessage.content.find((p) => p.toolRequest)) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Cannot 'resume' generation unless the previous message is a model message with at least one tool request.`\n    });\n  }\n  const toolResponses = [];\n  let interrupted = false;\n  lastMessage.content = await Promise.all(\n    lastMessage.content.map(async (part) => {\n      if (!(0, import_tool.isToolRequest)(part)) return part;\n      const resolved = await resolveResumedToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (resolved.interrupt) {\n        interrupted = true;\n        return resolved.interrupt;\n      }\n      toolResponses.push(resolved.toolResponse);\n      return resolved.toolRequest;\n    })\n  );\n  if (interrupted) {\n    return {\n      interruptedResponse: {\n        finishReason: \"interrupted\",\n        finishMessage: \"One or more tools triggered interrupts while resuming generation. The model was not called.\",\n        message: lastMessage\n      }\n    };\n  }\n  const numToolRequests = lastMessage.content.filter(\n    (p) => !!p.toolRequest\n  ).length;\n  if (toolResponses.length !== numToolRequests) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Expected ${numToolRequests} tool responses but resolved to ${toolResponses.length}.`,\n      detail: { toolResponses, message: lastMessage }\n    });\n  }\n  const toolMessage = {\n    role: \"tool\",\n    content: toolResponses,\n    metadata: {\n      resumed: rawRequest.resume.metadata || true\n    }\n  };\n  return (0, import_core.stripUndefinedProps)({\n    revisedRequest: {\n      ...rawRequest,\n      resume: void 0,\n      messages: [...messages, toolMessage]\n    },\n    toolMessage\n  });\n}\nasync function resolveRestartedTools(registry, rawRequest) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const lastMessage = rawRequest.messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\") return [];\n  const restarts = lastMessage.content.filter(\n    (p) => p.toolRequest && p.metadata?.resumed\n  );\n  return await Promise.all(\n    restarts.map(async (p) => {\n      const { response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        p,\n        toolMap\n      );\n      if (interrupt) return interrupt;\n      return toPendingOutput(p, response);\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=resolve-tool-requests.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/response.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar response_exports = {};\n__export(response_exports, {\n  GenerateResponse: () => GenerateResponse\n});\nmodule.exports = __toCommonJS(response_exports);\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ../message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nclass GenerateResponse {\n  /** The generated message. */\n  message;\n  /** The reason generation stopped for this request. */\n  finishReason;\n  /** Additional information about why the model stopped generating, if any. */\n  finishMessage;\n  /** Usage information. */\n  usage;\n  /** Provider-specific response data. */\n  custom;\n  /** The request that generated this response. */\n  request;\n  /** The parser for output parsing of this response. */\n  parser;\n  constructor(response, options) {\n    const generatedMessage = response.message || response.candidates?.[0]?.message;\n    if (generatedMessage) {\n      this.message = new import_message.Message(generatedMessage, {\n        parser: options?.parser\n      });\n    }\n    this.finishReason = response.finishReason || response.candidates?.[0]?.finishReason;\n    this.finishMessage = response.finishMessage || response.candidates?.[0]?.finishMessage;\n    this.usage = response.usage || {};\n    this.custom = response.custom || {};\n    this.request = options?.request;\n  }\n  /**\n   * Throws an error if the response does not contain valid output.\n   */\n  assertValid() {\n    if (this.finishReason === \"blocked\") {\n      throw new import_generate.GenerationBlockedError(\n        this,\n        `Generation blocked${this.finishMessage ? `: ${this.finishMessage}` : \".\"}`\n      );\n    }\n    if (!this.message) {\n      throw new import_generate.GenerationResponseError(\n        this,\n        `Model did not generate a message. Finish reason: '${this.finishReason}': ${this.finishMessage}`\n      );\n    }\n  }\n  /**\n   * Throws an error if the response does not conform to expected schema.\n   */\n  assertValidSchema(request) {\n    if (request?.output?.schema || this.request?.output?.schema) {\n      const o = this.output;\n      (0, import_schema.parseSchema)(o, {\n        jsonSchema: request?.output?.schema || this.request?.output?.schema\n      });\n    }\n  }\n  isValid(request) {\n    try {\n      this.assertValid();\n      this.assertValidSchema(request);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * If the generated message contains a `data` part, it is returned. Otherwise,\n   * the `output()` method extracts the first valid JSON object or array from the text\n   * contained in the selected candidate's message and returns it.\n   *\n   * @returns The structured output contained in the selected candidate.\n   */\n  get output() {\n    return this.message?.output || null;\n  }\n  /**\n   * Concatenates all `text` parts present in the generated message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.message?.text || \"\";\n  }\n  /**\n   * Returns the first detected media part in the generated message. Useful for\n   * extracting (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the candidate.\n   */\n  get media() {\n    return this.message?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of the generated message.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  get data() {\n    return this.message?.data || null;\n  }\n  /**\n   * Returns all tool request found in the generated message.\n   * @returns Array of all tool request found in the candidate.\n   */\n  get toolRequests() {\n    return this.message?.toolRequests || [];\n  }\n  /**\n   * Returns all tool requests annotated as interrupts found in the generated message.\n   * @returns A list of ToolRequestParts.\n   */\n  get interrupts() {\n    return this.message?.interrupts || [];\n  }\n  /**\n   * Returns the message history for the request by concatenating the model\n   * response to the list of messages from the request. The result of this\n   * method can be safely serialized to JSON for persistence in a database.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  get messages() {\n    if (!this.request)\n      throw new Error(\n        \"Can't construct history for response without request reference.\"\n      );\n    if (!this.message)\n      throw new Error(\n        \"Can't construct history for response without generated message.\"\n      );\n    return [...this.request?.messages, this.message.toJSON()];\n  }\n  get raw() {\n    return this.raw ?? this.custom;\n  }\n  toJSON() {\n    const out = {\n      message: this.message?.toJSON(),\n      finishReason: this.finishReason,\n      finishMessage: this.finishMessage,\n      usage: this.usage,\n      custom: this.custom.toJSON?.() || this.custom,\n      request: this.request\n    };\n    if (!out.finishMessage) delete out.finishMessage;\n    if (!out.request) delete out.request;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRCxzQkFBc0IsbUJBQU8sQ0FBQyxxRkFBZ0I7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsbUZBQWU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDBCQUEwQixtQkFBbUIsUUFBUTtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGtCQUFrQixLQUFLLG1CQUFtQjtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsUUFBUTtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZ2VuZXJhdGUvcmVzcG9uc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHJlc3BvbnNlX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHJlc3BvbnNlX2V4cG9ydHMsIHtcbiAgR2VuZXJhdGVSZXNwb25zZTogKCkgPT4gR2VuZXJhdGVSZXNwb25zZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhyZXNwb25zZV9leHBvcnRzKTtcbnZhciBpbXBvcnRfc2NoZW1hID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS9zY2hlbWFcIik7XG52YXIgaW1wb3J0X2dlbmVyYXRlID0gcmVxdWlyZShcIi4uL2dlbmVyYXRlLmpzXCIpO1xudmFyIGltcG9ydF9tZXNzYWdlID0gcmVxdWlyZShcIi4uL21lc3NhZ2UuanNcIik7XG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlIHtcbiAgLyoqIFRoZSBnZW5lcmF0ZWQgbWVzc2FnZS4gKi9cbiAgbWVzc2FnZTtcbiAgLyoqIFRoZSByZWFzb24gZ2VuZXJhdGlvbiBzdG9wcGVkIGZvciB0aGlzIHJlcXVlc3QuICovXG4gIGZpbmlzaFJlYXNvbjtcbiAgLyoqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgd2h5IHRoZSBtb2RlbCBzdG9wcGVkIGdlbmVyYXRpbmcsIGlmIGFueS4gKi9cbiAgZmluaXNoTWVzc2FnZTtcbiAgLyoqIFVzYWdlIGluZm9ybWF0aW9uLiAqL1xuICB1c2FnZTtcbiAgLyoqIFByb3ZpZGVyLXNwZWNpZmljIHJlc3BvbnNlIGRhdGEuICovXG4gIGN1c3RvbTtcbiAgLyoqIFRoZSByZXF1ZXN0IHRoYXQgZ2VuZXJhdGVkIHRoaXMgcmVzcG9uc2UuICovXG4gIHJlcXVlc3Q7XG4gIC8qKiBUaGUgcGFyc2VyIGZvciBvdXRwdXQgcGFyc2luZyBvZiB0aGlzIHJlc3BvbnNlLiAqL1xuICBwYXJzZXI7XG4gIGNvbnN0cnVjdG9yKHJlc3BvbnNlLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZ2VuZXJhdGVkTWVzc2FnZSA9IHJlc3BvbnNlLm1lc3NhZ2UgfHwgcmVzcG9uc2UuY2FuZGlkYXRlcz8uWzBdPy5tZXNzYWdlO1xuICAgIGlmIChnZW5lcmF0ZWRNZXNzYWdlKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBuZXcgaW1wb3J0X21lc3NhZ2UuTWVzc2FnZShnZW5lcmF0ZWRNZXNzYWdlLCB7XG4gICAgICAgIHBhcnNlcjogb3B0aW9ucz8ucGFyc2VyXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5maW5pc2hSZWFzb24gPSByZXNwb25zZS5maW5pc2hSZWFzb24gfHwgcmVzcG9uc2UuY2FuZGlkYXRlcz8uWzBdPy5maW5pc2hSZWFzb247XG4gICAgdGhpcy5maW5pc2hNZXNzYWdlID0gcmVzcG9uc2UuZmluaXNoTWVzc2FnZSB8fCByZXNwb25zZS5jYW5kaWRhdGVzPy5bMF0/LmZpbmlzaE1lc3NhZ2U7XG4gICAgdGhpcy51c2FnZSA9IHJlc3BvbnNlLnVzYWdlIHx8IHt9O1xuICAgIHRoaXMuY3VzdG9tID0gcmVzcG9uc2UuY3VzdG9tIHx8IHt9O1xuICAgIHRoaXMucmVxdWVzdCA9IG9wdGlvbnM/LnJlcXVlc3Q7XG4gIH1cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcmVzcG9uc2UgZG9lcyBub3QgY29udGFpbiB2YWxpZCBvdXRwdXQuXG4gICAqL1xuICBhc3NlcnRWYWxpZCgpIHtcbiAgICBpZiAodGhpcy5maW5pc2hSZWFzb24gPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2dlbmVyYXRlLkdlbmVyYXRpb25CbG9ja2VkRXJyb3IoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGBHZW5lcmF0aW9uIGJsb2NrZWQke3RoaXMuZmluaXNoTWVzc2FnZSA/IGA6ICR7dGhpcy5maW5pc2hNZXNzYWdlfWAgOiBcIi5cIn1gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMubWVzc2FnZSkge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9nZW5lcmF0ZS5HZW5lcmF0aW9uUmVzcG9uc2VFcnJvcihcbiAgICAgICAgdGhpcyxcbiAgICAgICAgYE1vZGVsIGRpZCBub3QgZ2VuZXJhdGUgYSBtZXNzYWdlLiBGaW5pc2ggcmVhc29uOiAnJHt0aGlzLmZpbmlzaFJlYXNvbn0nOiAke3RoaXMuZmluaXNoTWVzc2FnZX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSByZXNwb25zZSBkb2VzIG5vdCBjb25mb3JtIHRvIGV4cGVjdGVkIHNjaGVtYS5cbiAgICovXG4gIGFzc2VydFZhbGlkU2NoZW1hKHJlcXVlc3QpIHtcbiAgICBpZiAocmVxdWVzdD8ub3V0cHV0Py5zY2hlbWEgfHwgdGhpcy5yZXF1ZXN0Py5vdXRwdXQ/LnNjaGVtYSkge1xuICAgICAgY29uc3QgbyA9IHRoaXMub3V0cHV0O1xuICAgICAgKDAsIGltcG9ydF9zY2hlbWEucGFyc2VTY2hlbWEpKG8sIHtcbiAgICAgICAganNvblNjaGVtYTogcmVxdWVzdD8ub3V0cHV0Py5zY2hlbWEgfHwgdGhpcy5yZXF1ZXN0Py5vdXRwdXQ/LnNjaGVtYVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlzVmFsaWQocmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmFzc2VydFZhbGlkKCk7XG4gICAgICB0aGlzLmFzc2VydFZhbGlkU2NoZW1hKHJlcXVlc3QpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSWYgdGhlIGdlbmVyYXRlZCBtZXNzYWdlIGNvbnRhaW5zIGEgYGRhdGFgIHBhcnQsIGl0IGlzIHJldHVybmVkLiBPdGhlcndpc2UsXG4gICAqIHRoZSBgb3V0cHV0KClgIG1ldGhvZCBleHRyYWN0cyB0aGUgZmlyc3QgdmFsaWQgSlNPTiBvYmplY3Qgb3IgYXJyYXkgZnJvbSB0aGUgdGV4dFxuICAgKiBjb250YWluZWQgaW4gdGhlIHNlbGVjdGVkIGNhbmRpZGF0ZSdzIG1lc3NhZ2UgYW5kIHJldHVybnMgaXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzdHJ1Y3R1cmVkIG91dHB1dCBjb250YWluZWQgaW4gdGhlIHNlbGVjdGVkIGNhbmRpZGF0ZS5cbiAgICovXG4gIGdldCBvdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZT8ub3V0cHV0IHx8IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHRleHRgIHBhcnRzIHByZXNlbnQgaW4gdGhlIGdlbmVyYXRlZCBtZXNzYWdlIHdpdGggbm8gZGVsaW1pdGVyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIHRleHQgcGFydHMuXG4gICAqL1xuICBnZXQgdGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlPy50ZXh0IHx8IFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGRldGVjdGVkIG1lZGlhIHBhcnQgaW4gdGhlIGdlbmVyYXRlZCBtZXNzYWdlLiBVc2VmdWwgZm9yXG4gICAqIGV4dHJhY3RpbmcgKGZvciBleGFtcGxlKSBhbiBpbWFnZSBmcm9tIGEgZ2VuZXJhdGlvbiBleHBlY3RlZCB0byBjcmVhdGUgb25lLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgZGV0ZWN0ZWQgYG1lZGlhYCBwYXJ0IGluIHRoZSBjYW5kaWRhdGUuXG4gICAqL1xuICBnZXQgbWVkaWEoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZT8ubWVkaWEgfHwgbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgZGV0ZWN0ZWQgYGRhdGFgIHBhcnQgb2YgdGhlIGdlbmVyYXRlZCBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgYGRhdGFgIHBhcnQgZGV0ZWN0ZWQgaW4gdGhlIGNhbmRpZGF0ZSAoaWYgYW55KS5cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U/LmRhdGEgfHwgbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoZSBnZW5lcmF0ZWQgbWVzc2FnZS5cbiAgICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHRvb2wgcmVxdWVzdCBmb3VuZCBpbiB0aGUgY2FuZGlkYXRlLlxuICAgKi9cbiAgZ2V0IHRvb2xSZXF1ZXN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlPy50b29sUmVxdWVzdHMgfHwgW107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRvb2wgcmVxdWVzdHMgYW5ub3RhdGVkIGFzIGludGVycnVwdHMgZm91bmQgaW4gdGhlIGdlbmVyYXRlZCBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyBBIGxpc3Qgb2YgVG9vbFJlcXVlc3RQYXJ0cy5cbiAgICovXG4gIGdldCBpbnRlcnJ1cHRzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U/LmludGVycnVwdHMgfHwgW107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG1lc3NhZ2UgaGlzdG9yeSBmb3IgdGhlIHJlcXVlc3QgYnkgY29uY2F0ZW5hdGluZyB0aGUgbW9kZWxcbiAgICogcmVzcG9uc2UgdG8gdGhlIGxpc3Qgb2YgbWVzc2FnZXMgZnJvbSB0aGUgcmVxdWVzdC4gVGhlIHJlc3VsdCBvZiB0aGlzXG4gICAqIG1ldGhvZCBjYW4gYmUgc2FmZWx5IHNlcmlhbGl6ZWQgdG8gSlNPTiBmb3IgcGVyc2lzdGVuY2UgaW4gYSBkYXRhYmFzZS5cbiAgICogQHJldHVybnMgQSBzZXJpYWxpemFibGUgbGlzdCBvZiBtZXNzYWdlcyBjb21wYXRpYmxlIHdpdGggYGdlbmVyYXRlKHtoaXN0b3J5fSlgLlxuICAgKi9cbiAgZ2V0IG1lc3NhZ2VzKCkge1xuICAgIGlmICghdGhpcy5yZXF1ZXN0KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkNhbid0IGNvbnN0cnVjdCBoaXN0b3J5IGZvciByZXNwb25zZSB3aXRob3V0IHJlcXVlc3QgcmVmZXJlbmNlLlwiXG4gICAgICApO1xuICAgIGlmICghdGhpcy5tZXNzYWdlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkNhbid0IGNvbnN0cnVjdCBoaXN0b3J5IGZvciByZXNwb25zZSB3aXRob3V0IGdlbmVyYXRlZCBtZXNzYWdlLlwiXG4gICAgICApO1xuICAgIHJldHVybiBbLi4udGhpcy5yZXF1ZXN0Py5tZXNzYWdlcywgdGhpcy5tZXNzYWdlLnRvSlNPTigpXTtcbiAgfVxuICBnZXQgcmF3KCkge1xuICAgIHJldHVybiB0aGlzLnJhdyA/PyB0aGlzLmN1c3RvbTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgY29uc3Qgb3V0ID0ge1xuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlPy50b0pTT04oKSxcbiAgICAgIGZpbmlzaFJlYXNvbjogdGhpcy5maW5pc2hSZWFzb24sXG4gICAgICBmaW5pc2hNZXNzYWdlOiB0aGlzLmZpbmlzaE1lc3NhZ2UsXG4gICAgICB1c2FnZTogdGhpcy51c2FnZSxcbiAgICAgIGN1c3RvbTogdGhpcy5jdXN0b20udG9KU09OPy4oKSB8fCB0aGlzLmN1c3RvbSxcbiAgICAgIHJlcXVlc3Q6IHRoaXMucmVxdWVzdFxuICAgIH07XG4gICAgaWYgKCFvdXQuZmluaXNoTWVzc2FnZSkgZGVsZXRlIG91dC5maW5pc2hNZXNzYWdlO1xuICAgIGlmICghb3V0LnJlcXVlc3QpIGRlbGV0ZSBvdXQucmVxdWVzdDtcbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgR2VuZXJhdGVSZXNwb25zZVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar src_exports = {};\n__export(src_exports, {\n  BaseDataPointSchema: () => import_evaluator.BaseDataPointSchema,\n  Document: () => import_document.Document,\n  DocumentDataSchema: () => import_document.DocumentDataSchema,\n  EvalStatusEnum: () => import_evaluator.EvalStatusEnum,\n  GenerateResponse: () => import_generate.GenerateResponse,\n  GenerateResponseChunk: () => import_generate.GenerateResponseChunk,\n  GenerateResponseChunkSchema: () => import_model.GenerateResponseChunkSchema,\n  GenerationBlockedError: () => import_generate.GenerationBlockedError,\n  GenerationCommonConfigSchema: () => import_model.GenerationCommonConfigSchema,\n  GenerationResponseError: () => import_generate.GenerationResponseError,\n  Message: () => import_message.Message,\n  MessageSchema: () => import_model.MessageSchema,\n  ModelRequestSchema: () => import_model.ModelRequestSchema,\n  ModelResponseSchema: () => import_model.ModelResponseSchema,\n  PartSchema: () => import_model.PartSchema,\n  RoleSchema: () => import_model.RoleSchema,\n  ToolInterruptError: () => import_tool.ToolInterruptError,\n  asTool: () => import_tool.asTool,\n  defineHelper: () => import_prompt.defineHelper,\n  defineInterrupt: () => import_tool.defineInterrupt,\n  definePartial: () => import_prompt.definePartial,\n  definePrompt: () => import_prompt.definePrompt,\n  defineTool: () => import_tool.defineTool,\n  embed: () => import_embedder.embed,\n  embedderActionMetadata: () => import_embedder.embedderActionMetadata,\n  embedderRef: () => import_embedder.embedderRef,\n  evaluate: () => import_evaluator.evaluate,\n  evaluatorRef: () => import_evaluator.evaluatorRef,\n  generate: () => import_generate.generate,\n  generateStream: () => import_generate.generateStream,\n  index: () => import_retriever.index,\n  indexerRef: () => import_retriever.indexerRef,\n  isExecutablePrompt: () => import_prompt.isExecutablePrompt,\n  loadPromptFolder: () => import_prompt.loadPromptFolder,\n  modelActionMetadata: () => import_model.modelActionMetadata,\n  modelRef: () => import_model.modelRef,\n  prompt: () => import_prompt.prompt,\n  rerank: () => import_reranker.rerank,\n  rerankerRef: () => import_reranker.rerankerRef,\n  retrieve: () => import_retriever.retrieve,\n  retrieverRef: () => import_retriever.retrieverRef,\n  tagAsPreamble: () => import_generate.tagAsPreamble,\n  toGenerateRequest: () => import_generate.toGenerateRequest\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_embedder = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\");\nvar import_evaluator = __webpack_require__(/*! ./evaluator.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_reranker = __webpack_require__(/*! ./reranker.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\n__reExport(src_exports, __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsb0ZBQWU7QUFDN0Msc0JBQXNCLG1CQUFPLENBQUMsb0ZBQWU7QUFDN0MsdUJBQXVCLG1CQUFPLENBQUMsc0ZBQWdCO0FBQy9DLHNCQUFzQixtQkFBTyxDQUFDLG9GQUFlO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLGtGQUFjO0FBQzNDLG1CQUFtQixtQkFBTyxDQUFDLDhFQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLGdGQUFhO0FBQ3pDLHNCQUFzQixtQkFBTyxDQUFDLG9GQUFlO0FBQzdDLHVCQUF1QixtQkFBTyxDQUFDLHNGQUFnQjtBQUMvQyxrQkFBa0IsbUJBQU8sQ0FBQyw0RUFBVztBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyw4RUFBWTtBQUM1QztBQUNBLE1BQU0sQ0E2Q0w7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3JlRXhwb3J0ID0gKHRhcmdldCwgbW9kLCBzZWNvbmRUYXJnZXQpID0+IChfX2NvcHlQcm9wcyh0YXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpLCBzZWNvbmRUYXJnZXQgJiYgX19jb3B5UHJvcHMoc2Vjb25kVGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgQmFzZURhdGFQb2ludFNjaGVtYTogKCkgPT4gaW1wb3J0X2V2YWx1YXRvci5CYXNlRGF0YVBvaW50U2NoZW1hLFxuICBEb2N1bWVudDogKCkgPT4gaW1wb3J0X2RvY3VtZW50LkRvY3VtZW50LFxuICBEb2N1bWVudERhdGFTY2hlbWE6ICgpID0+IGltcG9ydF9kb2N1bWVudC5Eb2N1bWVudERhdGFTY2hlbWEsXG4gIEV2YWxTdGF0dXNFbnVtOiAoKSA9PiBpbXBvcnRfZXZhbHVhdG9yLkV2YWxTdGF0dXNFbnVtLFxuICBHZW5lcmF0ZVJlc3BvbnNlOiAoKSA9PiBpbXBvcnRfZ2VuZXJhdGUuR2VuZXJhdGVSZXNwb25zZSxcbiAgR2VuZXJhdGVSZXNwb25zZUNodW5rOiAoKSA9PiBpbXBvcnRfZ2VuZXJhdGUuR2VuZXJhdGVSZXNwb25zZUNodW5rLFxuICBHZW5lcmF0ZVJlc3BvbnNlQ2h1bmtTY2hlbWE6ICgpID0+IGltcG9ydF9tb2RlbC5HZW5lcmF0ZVJlc3BvbnNlQ2h1bmtTY2hlbWEsXG4gIEdlbmVyYXRpb25CbG9ja2VkRXJyb3I6ICgpID0+IGltcG9ydF9nZW5lcmF0ZS5HZW5lcmF0aW9uQmxvY2tlZEVycm9yLFxuICBHZW5lcmF0aW9uQ29tbW9uQ29uZmlnU2NoZW1hOiAoKSA9PiBpbXBvcnRfbW9kZWwuR2VuZXJhdGlvbkNvbW1vbkNvbmZpZ1NjaGVtYSxcbiAgR2VuZXJhdGlvblJlc3BvbnNlRXJyb3I6ICgpID0+IGltcG9ydF9nZW5lcmF0ZS5HZW5lcmF0aW9uUmVzcG9uc2VFcnJvcixcbiAgTWVzc2FnZTogKCkgPT4gaW1wb3J0X21lc3NhZ2UuTWVzc2FnZSxcbiAgTWVzc2FnZVNjaGVtYTogKCkgPT4gaW1wb3J0X21vZGVsLk1lc3NhZ2VTY2hlbWEsXG4gIE1vZGVsUmVxdWVzdFNjaGVtYTogKCkgPT4gaW1wb3J0X21vZGVsLk1vZGVsUmVxdWVzdFNjaGVtYSxcbiAgTW9kZWxSZXNwb25zZVNjaGVtYTogKCkgPT4gaW1wb3J0X21vZGVsLk1vZGVsUmVzcG9uc2VTY2hlbWEsXG4gIFBhcnRTY2hlbWE6ICgpID0+IGltcG9ydF9tb2RlbC5QYXJ0U2NoZW1hLFxuICBSb2xlU2NoZW1hOiAoKSA9PiBpbXBvcnRfbW9kZWwuUm9sZVNjaGVtYSxcbiAgVG9vbEludGVycnVwdEVycm9yOiAoKSA9PiBpbXBvcnRfdG9vbC5Ub29sSW50ZXJydXB0RXJyb3IsXG4gIGFzVG9vbDogKCkgPT4gaW1wb3J0X3Rvb2wuYXNUb29sLFxuICBkZWZpbmVIZWxwZXI6ICgpID0+IGltcG9ydF9wcm9tcHQuZGVmaW5lSGVscGVyLFxuICBkZWZpbmVJbnRlcnJ1cHQ6ICgpID0+IGltcG9ydF90b29sLmRlZmluZUludGVycnVwdCxcbiAgZGVmaW5lUGFydGlhbDogKCkgPT4gaW1wb3J0X3Byb21wdC5kZWZpbmVQYXJ0aWFsLFxuICBkZWZpbmVQcm9tcHQ6ICgpID0+IGltcG9ydF9wcm9tcHQuZGVmaW5lUHJvbXB0LFxuICBkZWZpbmVUb29sOiAoKSA9PiBpbXBvcnRfdG9vbC5kZWZpbmVUb29sLFxuICBlbWJlZDogKCkgPT4gaW1wb3J0X2VtYmVkZGVyLmVtYmVkLFxuICBlbWJlZGRlckFjdGlvbk1ldGFkYXRhOiAoKSA9PiBpbXBvcnRfZW1iZWRkZXIuZW1iZWRkZXJBY3Rpb25NZXRhZGF0YSxcbiAgZW1iZWRkZXJSZWY6ICgpID0+IGltcG9ydF9lbWJlZGRlci5lbWJlZGRlclJlZixcbiAgZXZhbHVhdGU6ICgpID0+IGltcG9ydF9ldmFsdWF0b3IuZXZhbHVhdGUsXG4gIGV2YWx1YXRvclJlZjogKCkgPT4gaW1wb3J0X2V2YWx1YXRvci5ldmFsdWF0b3JSZWYsXG4gIGdlbmVyYXRlOiAoKSA9PiBpbXBvcnRfZ2VuZXJhdGUuZ2VuZXJhdGUsXG4gIGdlbmVyYXRlU3RyZWFtOiAoKSA9PiBpbXBvcnRfZ2VuZXJhdGUuZ2VuZXJhdGVTdHJlYW0sXG4gIGluZGV4OiAoKSA9PiBpbXBvcnRfcmV0cmlldmVyLmluZGV4LFxuICBpbmRleGVyUmVmOiAoKSA9PiBpbXBvcnRfcmV0cmlldmVyLmluZGV4ZXJSZWYsXG4gIGlzRXhlY3V0YWJsZVByb21wdDogKCkgPT4gaW1wb3J0X3Byb21wdC5pc0V4ZWN1dGFibGVQcm9tcHQsXG4gIGxvYWRQcm9tcHRGb2xkZXI6ICgpID0+IGltcG9ydF9wcm9tcHQubG9hZFByb21wdEZvbGRlcixcbiAgbW9kZWxBY3Rpb25NZXRhZGF0YTogKCkgPT4gaW1wb3J0X21vZGVsLm1vZGVsQWN0aW9uTWV0YWRhdGEsXG4gIG1vZGVsUmVmOiAoKSA9PiBpbXBvcnRfbW9kZWwubW9kZWxSZWYsXG4gIHByb21wdDogKCkgPT4gaW1wb3J0X3Byb21wdC5wcm9tcHQsXG4gIHJlcmFuazogKCkgPT4gaW1wb3J0X3JlcmFua2VyLnJlcmFuayxcbiAgcmVyYW5rZXJSZWY6ICgpID0+IGltcG9ydF9yZXJhbmtlci5yZXJhbmtlclJlZixcbiAgcmV0cmlldmU6ICgpID0+IGltcG9ydF9yZXRyaWV2ZXIucmV0cmlldmUsXG4gIHJldHJpZXZlclJlZjogKCkgPT4gaW1wb3J0X3JldHJpZXZlci5yZXRyaWV2ZXJSZWYsXG4gIHRhZ0FzUHJlYW1ibGU6ICgpID0+IGltcG9ydF9nZW5lcmF0ZS50YWdBc1ByZWFtYmxlLFxuICB0b0dlbmVyYXRlUmVxdWVzdDogKCkgPT4gaW1wb3J0X2dlbmVyYXRlLnRvR2VuZXJhdGVSZXF1ZXN0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfZG9jdW1lbnQgPSByZXF1aXJlKFwiLi9kb2N1bWVudC5qc1wiKTtcbnZhciBpbXBvcnRfZW1iZWRkZXIgPSByZXF1aXJlKFwiLi9lbWJlZGRlci5qc1wiKTtcbnZhciBpbXBvcnRfZXZhbHVhdG9yID0gcmVxdWlyZShcIi4vZXZhbHVhdG9yLmpzXCIpO1xudmFyIGltcG9ydF9nZW5lcmF0ZSA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlLmpzXCIpO1xudmFyIGltcG9ydF9tZXNzYWdlID0gcmVxdWlyZShcIi4vbWVzc2FnZS5qc1wiKTtcbnZhciBpbXBvcnRfbW9kZWwgPSByZXF1aXJlKFwiLi9tb2RlbC5qc1wiKTtcbnZhciBpbXBvcnRfcHJvbXB0ID0gcmVxdWlyZShcIi4vcHJvbXB0LmpzXCIpO1xudmFyIGltcG9ydF9yZXJhbmtlciA9IHJlcXVpcmUoXCIuL3JlcmFua2VyLmpzXCIpO1xudmFyIGltcG9ydF9yZXRyaWV2ZXIgPSByZXF1aXJlKFwiLi9yZXRyaWV2ZXIuanNcIik7XG52YXIgaW1wb3J0X3Rvb2wgPSByZXF1aXJlKFwiLi90b29sLmpzXCIpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vdHlwZXMuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBCYXNlRGF0YVBvaW50U2NoZW1hLFxuICBEb2N1bWVudCxcbiAgRG9jdW1lbnREYXRhU2NoZW1hLFxuICBFdmFsU3RhdHVzRW51bSxcbiAgR2VuZXJhdGVSZXNwb25zZSxcbiAgR2VuZXJhdGVSZXNwb25zZUNodW5rLFxuICBHZW5lcmF0ZVJlc3BvbnNlQ2h1bmtTY2hlbWEsXG4gIEdlbmVyYXRpb25CbG9ja2VkRXJyb3IsXG4gIEdlbmVyYXRpb25Db21tb25Db25maWdTY2hlbWEsXG4gIEdlbmVyYXRpb25SZXNwb25zZUVycm9yLFxuICBNZXNzYWdlLFxuICBNZXNzYWdlU2NoZW1hLFxuICBNb2RlbFJlcXVlc3RTY2hlbWEsXG4gIE1vZGVsUmVzcG9uc2VTY2hlbWEsXG4gIFBhcnRTY2hlbWEsXG4gIFJvbGVTY2hlbWEsXG4gIFRvb2xJbnRlcnJ1cHRFcnJvcixcbiAgYXNUb29sLFxuICBkZWZpbmVIZWxwZXIsXG4gIGRlZmluZUludGVycnVwdCxcbiAgZGVmaW5lUGFydGlhbCxcbiAgZGVmaW5lUHJvbXB0LFxuICBkZWZpbmVUb29sLFxuICBlbWJlZCxcbiAgZW1iZWRkZXJBY3Rpb25NZXRhZGF0YSxcbiAgZW1iZWRkZXJSZWYsXG4gIGV2YWx1YXRlLFxuICBldmFsdWF0b3JSZWYsXG4gIGdlbmVyYXRlLFxuICBnZW5lcmF0ZVN0cmVhbSxcbiAgaW5kZXgsXG4gIGluZGV4ZXJSZWYsXG4gIGlzRXhlY3V0YWJsZVByb21wdCxcbiAgbG9hZFByb21wdEZvbGRlcixcbiAgbW9kZWxBY3Rpb25NZXRhZGF0YSxcbiAgbW9kZWxSZWYsXG4gIHByb21wdCxcbiAgcmVyYW5rLFxuICByZXJhbmtlclJlZixcbiAgcmV0cmlldmUsXG4gIHJldHJpZXZlclJlZixcbiAgdGFnQXNQcmVhbWJsZSxcbiAgdG9HZW5lcmF0ZVJlcXVlc3QsXG4gIC4uLnJlcXVpcmUoXCIuL3R5cGVzLmpzXCIpXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/message.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar message_exports = {};\n__export(message_exports, {\n  Message: () => Message\n});\nmodule.exports = __toCommonJS(message_exports);\nvar import_extract = __webpack_require__(/*! ./extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass Message {\n  role;\n  content;\n  metadata;\n  parser;\n  static parseData(lenientMessage, defaultRole = \"user\") {\n    if (typeof lenientMessage === \"string\") {\n      return { role: defaultRole, content: [{ text: lenientMessage }] };\n    }\n    return {\n      ...lenientMessage,\n      content: Message.parseContent(lenientMessage.content)\n    };\n  }\n  static parse(lenientMessage) {\n    return new Message(Message.parseData(lenientMessage));\n  }\n  static parseContent(lenientPart) {\n    if (typeof lenientPart === \"string\") {\n      return [{ text: lenientPart }];\n    } else if (Array.isArray(lenientPart)) {\n      return lenientPart.map((p) => typeof p === \"string\" ? { text: p } : p);\n    } else {\n      return [lenientPart];\n    }\n  }\n  constructor(message, options) {\n    this.role = message.role;\n    this.content = message.content;\n    this.metadata = message.metadata;\n    this.parser = options?.parser;\n  }\n  /**\n   * Attempts to parse the content of the message according to the supplied\n   * output parser. Without a parser, returns `data` contained in the message or\n   * tries to parse JSON from the text of the message.\n   *\n   * @returns The structured output contained in the message.\n   */\n  get output() {\n    return this.parser?.(this) || this.data || (0, import_extract.extractJson)(this.text);\n  }\n  toolResponseParts() {\n    const res = this.content.filter((part) => !!part.toolResponse);\n    return res;\n  }\n  /**\n   * Concatenates all `text` parts present in the message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the message. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the message.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a message.\n   * @returns The first `data` part detected in the message (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this message.\n   * @returns Array of all tool request found in this message.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Returns all tool requests annotated with interrupt metadata.\n   * @returns Array of all interrupt tool requests.\n   */\n  get interrupts() {\n    return this.toolRequests.filter((t) => !!t.metadata?.interrupt);\n  }\n  /**\n   * Converts the Message to a plain JS object.\n   * @returns Plain JS object representing the data contained in the message.\n   */\n  toJSON() {\n    let out = {\n      role: this.role,\n      content: [...this.content]\n    };\n    if (this.metadata) out.metadata = this.metadata;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=message.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9tZXNzYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsK0VBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtCQUErQixzQkFBc0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkMsTUFBTTtBQUNOLDhEQUE4RCxVQUFVO0FBQ3hFLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvbWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbWVzc2FnZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChtZXNzYWdlX2V4cG9ydHMsIHtcbiAgTWVzc2FnZTogKCkgPT4gTWVzc2FnZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhtZXNzYWdlX2V4cG9ydHMpO1xudmFyIGltcG9ydF9leHRyYWN0ID0gcmVxdWlyZShcIi4vZXh0cmFjdFwiKTtcbmNsYXNzIE1lc3NhZ2Uge1xuICByb2xlO1xuICBjb250ZW50O1xuICBtZXRhZGF0YTtcbiAgcGFyc2VyO1xuICBzdGF0aWMgcGFyc2VEYXRhKGxlbmllbnRNZXNzYWdlLCBkZWZhdWx0Um9sZSA9IFwidXNlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBsZW5pZW50TWVzc2FnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHsgcm9sZTogZGVmYXVsdFJvbGUsIGNvbnRlbnQ6IFt7IHRleHQ6IGxlbmllbnRNZXNzYWdlIH1dIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5sZW5pZW50TWVzc2FnZSxcbiAgICAgIGNvbnRlbnQ6IE1lc3NhZ2UucGFyc2VDb250ZW50KGxlbmllbnRNZXNzYWdlLmNvbnRlbnQpXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgcGFyc2UobGVuaWVudE1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2UoTWVzc2FnZS5wYXJzZURhdGEobGVuaWVudE1lc3NhZ2UpKTtcbiAgfVxuICBzdGF0aWMgcGFyc2VDb250ZW50KGxlbmllbnRQYXJ0KSB7XG4gICAgaWYgKHR5cGVvZiBsZW5pZW50UGFydCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIFt7IHRleHQ6IGxlbmllbnRQYXJ0IH1dO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShsZW5pZW50UGFydCkpIHtcbiAgICAgIHJldHVybiBsZW5pZW50UGFydC5tYXAoKHApID0+IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8geyB0ZXh0OiBwIH0gOiBwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtsZW5pZW50UGFydF07XG4gICAgfVxuICB9XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnJvbGUgPSBtZXNzYWdlLnJvbGU7XG4gICAgdGhpcy5jb250ZW50ID0gbWVzc2FnZS5jb250ZW50O1xuICAgIHRoaXMubWV0YWRhdGEgPSBtZXNzYWdlLm1ldGFkYXRhO1xuICAgIHRoaXMucGFyc2VyID0gb3B0aW9ucz8ucGFyc2VyO1xuICB9XG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBwYXJzZSB0aGUgY29udGVudCBvZiB0aGUgbWVzc2FnZSBhY2NvcmRpbmcgdG8gdGhlIHN1cHBsaWVkXG4gICAqIG91dHB1dCBwYXJzZXIuIFdpdGhvdXQgYSBwYXJzZXIsIHJldHVybnMgYGRhdGFgIGNvbnRhaW5lZCBpbiB0aGUgbWVzc2FnZSBvclxuICAgKiB0cmllcyB0byBwYXJzZSBKU09OIGZyb20gdGhlIHRleHQgb2YgdGhlIG1lc3NhZ2UuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzdHJ1Y3R1cmVkIG91dHB1dCBjb250YWluZWQgaW4gdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBnZXQgb3V0cHV0KCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlcj8uKHRoaXMpIHx8IHRoaXMuZGF0YSB8fCAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKHRoaXMudGV4dCk7XG4gIH1cbiAgdG9vbFJlc3BvbnNlUGFydHMoKSB7XG4gICAgY29uc3QgcmVzID0gdGhpcy5jb250ZW50LmZpbHRlcigocGFydCkgPT4gISFwYXJ0LnRvb2xSZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIGFsbCBgdGV4dGAgcGFydHMgcHJlc2VudCBpbiB0aGUgbWVzc2FnZSB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBtZWRpYSBwYXJ0IGRldGVjdGVkIGluIHRoZSBtZXNzYWdlLiBVc2VmdWwgZm9yIGV4dHJhY3RpbmdcbiAgICogKGZvciBleGFtcGxlKSBhbiBpbWFnZSBmcm9tIGEgZ2VuZXJhdGlvbiBleHBlY3RlZCB0byBjcmVhdGUgb25lLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgZGV0ZWN0ZWQgYG1lZGlhYCBwYXJ0IGluIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgZ2V0IG1lZGlhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmluZCgocGFydCkgPT4gcGFydC5tZWRpYSk/Lm1lZGlhIHx8IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGRldGVjdGVkIGBkYXRhYCBwYXJ0IG9mIGEgbWVzc2FnZS5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGBkYXRhYCBwYXJ0IGRldGVjdGVkIGluIHRoZSBtZXNzYWdlIChpZiBhbnkpLlxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maW5kKChwYXJ0KSA9PiBwYXJ0LmRhdGEpPy5kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCB0b29sIHJlcXVlc3QgZm91bmQgaW4gdGhpcyBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoaXMgbWVzc2FnZS5cbiAgICovXG4gIGdldCB0b29sUmVxdWVzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maWx0ZXIoXG4gICAgICAocGFydCkgPT4gISFwYXJ0LnRvb2xSZXF1ZXN0XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0cyBhbm5vdGF0ZWQgd2l0aCBpbnRlcnJ1cHQgbWV0YWRhdGEuXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIGFsbCBpbnRlcnJ1cHQgdG9vbCByZXF1ZXN0cy5cbiAgICovXG4gIGdldCBpbnRlcnJ1cHRzKCkge1xuICAgIHJldHVybiB0aGlzLnRvb2xSZXF1ZXN0cy5maWx0ZXIoKHQpID0+ICEhdC5tZXRhZGF0YT8uaW50ZXJydXB0KTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIE1lc3NhZ2UgdG8gYSBwbGFpbiBKUyBvYmplY3QuXG4gICAqIEByZXR1cm5zIFBsYWluIEpTIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGRhdGEgY29udGFpbmVkIGluIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIGxldCBvdXQgPSB7XG4gICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICBjb250ZW50OiBbLi4udGhpcy5jb250ZW50XVxuICAgIH07XG4gICAgaWYgKHRoaXMubWV0YWRhdGEpIG91dC5tZXRhZGF0YSA9IHRoaXMubWV0YWRhdGE7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE1lc3NhZ2Vcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_exports = {};\n__export(model_exports, {\n  CandidateErrorSchema: () => CandidateErrorSchema,\n  CandidateSchema: () => CandidateSchema,\n  CustomPartSchema: () => import_document.CustomPartSchema,\n  DataPartSchema: () => import_document.DataPartSchema,\n  FinishReasonSchema: () => FinishReasonSchema,\n  GenerateActionOptionsSchema: () => GenerateActionOptionsSchema,\n  GenerateActionOutputConfig: () => GenerateActionOutputConfig,\n  GenerateRequestSchema: () => GenerateRequestSchema,\n  GenerateResponseChunkSchema: () => GenerateResponseChunkSchema,\n  GenerateResponseSchema: () => GenerateResponseSchema,\n  GenerationCommonConfigDescriptions: () => GenerationCommonConfigDescriptions,\n  GenerationCommonConfigSchema: () => GenerationCommonConfigSchema,\n  GenerationUsageSchema: () => GenerationUsageSchema,\n  MediaPartSchema: () => import_document.MediaPartSchema,\n  MessageSchema: () => MessageSchema,\n  ModelInfoSchema: () => ModelInfoSchema,\n  ModelRequestSchema: () => ModelRequestSchema,\n  ModelResponseChunkSchema: () => ModelResponseChunkSchema,\n  ModelResponseSchema: () => ModelResponseSchema,\n  OutputConfigSchema: () => OutputConfigSchema,\n  PartSchema: () => PartSchema,\n  RoleSchema: () => RoleSchema,\n  TextPartSchema: () => import_document.TextPartSchema,\n  ToolDefinitionSchema: () => ToolDefinitionSchema,\n  ToolRequestPartSchema: () => import_document.ToolRequestPartSchema,\n  ToolResponsePartSchema: () => import_document.ToolResponsePartSchema,\n  defineGenerateAction: () => import_action.defineGenerateAction,\n  defineModel: () => defineModel,\n  getBasicUsageStats: () => getBasicUsageStats,\n  modelActionMetadata: () => modelActionMetadata,\n  modelRef: () => modelRef,\n  resolveModel: () => resolveModel,\n  simulateConstrainedGeneration: () => import_middleware.simulateConstrainedGeneration\n});\nmodule.exports = __toCommonJS(model_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_middleware = __webpack_require__(/*! ./model/middleware.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\nconst PartSchema = import_core.z.union([\n  import_document.TextPartSchema,\n  import_document.MediaPartSchema,\n  import_document.ToolRequestPartSchema,\n  import_document.ToolResponsePartSchema,\n  import_document.DataPartSchema,\n  import_document.CustomPartSchema\n]);\nconst RoleSchema = import_core.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = import_core.z.object({\n  role: RoleSchema,\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.unknown()).optional()\n});\nconst ModelInfoSchema = import_core.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: import_core.z.array(import_core.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Model Specific configuration. */\n  configSchema: import_core.z.record(import_core.z.any()).optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: import_core.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: import_core.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: import_core.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: import_core.z.array(import_core.z.string()).optional(),\n    /** Model supports output in these content types. */\n    contentType: import_core.z.array(import_core.z.string()).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: import_core.z.boolean().optional(),\n    /** Model can natively support constrained generation. */\n    constrained: import_core.z.enum([\"none\", \"all\", \"no-tools\"]).optional(),\n    /** Model supports controlling tool choice, e.g. forced tool calling. */\n    toolChoice: import_core.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: import_core.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string(),\n  inputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\").nullish(),\n  outputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").nullish(),\n  metadata: import_core.z.record(import_core.z.any()).describe(\"additional metadata for this tool definition\").optional()\n});\nconst GenerationCommonConfigDescriptions = {\n  temperature: \"Controls the degree of randomness in token selection. A lower value is good for a more predictable response. A higher value leads to more diverse or unexpected results.\",\n  maxOutputTokens: \"The maximum number of tokens to include in the response.\",\n  topK: \"The maximum number of tokens to consider when sampling.\",\n  topP: \"Decides how many possible words to consider. A higher value means that the model looks at more possible words, even the less likely ones, which makes the generated text more diverse.\"\n};\nconst GenerationCommonConfigSchema = import_core.z.object({\n  version: import_core.z.string().describe(\n    \"A specific version of a model family, e.g. `gemini-2.0-flash` for the `googleai` family.\"\n  ).optional(),\n  temperature: import_core.z.number().describe(GenerationCommonConfigDescriptions.temperature).optional(),\n  maxOutputTokens: import_core.z.number().describe(GenerationCommonConfigDescriptions.maxOutputTokens).optional(),\n  topK: import_core.z.number().describe(GenerationCommonConfigDescriptions.topK).optional(),\n  topP: import_core.z.number().describe(GenerationCommonConfigDescriptions.topP).optional(),\n  stopSequences: import_core.z.array(import_core.z.string()).length(5).describe(\n    \"Set of character sequences (up to 5) that will stop output generation.\"\n  ).optional()\n}).passthrough();\nconst OutputConfigSchema = import_core.z.object({\n  format: import_core.z.string().optional(),\n  schema: import_core.z.record(import_core.z.any()).optional(),\n  constrained: import_core.z.boolean().optional(),\n  contentType: import_core.z.string().optional()\n});\nconst ModelRequestSchema = import_core.z.object({\n  messages: import_core.z.array(MessageSchema),\n  config: import_core.z.any().optional(),\n  tools: import_core.z.array(ToolDefinitionSchema).optional(),\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  output: OutputConfigSchema.optional(),\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional()\n});\nconst GenerateRequestSchema = ModelRequestSchema.extend({\n  /** @deprecated All responses now return a single candidate. This will always be `undefined`. */\n  candidates: import_core.z.number().optional()\n});\nconst GenerationUsageSchema = import_core.z.object({\n  inputTokens: import_core.z.number().optional(),\n  outputTokens: import_core.z.number().optional(),\n  totalTokens: import_core.z.number().optional(),\n  inputCharacters: import_core.z.number().optional(),\n  outputCharacters: import_core.z.number().optional(),\n  inputImages: import_core.z.number().optional(),\n  outputImages: import_core.z.number().optional(),\n  inputVideos: import_core.z.number().optional(),\n  outputVideos: import_core.z.number().optional(),\n  inputAudioFiles: import_core.z.number().optional(),\n  outputAudioFiles: import_core.z.number().optional(),\n  custom: import_core.z.record(import_core.z.number()).optional()\n});\nconst FinishReasonSchema = import_core.z.enum([\n  \"stop\",\n  \"length\",\n  \"blocked\",\n  \"interrupted\",\n  \"other\",\n  \"unknown\"\n]);\nconst CandidateSchema = import_core.z.object({\n  index: import_core.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  custom: import_core.z.unknown()\n});\nconst CandidateErrorSchema = import_core.z.object({\n  index: import_core.z.number(),\n  code: import_core.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: import_core.z.string().optional()\n});\nconst ModelResponseSchema = import_core.z.object({\n  message: MessageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  latencyMs: import_core.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  /** @deprecated use `raw` instead */\n  custom: import_core.z.unknown(),\n  raw: import_core.z.unknown(),\n  request: GenerateRequestSchema.optional()\n});\nconst GenerateResponseSchema = ModelResponseSchema.extend({\n  /** @deprecated All responses now return a single candidate. Only the first candidate will be used if supplied. Return `message`, `finishReason`, and `finishMessage` instead. */\n  candidates: import_core.z.array(CandidateSchema).optional(),\n  finishReason: FinishReasonSchema.optional()\n});\nconst ModelResponseChunkSchema = import_core.z.object({\n  role: RoleSchema.optional(),\n  /** index of the message this chunk belongs to. */\n  index: import_core.z.number().optional(),\n  /** The chunk of content to stream right now. */\n  content: import_core.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: import_core.z.unknown().optional(),\n  /** If true, the chunk includes all data from previous chunks. Otherwise, considered to be incremental. */\n  aggregated: import_core.z.boolean().optional()\n});\nconst GenerateResponseChunkSchema = ModelResponseChunkSchema;\nfunction defineModel(registry, options, runner) {\n  const label = options.label || options.name;\n  const middleware = [\n    ...options.use || [],\n    (0, import_middleware.validateSupport)(options)\n  ];\n  if (!options?.supports?.context) middleware.push((0, import_middleware.augmentWithContext)());\n  const constratedSimulator = (0, import_middleware.simulateConstrainedGeneration)();\n  middleware.push((req, next) => {\n    if (!options?.supports?.constrained || options?.supports?.constrained === \"none\" || options?.supports?.constrained === \"no-tools\" && (req.tools?.length ?? 0) > 0) {\n      return constratedSimulator(req, next);\n    }\n    return next(req);\n  });\n  const act = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"model\",\n      name: options.name,\n      description: label,\n      inputSchema: GenerateRequestSchema,\n      outputSchema: GenerateResponseSchema,\n      metadata: {\n        model: {\n          label,\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n          versions: options.versions,\n          supports: options.supports\n        }\n      },\n      use: middleware\n    },\n    (input) => {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      return runner(input, (0, import_core.getStreamingCallback)(registry)).then((response) => {\n        const timedResponse = {\n          ...response,\n          latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n        };\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction modelActionMetadata({\n  name,\n  info,\n  configSchema\n}) {\n  return {\n    actionType: \"model\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: GenerateRequestSchema }),\n    outputJsonSchema: (0, import_schema.toJsonSchema)({ schema: GenerateResponseSchema }),\n    metadata: {\n      model: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction modelRef(options) {\n  const ref = { ...options };\n  ref.withConfig = (cfg) => {\n    return modelRef({\n      ...options,\n      config: cfg\n    });\n  };\n  ref.withVersion = (version) => {\n    return modelRef({\n      ...options,\n      version\n    });\n  };\n  return ref;\n}\nfunction getBasicUsageStats(input, response) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    Array.isArray(response) ? response.flatMap((c) => c.message.content) : response.content\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      const isImage = part.media?.contentType?.startsWith(\"image\") || part.media?.url?.startsWith(\"data:image\");\n      const isVideo = part.media?.contentType?.startsWith(\"video\") || part.media?.url?.startsWith(\"data:video\");\n      const isAudio = part.media?.contentType?.startsWith(\"audio\") || part.media?.url?.startsWith(\"data:audio\");\n      return {\n        characters: counts.characters + (part.text?.length || 0),\n        images: counts.images + (isImage ? 1 : 0),\n        videos: counts.videos + (isVideo ? 1 : 0),\n        audio: counts.audio + (isAudio ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\nasync function resolveModel(registry, model, options) {\n  let out;\n  let modelId;\n  if (!model) {\n    model = await registry.lookupValue(\"defaultModel\", \"defaultModel\");\n  }\n  if (!model) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Must supply a `model` to `generate()` calls.\"\n    });\n  }\n  if (typeof model === \"string\") {\n    modelId = model;\n    out = { modelAction: await registry.lookupAction(`/model/${model}`) };\n  } else if (model.hasOwnProperty(\"__action\")) {\n    modelId = model.__action.name;\n    out = { modelAction: model };\n  } else {\n    const ref = model;\n    modelId = ref.name;\n    out = {\n      modelAction: await registry.lookupAction(\n        `/model/${ref.name}`\n      ),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  if (!out.modelAction) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Model '${modelId}' not found`\n    });\n  }\n  if (options?.warnDeprecated && out.modelAction.__action.metadata?.model?.stage === \"deprecated\") {\n    import_logging.logger.warn(\n      `Model '${out.modelAction.__action.name}' is deprecated and may be removed in a future release.`\n    );\n  }\n  return out;\n}\nconst GenerateActionOutputConfig = import_core.z.object({\n  format: import_core.z.string().optional(),\n  contentType: import_core.z.string().optional(),\n  instructions: import_core.z.union([import_core.z.boolean(), import_core.z.string()]).optional(),\n  jsonSchema: import_core.z.any().optional(),\n  constrained: import_core.z.boolean().optional()\n});\nconst GenerateActionOptionsSchema = import_core.z.object({\n  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */\n  model: import_core.z.string(),\n  /** Retrieved documents to be used as context for this generation. */\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional(),\n  /** Conversation history for multi-turn prompting when supported by the underlying model. */\n  messages: import_core.z.array(MessageSchema),\n  /** List of registered tool names for this generation if supported by the underlying model. */\n  tools: import_core.z.array(import_core.z.string()).optional(),\n  /** Tool calling mode. `auto` lets the model decide whether to use tools, `required` forces the model to choose a tool, and `none` forces the model not to use any tools. Defaults to `auto`.  */\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  /** Configuration for the generation request. */\n  config: import_core.z.any().optional(),\n  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */\n  output: GenerateActionOutputConfig.optional(),\n  /** Options for resuming an interrupted generation. */\n  resume: import_core.z.object({\n    respond: import_core.z.array(import_document.ToolResponsePartSchema).optional(),\n    restart: import_core.z.array(import_document.ToolRequestPartSchema).optional(),\n    metadata: import_core.z.record(import_core.z.any()).optional()\n  }).optional(),\n  /** When true, return tool calls for manual processing instead of automatically resolving them. */\n  returnToolRequests: import_core.z.boolean().optional(),\n  /** Maximum number of tool call iterations that can be performed in a single generate call (default 5). */\n  maxTurns: import_core.z.number().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandidateErrorSchema: () => (/* binding */ CandidateErrorSchema),\n/* harmony export */   CandidateSchema: () => (/* binding */ CandidateSchema),\n/* harmony export */   CustomPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.CustomPartSchema),\n/* harmony export */   DataPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.DataPartSchema),\n/* harmony export */   FinishReasonSchema: () => (/* binding */ FinishReasonSchema),\n/* harmony export */   GenerateActionOptionsSchema: () => (/* binding */ GenerateActionOptionsSchema),\n/* harmony export */   GenerateActionOutputConfig: () => (/* binding */ GenerateActionOutputConfig),\n/* harmony export */   GenerateRequestSchema: () => (/* binding */ GenerateRequestSchema),\n/* harmony export */   GenerateResponseChunkSchema: () => (/* binding */ GenerateResponseChunkSchema),\n/* harmony export */   GenerateResponseSchema: () => (/* binding */ GenerateResponseSchema),\n/* harmony export */   GenerationCommonConfigDescriptions: () => (/* binding */ GenerationCommonConfigDescriptions),\n/* harmony export */   GenerationCommonConfigSchema: () => (/* binding */ GenerationCommonConfigSchema),\n/* harmony export */   GenerationUsageSchema: () => (/* binding */ GenerationUsageSchema),\n/* harmony export */   MediaPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.MediaPartSchema),\n/* harmony export */   MessageSchema: () => (/* binding */ MessageSchema),\n/* harmony export */   ModelInfoSchema: () => (/* binding */ ModelInfoSchema),\n/* harmony export */   ModelRequestSchema: () => (/* binding */ ModelRequestSchema),\n/* harmony export */   ModelResponseChunkSchema: () => (/* binding */ ModelResponseChunkSchema),\n/* harmony export */   ModelResponseSchema: () => (/* binding */ ModelResponseSchema),\n/* harmony export */   OutputConfigSchema: () => (/* binding */ OutputConfigSchema),\n/* harmony export */   PartSchema: () => (/* binding */ PartSchema),\n/* harmony export */   RoleSchema: () => (/* binding */ RoleSchema),\n/* harmony export */   TextPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.TextPartSchema),\n/* harmony export */   ToolDefinitionSchema: () => (/* binding */ ToolDefinitionSchema),\n/* harmony export */   ToolRequestPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolRequestPartSchema),\n/* harmony export */   ToolResponsePartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolResponsePartSchema),\n/* harmony export */   defineGenerateAction: () => (/* reexport safe */ _generate_action_js__WEBPACK_IMPORTED_MODULE_6__.defineGenerateAction),\n/* harmony export */   defineModel: () => (/* binding */ defineModel),\n/* harmony export */   getBasicUsageStats: () => (/* binding */ getBasicUsageStats),\n/* harmony export */   modelActionMetadata: () => (/* binding */ modelActionMetadata),\n/* harmony export */   modelRef: () => (/* binding */ modelRef),\n/* harmony export */   resolveModel: () => (/* binding */ resolveModel),\n/* harmony export */   simulateConstrainedGeneration: () => (/* reexport safe */ _model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.simulateConstrainedGeneration)\n/* harmony export */ });\n/* harmony import */ var _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs\");\n/* harmony import */ var _genkit_ai_core_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.mjs\");\n/* harmony import */ var _genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.mjs\");\n/* harmony import */ var node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\n/* harmony import */ var _model_middleware_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model/middleware.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\n/* harmony import */ var _generate_action_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\n\n\n\n\n\n\n\nconst PartSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.TextPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.MediaPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolRequestPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolResponsePartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.DataPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.CustomPartSchema\n]);\nconst RoleSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  role: RoleSchema,\n  content: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(PartSchema),\n  metadata: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).optional()\n});\nconst ModelInfoSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /** Model Specific configuration. */\n  configSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n  /** Supported model capabilities. */\n  supports: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    /** Model supports output in these content types. */\n    contentType: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can natively support constrained generation. */\n    constrained: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"none\", \"all\", \"no-tools\"]).optional(),\n    /** Model supports controlling tool choice, e.g. forced tool calling. */\n    toolChoice: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  name: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  description: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  inputSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\").nullish(),\n  outputSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").nullish(),\n  metadata: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).describe(\"additional metadata for this tool definition\").optional()\n});\nconst GenerationCommonConfigDescriptions = {\n  temperature: \"Controls the degree of randomness in token selection. A lower value is good for a more predictable response. A higher value leads to more diverse or unexpected results.\",\n  maxOutputTokens: \"The maximum number of tokens to include in the response.\",\n  topK: \"The maximum number of tokens to consider when sampling.\",\n  topP: \"Decides how many possible words to consider. A higher value means that the model looks at more possible words, even the less likely ones, which makes the generated text more diverse.\"\n};\nconst GenerationCommonConfigSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  version: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    \"A specific version of a model family, e.g. `gemini-2.0-flash` for the `googleai` family.\"\n  ).optional(),\n  temperature: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.temperature).optional(),\n  maxOutputTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.maxOutputTokens).optional(),\n  topK: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.topK).optional(),\n  topP: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.topP).optional(),\n  stopSequences: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).length(5).describe(\n    \"Set of character sequences (up to 5) that will stop output generation.\"\n  ).optional()\n}).passthrough();\nconst OutputConfigSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  format: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  schema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n  constrained: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  contentType: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst ModelRequestSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  messages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(MessageSchema),\n  config: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n  tools: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(ToolDefinitionSchema).optional(),\n  toolChoice: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  output: OutputConfigSchema.optional(),\n  docs: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.DocumentDataSchema).optional()\n});\nconst GenerateRequestSchema = ModelRequestSchema.extend({\n  /** @deprecated All responses now return a single candidate. This will always be `undefined`. */\n  candidates: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n});\nconst GenerationUsageSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  inputTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  totalTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputCharacters: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputCharacters: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputImages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputImages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputVideos: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputVideos: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputAudioFiles: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputAudioFiles: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number()).optional()\n});\nconst FinishReasonSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n  \"stop\",\n  \"length\",\n  \"blocked\",\n  \"interrupted\",\n  \"other\",\n  \"unknown\"\n]);\nconst CandidateSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  index: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n});\nconst CandidateErrorSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  index: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  code: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst ModelResponseSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  message: MessageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  latencyMs: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  /** @deprecated use `raw` instead */\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown(),\n  raw: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown(),\n  request: GenerateRequestSchema.optional()\n});\nconst GenerateResponseSchema = ModelResponseSchema.extend({\n  /** @deprecated All responses now return a single candidate. Only the first candidate will be used if supplied. Return `message`, `finishReason`, and `finishMessage` instead. */\n  candidates: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(CandidateSchema).optional(),\n  finishReason: FinishReasonSchema.optional()\n});\nconst ModelResponseChunkSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  role: RoleSchema.optional(),\n  /** index of the message this chunk belongs to. */\n  index: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  /** The chunk of content to stream right now. */\n  content: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown().optional(),\n  /** If true, the chunk includes all data from previous chunks. Otherwise, considered to be incremental. */\n  aggregated: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nconst GenerateResponseChunkSchema = ModelResponseChunkSchema;\nfunction defineModel(registry, options, runner) {\n  const label = options.label || options.name;\n  const middleware = [\n    ...options.use || [],\n    (0,_model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.validateSupport)(options)\n  ];\n  if (!options?.supports?.context) middleware.push((0,_model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.augmentWithContext)());\n  const constratedSimulator = (0,_model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.simulateConstrainedGeneration)();\n  middleware.push((req, next) => {\n    if (!options?.supports?.constrained || options?.supports?.constrained === \"none\" || options?.supports?.constrained === \"no-tools\" && (req.tools?.length ?? 0) > 0) {\n      return constratedSimulator(req, next);\n    }\n    return next(req);\n  });\n  const act = (0,_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.defineAction)(\n    registry,\n    {\n      actionType: \"model\",\n      name: options.name,\n      description: label,\n      inputSchema: GenerateRequestSchema,\n      outputSchema: GenerateResponseSchema,\n      metadata: {\n        model: {\n          label,\n          customOptions: options.configSchema ? (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: options.configSchema }) : void 0,\n          versions: options.versions,\n          supports: options.supports\n        }\n      },\n      use: middleware\n    },\n    (input) => {\n      const startTimeMs = node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__.performance.now();\n      return runner(input, (0,_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.getStreamingCallback)(registry)).then((response) => {\n        const timedResponse = {\n          ...response,\n          latencyMs: node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__.performance.now() - startTimeMs\n        };\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n  });\n  return act;\n}\nfunction modelActionMetadata({\n  name,\n  info,\n  configSchema\n}) {\n  return {\n    actionType: \"model\",\n    name,\n    inputJsonSchema: (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: GenerateRequestSchema }),\n    outputJsonSchema: (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: GenerateResponseSchema }),\n    metadata: {\n      model: {\n        ...info,\n        customOptions: configSchema ? (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction modelRef(options) {\n  const ref = { ...options };\n  ref.withConfig = (cfg) => {\n    return modelRef({\n      ...options,\n      config: cfg\n    });\n  };\n  ref.withVersion = (version) => {\n    return modelRef({\n      ...options,\n      version\n    });\n  };\n  return ref;\n}\nfunction getBasicUsageStats(input, response) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    Array.isArray(response) ? response.flatMap((c) => c.message.content) : response.content\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      const isImage = part.media?.contentType?.startsWith(\"image\") || part.media?.url?.startsWith(\"data:image\");\n      const isVideo = part.media?.contentType?.startsWith(\"video\") || part.media?.url?.startsWith(\"data:video\");\n      const isAudio = part.media?.contentType?.startsWith(\"audio\") || part.media?.url?.startsWith(\"data:audio\");\n      return {\n        characters: counts.characters + (part.text?.length || 0),\n        images: counts.images + (isImage ? 1 : 0),\n        videos: counts.videos + (isVideo ? 1 : 0),\n        audio: counts.audio + (isAudio ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\nasync function resolveModel(registry, model, options) {\n  let out;\n  let modelId;\n  if (!model) {\n    model = await registry.lookupValue(\"defaultModel\", \"defaultModel\");\n  }\n  if (!model) {\n    throw new _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Must supply a `model` to `generate()` calls.\"\n    });\n  }\n  if (typeof model === \"string\") {\n    modelId = model;\n    out = { modelAction: await registry.lookupAction(`/model/${model}`) };\n  } else if (model.hasOwnProperty(\"__action\")) {\n    modelId = model.__action.name;\n    out = { modelAction: model };\n  } else {\n    const ref = model;\n    modelId = ref.name;\n    out = {\n      modelAction: await registry.lookupAction(\n        `/model/${ref.name}`\n      ),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  if (!out.modelAction) {\n    throw new _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Model '${modelId}' not found`\n    });\n  }\n  if (options?.warnDeprecated && out.modelAction.__action.metadata?.model?.stage === \"deprecated\") {\n    _genkit_ai_core_logging__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\n      `Model '${out.modelAction.__action.name}' is deprecated and may be removed in a future release.`\n    );\n  }\n  return out;\n}\nconst GenerateActionOutputConfig = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  format: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  contentType: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  instructions: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.union([_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean(), _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()]).optional(),\n  jsonSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n  constrained: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nconst GenerateActionOptionsSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */\n  model: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  /** Retrieved documents to be used as context for this generation. */\n  docs: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.DocumentDataSchema).optional(),\n  /** Conversation history for multi-turn prompting when supported by the underlying model. */\n  messages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(MessageSchema),\n  /** List of registered tool names for this generation if supported by the underlying model. */\n  tools: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  /** Tool calling mode. `auto` lets the model decide whether to use tools, `required` forces the model to choose a tool, and `none` forces the model not to use any tools. Defaults to `auto`.  */\n  toolChoice: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  /** Configuration for the generation request. */\n  config: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */\n  output: GenerateActionOutputConfig.optional(),\n  /** Options for resuming an interrupted generation. */\n  resume: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    respond: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.ToolResponsePartSchema).optional(),\n    restart: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.ToolRequestPartSchema).optional(),\n    metadata: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional()\n  }).optional(),\n  /** When true, return tool calls for manual processing instead of automatically resolving them. */\n  returnToolRequests: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /** Maximum number of tool call iterations that can be performed in a single generate call (default 5). */\n  maxTurns: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n});\n\n//# sourceMappingURL=model.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model/middleware.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar middleware_exports = {};\n__export(middleware_exports, {\n  CONTEXT_PREFACE: () => CONTEXT_PREFACE,\n  augmentWithContext: () => augmentWithContext,\n  downloadRequestMedia: () => downloadRequestMedia,\n  simulateConstrainedGeneration: () => simulateConstrainedGeneration,\n  simulateSystemPrompt: () => simulateSystemPrompt,\n  validateSupport: () => validateSupport\n});\nmodule.exports = __toCommonJS(middleware_exports);\nvar import_document = __webpack_require__(/*! ../document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nfunction downloadRequestMedia(options) {\n  return async (req, next) => {\n    const { default: fetch } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"));\n    const newReq = {\n      ...req,\n      messages: await Promise.all(\n        req.messages.map(async (message) => {\n          const content = await Promise.all(\n            message.content.map(async (part) => {\n              if (!part.media || !part.media.url.startsWith(\"http\") || options?.filter && !options?.filter(part)) {\n                return part;\n              }\n              const response = await fetch(part.media.url, {\n                size: options?.maxBytes\n              });\n              if (response.status !== 200)\n                throw new Error(\n                  `HTTP error downloading media '${part.media.url}': ${await response.text()}`\n                );\n              const contentType = part.media.contentType || response.headers.get(\"content-type\") || \"\";\n              return {\n                media: {\n                  contentType,\n                  url: `data:${contentType};base64,${Buffer.from(\n                    await response.arrayBuffer()\n                  ).toString(\"base64\")}`\n                }\n              };\n            })\n          );\n          return {\n            ...message,\n            content\n          };\n        })\n      )\n    };\n    return next(newReq);\n  };\n}\nfunction validateSupport(options) {\n  const supports = options.supports || {};\n  return async (req, next) => {\n    function invalid(message) {\n      throw new Error(\n        `Model '${options.name}' does not support ${message}. Request: ${JSON.stringify(\n          req,\n          null,\n          2\n        )}`\n      );\n    }\n    if (supports.media === false && req.messages.some((message) => message.content.some((part) => part.media)))\n      invalid(\"media, but media was provided\");\n    if (supports.tools === false && req.tools?.length)\n      invalid(\"tool use, but tools were provided\");\n    if (supports.multiturn === false && req.messages.length > 1)\n      invalid(`multiple messages, but ${req.messages.length} were provided`);\n    return next();\n  };\n}\nfunction lastUserMessage(messages) {\n  for (let i = messages.length - 1; i >= 0; i--) {\n    if (messages[i].role === \"user\") {\n      return messages[i];\n    }\n  }\n  return void 0;\n}\nfunction simulateSystemPrompt(options) {\n  const preface = options?.preface || \"SYSTEM INSTRUCTIONS:\\n\";\n  const acknowledgement = options?.acknowledgement || \"Understood.\";\n  return (req, next) => {\n    const messages = [...req.messages];\n    for (let i = 0; i < messages.length; i++) {\n      if (req.messages[i].role === \"system\") {\n        const systemPrompt = messages[i].content;\n        messages.splice(\n          i,\n          1,\n          { role: \"user\", content: [{ text: preface }, ...systemPrompt] },\n          { role: \"model\", content: [{ text: acknowledgement }] }\n        );\n        break;\n      }\n    }\n    return next({ ...req, messages });\n  };\n}\nconst CONTEXT_PREFACE = \"\\n\\nUse the following information to complete your task:\\n\\n\";\nconst CONTEXT_ITEM_TEMPLATE = (d, index, options) => {\n  let out = \"- \";\n  if (options?.citationKey) {\n    out += `[${d.metadata[options.citationKey]}]: `;\n  } else if (options?.citationKey === void 0) {\n    out += `[${d.metadata?.[\"ref\"] || d.metadata?.[\"id\"] || index}]: `;\n  }\n  out += d.text + \"\\n\";\n  return out;\n};\nfunction augmentWithContext(options) {\n  const preface = typeof options?.preface === \"undefined\" ? CONTEXT_PREFACE : options.preface;\n  const itemTemplate = options?.itemTemplate || CONTEXT_ITEM_TEMPLATE;\n  return (req, next) => {\n    if (!req.docs?.length) return next(req);\n    const userMessage = lastUserMessage(req.messages);\n    if (!userMessage) return next(req);\n    const contextPartIndex = userMessage?.content.findIndex(\n      (p) => p.metadata?.purpose === \"context\"\n    );\n    const contextPart = contextPartIndex >= 0 && userMessage.content[contextPartIndex];\n    if (contextPart && !contextPart.metadata?.pending) {\n      return next(req);\n    }\n    let out = `${preface || \"\"}`;\n    req.docs?.forEach((d, i) => {\n      out += itemTemplate(new import_document.Document(d), i, options);\n    });\n    out += \"\\n\";\n    if (contextPartIndex >= 0) {\n      userMessage.content[contextPartIndex] = {\n        ...contextPart,\n        text: out,\n        metadata: { purpose: \"context\" }\n      };\n    } else {\n      userMessage.content.push({ text: out, metadata: { purpose: \"context\" } });\n    }\n    return next(req);\n  };\n}\nconst DEFAULT_CONSTRAINED_GENERATION_INSTRUSCTIONS = (schema) => `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\nfunction simulateConstrainedGeneration(options) {\n  return (req, next) => {\n    let instructions;\n    if (req.output?.constrained && req.output?.schema) {\n      instructions = (options?.instructionsRenderer ?? DEFAULT_CONSTRAINED_GENERATION_INSTRUSCTIONS)(req.output?.schema);\n      req = {\n        ...req,\n        messages: (0, import_formats.injectInstructions)(req.messages, instructions),\n        output: {\n          ...req.output,\n          // we're simulating it, so to the underlying model it's unconstrained.\n          constrained: false,\n          format: void 0,\n          contentType: void 0,\n          schema: void 0\n        }\n      };\n    }\n    return next(req);\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9tb2RlbC9taWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQyxxRkFBZ0I7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsK0ZBQXFCO0FBQ2xEO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQixRQUFRLCtlQUFvQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxtREFBbUQsZUFBZSxLQUFLLHNCQUFzQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWEsU0FBUztBQUNyRDtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsYUFBYSxxQkFBcUIsUUFBUSxhQUFhO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxxQkFBcUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsUUFBUTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQkFBMEIsZUFBZSxvQkFBb0I7QUFDekUsWUFBWSwyQkFBMkIsdUJBQXVCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdDQUFnQztBQUMvQyxJQUFJO0FBQ0osZUFBZSxtREFBbUQ7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsTUFBTTtBQUNOLGlDQUFpQyx1QkFBdUIsc0JBQXNCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQU9MO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL21vZGVsL21pZGRsZXdhcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIG1pZGRsZXdhcmVfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobWlkZGxld2FyZV9leHBvcnRzLCB7XG4gIENPTlRFWFRfUFJFRkFDRTogKCkgPT4gQ09OVEVYVF9QUkVGQUNFLFxuICBhdWdtZW50V2l0aENvbnRleHQ6ICgpID0+IGF1Z21lbnRXaXRoQ29udGV4dCxcbiAgZG93bmxvYWRSZXF1ZXN0TWVkaWE6ICgpID0+IGRvd25sb2FkUmVxdWVzdE1lZGlhLFxuICBzaW11bGF0ZUNvbnN0cmFpbmVkR2VuZXJhdGlvbjogKCkgPT4gc2ltdWxhdGVDb25zdHJhaW5lZEdlbmVyYXRpb24sXG4gIHNpbXVsYXRlU3lzdGVtUHJvbXB0OiAoKSA9PiBzaW11bGF0ZVN5c3RlbVByb21wdCxcbiAgdmFsaWRhdGVTdXBwb3J0OiAoKSA9PiB2YWxpZGF0ZVN1cHBvcnRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMobWlkZGxld2FyZV9leHBvcnRzKTtcbnZhciBpbXBvcnRfZG9jdW1lbnQgPSByZXF1aXJlKFwiLi4vZG9jdW1lbnQuanNcIik7XG52YXIgaW1wb3J0X2Zvcm1hdHMgPSByZXF1aXJlKFwiLi4vZm9ybWF0cy9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIGRvd25sb2FkUmVxdWVzdE1lZGlhKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGFzeW5jIChyZXEsIG5leHQpID0+IHtcbiAgICBjb25zdCB7IGRlZmF1bHQ6IGZldGNoIH0gPSBhd2FpdCBpbXBvcnQoXCJub2RlLWZldGNoXCIpO1xuICAgIGNvbnN0IG5ld1JlcSA9IHtcbiAgICAgIC4uLnJlcSxcbiAgICAgIG1lc3NhZ2VzOiBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgcmVxLm1lc3NhZ2VzLm1hcChhc3luYyAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIG1lc3NhZ2UuY29udGVudC5tYXAoYXN5bmMgKHBhcnQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFwYXJ0Lm1lZGlhIHx8ICFwYXJ0Lm1lZGlhLnVybC5zdGFydHNXaXRoKFwiaHR0cFwiKSB8fCBvcHRpb25zPy5maWx0ZXIgJiYgIW9wdGlvbnM/LmZpbHRlcihwYXJ0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocGFydC5tZWRpYS51cmwsIHtcbiAgICAgICAgICAgICAgICBzaXplOiBvcHRpb25zPy5tYXhCeXRlc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgIGBIVFRQIGVycm9yIGRvd25sb2FkaW5nIG1lZGlhICcke3BhcnQubWVkaWEudXJsfSc6ICR7YXdhaXQgcmVzcG9uc2UudGV4dCgpfWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHBhcnQubWVkaWEuY29udGVudFR5cGUgfHwgcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIikgfHwgXCJcIjtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtZWRpYToge1xuICAgICAgICAgICAgICAgICAgY29udGVudFR5cGUsXG4gICAgICAgICAgICAgICAgICB1cmw6IGBkYXRhOiR7Y29udGVudFR5cGV9O2Jhc2U2NCwke0J1ZmZlci5mcm9tKFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpXG4gICAgICAgICAgICAgICAgICApLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLm1lc3NhZ2UsXG4gICAgICAgICAgICBjb250ZW50XG4gICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9O1xuICAgIHJldHVybiBuZXh0KG5ld1JlcSk7XG4gIH07XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVN1cHBvcnQob3B0aW9ucykge1xuICBjb25zdCBzdXBwb3J0cyA9IG9wdGlvbnMuc3VwcG9ydHMgfHwge307XG4gIHJldHVybiBhc3luYyAocmVxLCBuZXh0KSA9PiB7XG4gICAgZnVuY3Rpb24gaW52YWxpZChtZXNzYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBNb2RlbCAnJHtvcHRpb25zLm5hbWV9JyBkb2VzIG5vdCBzdXBwb3J0ICR7bWVzc2FnZX0uIFJlcXVlc3Q6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgcmVxLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgMlxuICAgICAgICApfWBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChzdXBwb3J0cy5tZWRpYSA9PT0gZmFsc2UgJiYgcmVxLm1lc3NhZ2VzLnNvbWUoKG1lc3NhZ2UpID0+IG1lc3NhZ2UuY29udGVudC5zb21lKChwYXJ0KSA9PiBwYXJ0Lm1lZGlhKSkpXG4gICAgICBpbnZhbGlkKFwibWVkaWEsIGJ1dCBtZWRpYSB3YXMgcHJvdmlkZWRcIik7XG4gICAgaWYgKHN1cHBvcnRzLnRvb2xzID09PSBmYWxzZSAmJiByZXEudG9vbHM/Lmxlbmd0aClcbiAgICAgIGludmFsaWQoXCJ0b29sIHVzZSwgYnV0IHRvb2xzIHdlcmUgcHJvdmlkZWRcIik7XG4gICAgaWYgKHN1cHBvcnRzLm11bHRpdHVybiA9PT0gZmFsc2UgJiYgcmVxLm1lc3NhZ2VzLmxlbmd0aCA+IDEpXG4gICAgICBpbnZhbGlkKGBtdWx0aXBsZSBtZXNzYWdlcywgYnV0ICR7cmVxLm1lc3NhZ2VzLmxlbmd0aH0gd2VyZSBwcm92aWRlZGApO1xuICAgIHJldHVybiBuZXh0KCk7XG4gIH07XG59XG5mdW5jdGlvbiBsYXN0VXNlck1lc3NhZ2UobWVzc2FnZXMpIHtcbiAgZm9yIChsZXQgaSA9IG1lc3NhZ2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKG1lc3NhZ2VzW2ldLnJvbGUgPT09IFwidXNlclwiKSB7XG4gICAgICByZXR1cm4gbWVzc2FnZXNbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBzaW11bGF0ZVN5c3RlbVByb21wdChvcHRpb25zKSB7XG4gIGNvbnN0IHByZWZhY2UgPSBvcHRpb25zPy5wcmVmYWNlIHx8IFwiU1lTVEVNIElOU1RSVUNUSU9OUzpcXG5cIjtcbiAgY29uc3QgYWNrbm93bGVkZ2VtZW50ID0gb3B0aW9ucz8uYWNrbm93bGVkZ2VtZW50IHx8IFwiVW5kZXJzdG9vZC5cIjtcbiAgcmV0dXJuIChyZXEsIG5leHQpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IFsuLi5yZXEubWVzc2FnZXNdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZXEubWVzc2FnZXNbaV0ucm9sZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBtZXNzYWdlc1tpXS5jb250ZW50O1xuICAgICAgICBtZXNzYWdlcy5zcGxpY2UoXG4gICAgICAgICAgaSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IFt7IHRleHQ6IHByZWZhY2UgfSwgLi4uc3lzdGVtUHJvbXB0XSB9LFxuICAgICAgICAgIHsgcm9sZTogXCJtb2RlbFwiLCBjb250ZW50OiBbeyB0ZXh0OiBhY2tub3dsZWRnZW1lbnQgfV0gfVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHQoeyAuLi5yZXEsIG1lc3NhZ2VzIH0pO1xuICB9O1xufVxuY29uc3QgQ09OVEVYVF9QUkVGQUNFID0gXCJcXG5cXG5Vc2UgdGhlIGZvbGxvd2luZyBpbmZvcm1hdGlvbiB0byBjb21wbGV0ZSB5b3VyIHRhc2s6XFxuXFxuXCI7XG5jb25zdCBDT05URVhUX0lURU1fVEVNUExBVEUgPSAoZCwgaW5kZXgsIG9wdGlvbnMpID0+IHtcbiAgbGV0IG91dCA9IFwiLSBcIjtcbiAgaWYgKG9wdGlvbnM/LmNpdGF0aW9uS2V5KSB7XG4gICAgb3V0ICs9IGBbJHtkLm1ldGFkYXRhW29wdGlvbnMuY2l0YXRpb25LZXldfV06IGA7XG4gIH0gZWxzZSBpZiAob3B0aW9ucz8uY2l0YXRpb25LZXkgPT09IHZvaWQgMCkge1xuICAgIG91dCArPSBgWyR7ZC5tZXRhZGF0YT8uW1wicmVmXCJdIHx8IGQubWV0YWRhdGE/LltcImlkXCJdIHx8IGluZGV4fV06IGA7XG4gIH1cbiAgb3V0ICs9IGQudGV4dCArIFwiXFxuXCI7XG4gIHJldHVybiBvdXQ7XG59O1xuZnVuY3Rpb24gYXVnbWVudFdpdGhDb250ZXh0KG9wdGlvbnMpIHtcbiAgY29uc3QgcHJlZmFjZSA9IHR5cGVvZiBvcHRpb25zPy5wcmVmYWNlID09PSBcInVuZGVmaW5lZFwiID8gQ09OVEVYVF9QUkVGQUNFIDogb3B0aW9ucy5wcmVmYWNlO1xuICBjb25zdCBpdGVtVGVtcGxhdGUgPSBvcHRpb25zPy5pdGVtVGVtcGxhdGUgfHwgQ09OVEVYVF9JVEVNX1RFTVBMQVRFO1xuICByZXR1cm4gKHJlcSwgbmV4dCkgPT4ge1xuICAgIGlmICghcmVxLmRvY3M/Lmxlbmd0aCkgcmV0dXJuIG5leHQocmVxKTtcbiAgICBjb25zdCB1c2VyTWVzc2FnZSA9IGxhc3RVc2VyTWVzc2FnZShyZXEubWVzc2FnZXMpO1xuICAgIGlmICghdXNlck1lc3NhZ2UpIHJldHVybiBuZXh0KHJlcSk7XG4gICAgY29uc3QgY29udGV4dFBhcnRJbmRleCA9IHVzZXJNZXNzYWdlPy5jb250ZW50LmZpbmRJbmRleChcbiAgICAgIChwKSA9PiBwLm1ldGFkYXRhPy5wdXJwb3NlID09PSBcImNvbnRleHRcIlxuICAgICk7XG4gICAgY29uc3QgY29udGV4dFBhcnQgPSBjb250ZXh0UGFydEluZGV4ID49IDAgJiYgdXNlck1lc3NhZ2UuY29udGVudFtjb250ZXh0UGFydEluZGV4XTtcbiAgICBpZiAoY29udGV4dFBhcnQgJiYgIWNvbnRleHRQYXJ0Lm1ldGFkYXRhPy5wZW5kaW5nKSB7XG4gICAgICByZXR1cm4gbmV4dChyZXEpO1xuICAgIH1cbiAgICBsZXQgb3V0ID0gYCR7cHJlZmFjZSB8fCBcIlwifWA7XG4gICAgcmVxLmRvY3M/LmZvckVhY2goKGQsIGkpID0+IHtcbiAgICAgIG91dCArPSBpdGVtVGVtcGxhdGUobmV3IGltcG9ydF9kb2N1bWVudC5Eb2N1bWVudChkKSwgaSwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgb3V0ICs9IFwiXFxuXCI7XG4gICAgaWYgKGNvbnRleHRQYXJ0SW5kZXggPj0gMCkge1xuICAgICAgdXNlck1lc3NhZ2UuY29udGVudFtjb250ZXh0UGFydEluZGV4XSA9IHtcbiAgICAgICAgLi4uY29udGV4dFBhcnQsXG4gICAgICAgIHRleHQ6IG91dCxcbiAgICAgICAgbWV0YWRhdGE6IHsgcHVycG9zZTogXCJjb250ZXh0XCIgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXNlck1lc3NhZ2UuY29udGVudC5wdXNoKHsgdGV4dDogb3V0LCBtZXRhZGF0YTogeyBwdXJwb3NlOiBcImNvbnRleHRcIiB9IH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dChyZXEpO1xuICB9O1xufVxuY29uc3QgREVGQVVMVF9DT05TVFJBSU5FRF9HRU5FUkFUSU9OX0lOU1RSVVNDVElPTlMgPSAoc2NoZW1hKSA9PiBgT3V0cHV0IHNob3VsZCBiZSBpbiBKU09OIGZvcm1hdCBhbmQgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIHNjaGVtYTpcblxuXFxgXFxgXFxgXG4ke0pTT04uc3RyaW5naWZ5KHNjaGVtYSl9XG5cXGBcXGBcXGBcbmA7XG5mdW5jdGlvbiBzaW11bGF0ZUNvbnN0cmFpbmVkR2VuZXJhdGlvbihvcHRpb25zKSB7XG4gIHJldHVybiAocmVxLCBuZXh0KSA9PiB7XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAocmVxLm91dHB1dD8uY29uc3RyYWluZWQgJiYgcmVxLm91dHB1dD8uc2NoZW1hKSB7XG4gICAgICBpbnN0cnVjdGlvbnMgPSAob3B0aW9ucz8uaW5zdHJ1Y3Rpb25zUmVuZGVyZXIgPz8gREVGQVVMVF9DT05TVFJBSU5FRF9HRU5FUkFUSU9OX0lOU1RSVVNDVElPTlMpKHJlcS5vdXRwdXQ/LnNjaGVtYSk7XG4gICAgICByZXEgPSB7XG4gICAgICAgIC4uLnJlcSxcbiAgICAgICAgbWVzc2FnZXM6ICgwLCBpbXBvcnRfZm9ybWF0cy5pbmplY3RJbnN0cnVjdGlvbnMpKHJlcS5tZXNzYWdlcywgaW5zdHJ1Y3Rpb25zKSxcbiAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgLi4ucmVxLm91dHB1dCxcbiAgICAgICAgICAvLyB3ZSdyZSBzaW11bGF0aW5nIGl0LCBzbyB0byB0aGUgdW5kZXJseWluZyBtb2RlbCBpdCdzIHVuY29uc3RyYWluZWQuXG4gICAgICAgICAgY29uc3RyYWluZWQ6IGZhbHNlLFxuICAgICAgICAgIGZvcm1hdDogdm9pZCAwLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiB2b2lkIDAsXG4gICAgICAgICAgc2NoZW1hOiB2b2lkIDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQocmVxKTtcbiAgfTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDT05URVhUX1BSRUZBQ0UsXG4gIGF1Z21lbnRXaXRoQ29udGV4dCxcbiAgZG93bmxvYWRSZXF1ZXN0TWVkaWEsXG4gIHNpbXVsYXRlQ29uc3RyYWluZWRHZW5lcmF0aW9uLFxuICBzaW11bGF0ZVN5c3RlbVByb21wdCxcbiAgdmFsaWRhdGVTdXBwb3J0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pZGRsZXdhcmUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/prompt.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar prompt_exports = {};\n__export(prompt_exports, {\n  defineHelper: () => defineHelper,\n  definePartial: () => definePartial,\n  definePrompt: () => definePrompt,\n  isExecutablePrompt: () => isExecutablePrompt,\n  isPromptAction: () => isPromptAction,\n  loadPromptFolder: () => loadPromptFolder,\n  loadPromptFolderRecursively: () => loadPromptFolderRecursively,\n  prompt: () => prompt\n});\nmodule.exports = __toCommonJS(prompt_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_fs = __webpack_require__(/*! fs */ \"fs\");\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nfunction isPromptAction(action) {\n  return action.__action.metadata?.type === \"prompt\";\n}\nfunction definePrompt(registry, options) {\n  return definePromptAsync(\n    registry,\n    `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n    Promise.resolve(options)\n  );\n}\nfunction definePromptAsync(registry, name, optionsPromise) {\n  const promptCache = {};\n  const renderOptionsFn = async (input, renderOptions) => {\n    const messages = [];\n    renderOptions = { ...renderOptions };\n    const session = (0, import_session.getCurrentSession)(registry);\n    const resolvedOptions = await optionsPromise;\n    await renderSystemPrompt(\n      registry,\n      session,\n      input,\n      messages,\n      resolvedOptions,\n      promptCache,\n      renderOptions\n    );\n    await renderMessages(\n      registry,\n      session,\n      input,\n      messages,\n      resolvedOptions,\n      renderOptions,\n      promptCache\n    );\n    await renderUserPrompt(\n      registry,\n      session,\n      input,\n      messages,\n      resolvedOptions,\n      promptCache,\n      renderOptions\n    );\n    let docs;\n    if (typeof resolvedOptions.docs === \"function\") {\n      docs = await resolvedOptions.docs(input, {\n        state: session?.state,\n        context: renderOptions?.context || (0, import_core.getContext)(registry) || {}\n      });\n    } else {\n      docs = resolvedOptions.docs;\n    }\n    const opts = (0, import_core.stripUndefinedProps)({\n      model: resolvedOptions.model,\n      maxTurns: resolvedOptions.maxTurns,\n      messages,\n      docs,\n      tools: resolvedOptions.tools,\n      returnToolRequests: resolvedOptions.returnToolRequests,\n      toolChoice: resolvedOptions.toolChoice,\n      context: resolvedOptions.context,\n      output: resolvedOptions.output,\n      use: resolvedOptions.use,\n      ...(0, import_core.stripUndefinedProps)(renderOptions),\n      config: {\n        ...resolvedOptions?.config,\n        ...renderOptions?.config\n      }\n    });\n    if (Object.keys(opts.config).length === 0 && !renderOptions?.config) {\n      delete opts.config;\n    }\n    return opts;\n  };\n  const rendererActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        description: options.description,\n        actionType: \"prompt\",\n        metadata,\n        fn: async (input) => {\n          return (0, import_generate.toGenerateRequest)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  const rendererAction = (0, import_core.defineActionAsync)(\n    registry,\n    \"prompt\",\n    name,\n    rendererActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePromptActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        outputSchema: import_model.GenerateActionOptionsSchema,\n        description: options.description,\n        actionType: \"executable-prompt\",\n        metadata,\n        fn: async (input) => {\n          return await (0, import_generate.toGenerateActionOptions)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  (0, import_core.defineActionAsync)(\n    registry,\n    \"executable-prompt\",\n    name,\n    executablePromptActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePrompt = wrapInExecutablePrompt(\n    registry,\n    renderOptionsFn,\n    rendererAction\n  );\n  return executablePrompt;\n}\nfunction promptMetadata(options) {\n  const metadata = {\n    ...options.metadata,\n    prompt: {\n      ...options.metadata?.prompt,\n      config: options.config,\n      input: {\n        schema: options.input ? (0, import_schema.toJsonSchema)(options.input) : void 0\n      },\n      name: options.name.includes(\".\") ? options.name.split(\".\")[0] : options.name,\n      model: modelName(options.model)\n    },\n    type: \"prompt\"\n  };\n  if (options.variant) {\n    metadata.prompt.variant = options.variant;\n  }\n  return metadata;\n}\nfunction wrapInExecutablePrompt(registry, renderOptionsFn, rendererAction) {\n  const executablePrompt = async (input, opts) => {\n    return (0, import_generate.generate)(registry, {\n      ...await renderOptionsFn(input, opts)\n    });\n  };\n  executablePrompt.render = async (input, opts) => {\n    return {\n      ...await renderOptionsFn(input, opts)\n    };\n  };\n  executablePrompt.stream = (input, opts) => {\n    return (0, import_generate.generateStream)(registry, renderOptionsFn(input, opts));\n  };\n  executablePrompt.asTool = async () => {\n    return await rendererAction;\n  };\n  return executablePrompt;\n}\nasync function renderSystemPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.system === \"function\") {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(\n        await options.system(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)(registry) || {}\n        })\n      )\n    });\n  } else if (typeof options.system === \"string\") {\n    if (!promptCache.system) {\n      promptCache.system = await registry.dotprompt.compile(options.system);\n    }\n    messages.push({\n      role: \"system\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.system,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(options.system)\n    });\n  }\n}\nasync function renderMessages(registry, session, input, messages, options, renderOptions, promptCache) {\n  if (options.messages) {\n    if (typeof options.messages === \"function\") {\n      messages.push(\n        ...await options.messages(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)(registry) || {},\n          history: renderOptions?.messages\n        })\n      );\n    } else if (typeof options.messages === \"string\") {\n      if (!promptCache.messages) {\n        promptCache.messages = await registry.dotprompt.compile(\n          options.messages\n        );\n      }\n      const rendered = await promptCache.messages({\n        input,\n        context: {\n          ...renderOptions?.context || (0, import_core.getContext)(registry),\n          state: session?.state\n        },\n        messages: renderOptions?.messages?.map(\n          (m) => import_message.Message.parseData(m)\n        )\n      });\n      messages.push(...rendered.messages);\n    } else {\n      messages.push(...options.messages);\n    }\n  } else {\n    if (renderOptions.messages) {\n      messages.push(...renderOptions.messages);\n    }\n  }\n  if (renderOptions?.messages) {\n    delete renderOptions.messages;\n  }\n}\nasync function renderUserPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.prompt === \"function\") {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(\n        await options.prompt(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)(registry) || {}\n        })\n      )\n    });\n  } else if (typeof options.prompt === \"string\") {\n    if (!promptCache.userPrompt) {\n      promptCache.userPrompt = await registry.dotprompt.compile(options.prompt);\n    }\n    messages.push({\n      role: \"user\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.userPrompt,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(options.prompt)\n    });\n  }\n}\nfunction modelName(modelArg) {\n  if (modelArg === void 0) {\n    return void 0;\n  }\n  if (typeof modelArg === \"string\") {\n    return modelArg;\n  }\n  if (modelArg.name) {\n    return modelArg.name;\n  }\n  return modelArg.__action.name;\n}\nfunction normalizeParts(parts) {\n  if (Array.isArray(parts)) return parts;\n  if (typeof parts === \"string\") {\n    return [\n      {\n        text: parts\n      }\n    ];\n  }\n  return [parts];\n}\nasync function renderDotpromptToParts(registry, promptFn, input, session, options, renderOptions) {\n  const renderred = await promptFn({\n    input,\n    context: {\n      ...renderOptions?.context || (0, import_core.getContext)(registry),\n      state: session?.state\n    }\n  });\n  if (renderred.messages.length !== 1) {\n    throw new Error(\"parts tempate must produce only one message\");\n  }\n  return renderred.messages[0].content;\n}\nfunction isExecutablePrompt(obj) {\n  return !!obj?.render && !!obj?.asTool && !!obj?.stream;\n}\nfunction loadPromptFolder(registry, dir = \"./prompts\", ns) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  if ((0, import_fs.existsSync)(promptsPath)) {\n    loadPromptFolderRecursively(registry, dir, ns, \"\");\n  }\n}\nfunction loadPromptFolderRecursively(registry, dir, ns, subDir) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  const dirEnts = (0, import_fs.readdirSync)((0, import_path.join)(promptsPath, subDir), {\n    withFileTypes: true\n  });\n  for (const dirEnt of dirEnts) {\n    const parentPath = (0, import_path.join)(promptsPath, subDir);\n    let fileName = dirEnt.name;\n    if (dirEnt.isFile() && fileName.endsWith(\".prompt\")) {\n      if (fileName.startsWith(\"_\")) {\n        const partialName = fileName.substring(1, fileName.length - 7);\n        definePartial(\n          registry,\n          partialName,\n          (0, import_fs.readFileSync)((0, import_path.join)(parentPath, fileName), {\n            encoding: \"utf8\"\n          })\n        );\n        import_logging.logger.debug(\n          `Registered Dotprompt partial \"${partialName}\" from \"${(0, import_path.join)(parentPath, fileName)}\"`\n        );\n      } else {\n        loadPrompt(\n          registry,\n          promptsPath,\n          fileName,\n          subDir ? `${subDir}/` : \"\",\n          ns\n        );\n      }\n    } else if (dirEnt.isDirectory()) {\n      loadPromptFolderRecursively(registry, dir, ns, (0, import_path.join)(subDir, fileName));\n    }\n  }\n}\nfunction definePartial(registry, name, source) {\n  registry.dotprompt.definePartial(name, source);\n}\nfunction defineHelper(registry, name, fn) {\n  registry.dotprompt.defineHelper(name, fn);\n}\nfunction loadPrompt(registry, path, filename, prefix = \"\", ns = \"dotprompt\") {\n  let name = `${prefix ?? \"\"}${(0, import_path.basename)(filename, \".prompt\")}`;\n  let variant = null;\n  if (name.includes(\".\")) {\n    const parts = name.split(\".\");\n    name = parts[0];\n    variant = parts[1];\n  }\n  const source = (0, import_fs.readFileSync)((0, import_path.join)(path, prefix ?? \"\", filename), \"utf8\");\n  const parsedPrompt = registry.dotprompt.parse(source);\n  definePromptAsync(\n    registry,\n    registryDefinitionKey(name, variant ?? void 0, ns),\n    // We use a lazy promise here because we only want prompt loaded when it's first used.\n    // This is important because otherwise the loading may happen before the user has configured\n    // all the schemas, etc., which will result in dotprompt.renderMetadata errors.\n    (0, import_async.lazy)(async () => {\n      const promptMetadata2 = await registry.dotprompt.renderMetadata(parsedPrompt);\n      if (variant) {\n        promptMetadata2.variant = variant;\n      }\n      if (promptMetadata2.output?.schema?.description === null) {\n        delete promptMetadata2.output.schema.description;\n      }\n      if (promptMetadata2.input?.schema?.description === null) {\n        delete promptMetadata2.input.schema.description;\n      }\n      return {\n        name: registryDefinitionKey(name, variant ?? void 0, ns),\n        model: promptMetadata2.model,\n        config: promptMetadata2.config,\n        tools: promptMetadata2.tools,\n        description: promptMetadata2.description,\n        output: {\n          jsonSchema: promptMetadata2.output?.schema,\n          format: promptMetadata2.output?.format\n        },\n        input: {\n          jsonSchema: promptMetadata2.input?.schema\n        },\n        metadata: {\n          ...promptMetadata2.metadata,\n          type: \"prompt\",\n          prompt: {\n            ...promptMetadata2,\n            template: parsedPrompt.template\n          }\n        },\n        maxTurns: promptMetadata2.raw?.[\"maxTurns\"],\n        toolChoice: promptMetadata2.raw?.[\"toolChoice\"],\n        returnToolRequests: promptMetadata2.raw?.[\"returnToolRequests\"],\n        messages: parsedPrompt.template\n      };\n    })\n  );\n}\nasync function prompt(registry, name, options) {\n  return await lookupPrompt(\n    registry,\n    name,\n    options?.variant\n  );\n}\nfunction registryLookupKey(name, variant, ns) {\n  return `/prompt/${registryDefinitionKey(name, variant, ns)}`;\n}\nasync function lookupPrompt(registry, name, variant) {\n  let registryPrompt = await registry.lookupAction(\n    registryLookupKey(name, variant)\n  );\n  if (registryPrompt) {\n    return registryPrompt.__executablePrompt;\n  }\n  throw new import_core.GenkitError({\n    status: \"NOT_FOUND\",\n    message: `Prompt ${name + (variant ? ` (variant ${variant})` : \"\")} not found`\n  });\n}\nfunction registryDefinitionKey(name, variant, ns) {\n  return `${ns ? `${ns}/` : \"\"}${name}${variant ? `.${variant}` : \"\"}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=prompt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/reranker.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reranker_exports = {};\n__export(reranker_exports, {\n  CommonRerankerOptionsSchema: () => CommonRerankerOptionsSchema,\n  RankedDocument: () => RankedDocument,\n  RankedDocumentDataSchema: () => RankedDocumentDataSchema,\n  RankedDocumentMetadataSchema: () => RankedDocumentMetadataSchema,\n  RerankerInfoSchema: () => RerankerInfoSchema,\n  defineReranker: () => defineReranker,\n  rerank: () => rerank,\n  rerankerRef: () => rerankerRef\n});\nmodule.exports = __toCommonJS(reranker_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nconst RankedDocumentMetadataSchema = import_core.z.object({\n  score: import_core.z.number()\n  // Enforces that 'score' must be a number\n}).passthrough();\nconst RankedDocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(import_document.PartSchema),\n  metadata: RankedDocumentMetadataSchema\n});\nclass RankedDocument extends import_retriever.Document {\n  content;\n  metadata;\n  constructor(data) {\n    super(data);\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n  /**\n   * Returns the score of the document.\n   * @returns The score of the document.\n   */\n  score() {\n    return this.metadata.score;\n  }\n}\nconst RerankerRequestSchema = import_core.z.object({\n  query: import_retriever.DocumentDataSchema,\n  documents: import_core.z.array(import_retriever.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RerankerResponseSchema = import_core.z.object({\n  documents: import_core.z.array(RankedDocumentDataSchema)\n});\nconst RerankerInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction rerankerWithMetadata(reranker, configSchema) {\n  const withMeta = reranker;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineReranker(registry, options, runner) {\n  const reranker = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"reranker\",\n      name: options.name,\n      inputSchema: options.configSchema ? RerankerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RerankerRequestSchema,\n      outputSchema: RerankerResponseSchema,\n      metadata: {\n        type: \"reranker\",\n        info: options.info,\n        reranker: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      new import_retriever.Document(i.query),\n      i.documents.map((d) => new import_retriever.Document(d)),\n      i.options\n    )\n  );\n  const rwm = rerankerWithMetadata(\n    reranker,\n    options.configSchema\n  );\n  return rwm;\n}\nasync function rerank(registry, params) {\n  let reranker;\n  if (typeof params.reranker === \"string\") {\n    reranker = await registry.lookupAction(`/reranker/${params.reranker}`);\n  } else if (Object.hasOwnProperty.call(params.reranker, \"info\")) {\n    reranker = await registry.lookupAction(`/reranker/${params.reranker.name}`);\n  } else {\n    reranker = params.reranker;\n  }\n  if (!reranker) {\n    throw new Error(\"Unable to resolve the reranker\");\n  }\n  const response = await reranker({\n    query: typeof params.query === \"string\" ? import_retriever.Document.fromText(params.query) : params.query,\n    documents: params.documents,\n    options: params.options\n  });\n  return response.documents.map((d) => new RankedDocument(d));\n}\nconst CommonRerankerOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to rerank\").optional()\n});\nfunction rerankerRef(options) {\n  return { ...options };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reranker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/retriever.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar retriever_exports = {};\n__export(retriever_exports, {\n  CommonRetrieverOptionsSchema: () => CommonRetrieverOptionsSchema,\n  Document: () => import_document2.Document,\n  DocumentDataSchema: () => import_document2.DocumentDataSchema,\n  IndexerInfoSchema: () => IndexerInfoSchema,\n  RetrieverInfoSchema: () => RetrieverInfoSchema,\n  defineIndexer: () => defineIndexer,\n  defineRetriever: () => defineRetriever,\n  defineSimpleRetriever: () => defineSimpleRetriever,\n  index: () => index,\n  indexerRef: () => indexerRef,\n  retrieve: () => retrieve,\n  retrieverRef: () => retrieverRef\n});\nmodule.exports = __toCommonJS(retriever_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_document2 = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst RetrieverRequestSchema = import_core.z.object({\n  query: import_document.DocumentDataSchema,\n  options: import_core.z.any().optional()\n});\nconst RetrieverResponseSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema)\n  // TODO: stats, etc.\n});\nconst IndexerRequestSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RetrieverInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction retrieverWithMetadata(retriever, configSchema) {\n  const withMeta = retriever;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction indexerWithMetadata(indexer, configSchema) {\n  const withMeta = indexer;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineRetriever(registry, options, runner) {\n  const retriever = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"retriever\",\n      name: options.name,\n      inputSchema: options.configSchema ? RetrieverRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RetrieverRequestSchema,\n      outputSchema: RetrieverResponseSchema,\n      metadata: {\n        type: \"retriever\",\n        info: options.info,\n        retriever: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(new import_document.Document(i.query), i.options)\n  );\n  const rwm = retrieverWithMetadata(\n    retriever,\n    options.configSchema\n  );\n  return rwm;\n}\nfunction defineIndexer(registry, options, runner) {\n  const indexer = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"indexer\",\n      name: options.name,\n      inputSchema: options.configSchema ? IndexerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : IndexerRequestSchema,\n      outputSchema: import_core.z.void(),\n      metadata: {\n        type: \"indexer\",\n        embedderInfo: options.embedderInfo,\n        indexer: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      i.documents.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const iwm = indexerWithMetadata(\n    indexer,\n    options.configSchema\n  );\n  return iwm;\n}\nasync function retrieve(registry, params) {\n  let retriever;\n  if (typeof params.retriever === \"string\") {\n    retriever = await registry.lookupAction(`/retriever/${params.retriever}`);\n  } else if (Object.hasOwnProperty.call(params.retriever, \"info\")) {\n    retriever = await registry.lookupAction(\n      `/retriever/${params.retriever.name}`\n    );\n  } else {\n    retriever = params.retriever;\n  }\n  if (!retriever) {\n    throw new Error(\"Unable to resolve the retriever\");\n  }\n  const response = await retriever({\n    query: typeof params.query === \"string\" ? import_document.Document.fromText(params.query) : params.query,\n    options: params.options\n  });\n  return response.documents.map((d) => new import_document.Document(d));\n}\nasync function index(registry, params) {\n  let indexer;\n  if (typeof params.indexer === \"string\") {\n    indexer = await registry.lookupAction(`/indexer/${params.indexer}`);\n  } else if (Object.hasOwnProperty.call(params.indexer, \"info\")) {\n    indexer = await registry.lookupAction(`/indexer/${params.indexer.name}`);\n  } else {\n    indexer = params.indexer;\n  }\n  if (!indexer) {\n    throw new Error(\"Unable to utilize the provided indexer\");\n  }\n  return await indexer({\n    documents: params.documents,\n    options: params.options\n  });\n}\nconst CommonRetrieverOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to retrieve\").optional()\n});\nfunction retrieverRef(options) {\n  return { ...options };\n}\nconst IndexerInfoSchema = RetrieverInfoSchema;\nfunction indexerRef(options) {\n  return { ...options };\n}\nfunction itemToDocument(item, options) {\n  if (!item)\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Items returned from simple retriever must be non-null.`\n    });\n  if (typeof item === \"string\") return import_document.Document.fromText(item);\n  if (typeof options.content === \"function\") {\n    const transformed = options.content(item);\n    return typeof transformed === \"string\" ? import_document.Document.fromText(transformed) : new import_document.Document({ content: transformed });\n  }\n  if (typeof options.content === \"string\" && typeof item === \"object\")\n    return import_document.Document.fromText(item[options.content]);\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Cannot convert item to document without content option. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction itemToMetadata(item, options) {\n  if (typeof item === \"string\") return void 0;\n  if (Array.isArray(options.metadata) && typeof item === \"object\") {\n    const out = {};\n    options.metadata.forEach((key) => out[key] = item[key]);\n    return out;\n  }\n  if (typeof options.metadata === \"function\") return options.metadata(item);\n  if (!options.metadata && typeof item === \"object\") {\n    const out = { ...item };\n    if (typeof options.content === \"string\") delete out[options.content];\n    return out;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unable to extract metadata from item with supplied options. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction defineSimpleRetriever(registry, options, handler) {\n  return defineRetriever(\n    registry,\n    {\n      name: options.name,\n      configSchema: options.configSchema\n    },\n    async (query, config) => {\n      const result = await handler(query, config);\n      return {\n        documents: result.map((item) => {\n          const doc = itemToDocument(item, options);\n          if (typeof item !== \"string\")\n            doc.metadata = itemToMetadata(item, options);\n          return doc;\n        })\n      };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=retriever.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/session.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar session_exports = {};\n__export(session_exports, {\n  Session: () => Session,\n  SessionError: () => SessionError,\n  getCurrentSession: () => getCurrentSession,\n  inMemorySessionStore: () => inMemorySessionStore,\n  runWithSession: () => runWithSession\n});\nmodule.exports = __toCommonJS(session_exports);\nvar import_uuid = __webpack_require__(/*! uuid */ \"(action-browser)/./node_modules/uuid/dist/esm-node/index.js\");\nvar import_chat = __webpack_require__(/*! ./chat.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nclass Session {\n  constructor(registry, options) {\n    this.registry = registry;\n    this.id = options?.id ?? (0, import_uuid.v4)();\n    this.sessionData = options?.sessionData ?? {\n      id: this.id\n    };\n    if (!this.sessionData) {\n      this.sessionData = { id: this.id };\n    }\n    if (!this.sessionData.threads) {\n      this.sessionData.threads = {};\n    }\n    this.store = options?.store ?? new InMemorySessionStore();\n  }\n  id;\n  sessionData;\n  store;\n  get state() {\n    return this.sessionData.state;\n  }\n  /**\n   * Update session state data.\n   */\n  async updateState(data) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    sessionData.state = data;\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  /**\n   * Update messages for a given thread.\n   */\n  async updateMessages(thread, messages) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    if (!sessionData.threads) {\n      sessionData.threads = {};\n    }\n    sessionData.threads[thread] = messages.map(\n      (m) => m.toJSON ? m.toJSON() : m\n    );\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  chat(optionsOrPreambleOrThreadName, maybeOptionsOrPreamble, maybeOptions) {\n    return runWithSession(this.registry, this, () => {\n      let options;\n      let threadName = import_chat.MAIN_THREAD;\n      let preamble;\n      if (optionsOrPreambleOrThreadName) {\n        if (typeof optionsOrPreambleOrThreadName === \"string\") {\n          threadName = optionsOrPreambleOrThreadName;\n        } else if ((0, import_index.isExecutablePrompt)(optionsOrPreambleOrThreadName)) {\n          preamble = optionsOrPreambleOrThreadName;\n        } else {\n          options = optionsOrPreambleOrThreadName;\n        }\n      }\n      if (maybeOptionsOrPreamble) {\n        if ((0, import_index.isExecutablePrompt)(maybeOptionsOrPreamble)) {\n          preamble = maybeOptionsOrPreamble;\n        } else {\n          options = maybeOptionsOrPreamble;\n        }\n      }\n      if (maybeOptions) {\n        options = maybeOptions;\n      }\n      let requestBase;\n      if (preamble) {\n        const renderOptions = options;\n        requestBase = preamble.render(renderOptions?.input, renderOptions).then((rb) => {\n          return {\n            ...rb,\n            messages: (0, import_index.tagAsPreamble)(rb?.messages)\n          };\n        });\n      } else {\n        const baseOptions = { ...options };\n        const messages = [];\n        if (baseOptions.system) {\n          messages.push({\n            role: \"system\",\n            content: import_index.Message.parseContent(baseOptions.system)\n          });\n        }\n        delete baseOptions.system;\n        if (baseOptions.messages) {\n          messages.push(...baseOptions.messages);\n        }\n        baseOptions.messages = (0, import_index.tagAsPreamble)(messages);\n        requestBase = Promise.resolve(baseOptions);\n      }\n      return new import_chat.Chat(this, requestBase, {\n        thread: threadName,\n        id: this.id,\n        messages: (this.sessionData?.threads && this.sessionData?.threads[threadName]) ?? []\n      });\n    });\n  }\n  /**\n   * Executes provided function within this session context allowing calling\n   * `ai.currentSession().state`\n   */\n  run(fn) {\n    return runWithSession(this.registry, this, fn);\n  }\n  toJSON() {\n    return this.sessionData;\n  }\n}\nconst sessionAlsKey = \"ai.session\";\nfunction runWithSession(registry, session, fn) {\n  return registry.asyncStore.run(sessionAlsKey, session, fn);\n}\nfunction getCurrentSession(registry) {\n  return registry.asyncStore.getStore(sessionAlsKey);\n}\nclass SessionError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\nfunction inMemorySessionStore() {\n  return new InMemorySessionStore();\n}\nclass InMemorySessionStore {\n  data = {};\n  async get(sessionId) {\n    return this.data[sessionId];\n  }\n  async save(sessionId, sessionData) {\n    this.data[sessionId] = sessionData;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=session.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/tool.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tool_exports = {};\n__export(tool_exports, {\n  ToolInterruptError: () => ToolInterruptError,\n  asTool: () => asTool,\n  defineInterrupt: () => defineInterrupt,\n  defineTool: () => defineTool,\n  dynamicTool: () => dynamicTool,\n  isToolRequest: () => isToolRequest,\n  isToolResponse: () => isToolResponse,\n  lookupToolByName: () => lookupToolByName,\n  resolveTools: () => resolveTools,\n  toToolDefinition: () => toToolDefinition\n});\nmodule.exports = __toCommonJS(tool_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nfunction asTool(registry, action2) {\n  if (action2.__action?.metadata?.type === \"tool\") {\n    return action2;\n  }\n  const fn = (input) => {\n    (0, import_tracing.setCustomMetadataAttributes)(registry, { subtype: \"tool\" });\n    return action2(input);\n  };\n  fn.__action = {\n    ...action2.__action,\n    metadata: { ...action2.__action.metadata, type: \"tool\" }\n  };\n  return fn;\n}\nasync function resolveTools(registry, tools) {\n  if (!tools || tools.length === 0) {\n    return [];\n  }\n  return await Promise.all(\n    tools.map(async (ref) => {\n      if (typeof ref === \"string\") {\n        return await lookupToolByName(registry, ref);\n      } else if (ref.__action) {\n        return asTool(registry, ref);\n      } else if (typeof ref.asTool === \"function\") {\n        return await ref.asTool();\n      } else if (ref.name) {\n        return await lookupToolByName(\n          registry,\n          ref.metadata?.originalName || ref.name\n        );\n      }\n      throw new Error(\"Tools must be strings, tool definitions, or actions.\");\n    })\n  );\n}\nasync function lookupToolByName(registry, name) {\n  let tool = await registry.lookupAction(name) || await registry.lookupAction(`/tool/${name}`) || await registry.lookupAction(`/prompt/${name}`);\n  if (!tool) {\n    throw new Error(`Tool ${name} not found`);\n  }\n  return tool;\n}\nfunction toToolDefinition(tool) {\n  const originalName = tool.__action.name;\n  let name = originalName;\n  if (originalName.includes(\"/\")) {\n    name = originalName.substring(originalName.lastIndexOf(\"/\") + 1);\n  }\n  const out = {\n    name,\n    description: tool.__action.description || \"\",\n    outputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool.__action.outputSchema ?? import_core.z.void(),\n      jsonSchema: tool.__action.outputJsonSchema\n    }),\n    inputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool.__action.inputSchema ?? import_core.z.void(),\n      jsonSchema: tool.__action.inputJsonSchema\n    })\n  };\n  if (originalName !== name) {\n    out.metadata = { originalName };\n  }\n  return out;\n}\nfunction defineTool(registry, config, fn) {\n  const a = (0, import_core.defineAction)(\n    registry,\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\" }\n    },\n    (i, runOptions) => {\n      return fn(i, {\n        ...runOptions,\n        context: { ...runOptions.context },\n        interrupt: interruptTool(registry)\n      });\n    }\n  );\n  implementTool(a, config, registry);\n  return a;\n}\nfunction implementTool(a, config, registry) {\n  a.respond = (interrupt, responseData, options) => {\n    (0, import_core.assertUnstable)(\n      registry,\n      \"beta\",\n      \"The 'tool.reply' method is part of the 'interrupts' beta feature.\"\n    );\n    (0, import_schema.parseSchema)(responseData, {\n      jsonSchema: config.outputJsonSchema,\n      schema: config.outputSchema\n    });\n    return {\n      toolResponse: (0, import_core.stripUndefinedProps)({\n        name: interrupt.toolRequest.name,\n        ref: interrupt.toolRequest.ref,\n        output: responseData\n      }),\n      metadata: {\n        interruptResponse: options?.metadata || true\n      }\n    };\n  };\n  a.restart = (interrupt, resumedMetadata, options) => {\n    (0, import_core.assertUnstable)(\n      registry,\n      \"beta\",\n      \"The 'tool.restart' method is part of the 'interrupts' beta feature.\"\n    );\n    let replaceInput = options?.replaceInput;\n    if (replaceInput) {\n      replaceInput = (0, import_schema.parseSchema)(replaceInput, {\n        schema: config.inputSchema,\n        jsonSchema: config.inputJsonSchema\n      });\n    }\n    return {\n      toolRequest: (0, import_core.stripUndefinedProps)({\n        name: interrupt.toolRequest.name,\n        ref: interrupt.toolRequest.ref,\n        input: replaceInput || interrupt.toolRequest.input\n      }),\n      metadata: (0, import_core.stripUndefinedProps)({\n        ...interrupt.metadata,\n        resumed: resumedMetadata || true,\n        // annotate the original input if replacing it\n        replacedInput: replaceInput ? interrupt.toolRequest.input : void 0\n      })\n    };\n  };\n}\nfunction isToolRequest(part) {\n  return !!part.toolRequest;\n}\nfunction isToolResponse(part) {\n  return !!part.toolResponse;\n}\nfunction defineInterrupt(registry, config) {\n  const { requestMetadata, ...toolConfig } = config;\n  return defineTool(\n    registry,\n    toolConfig,\n    async (input, { interrupt }) => {\n      if (!config.requestMetadata) interrupt();\n      else if (typeof config.requestMetadata === \"object\")\n        interrupt(config.requestMetadata);\n      else interrupt(await Promise.resolve(config.requestMetadata(input)));\n    }\n  );\n}\nclass ToolInterruptError extends Error {\n  constructor(metadata) {\n    super();\n    this.metadata = metadata;\n    this.name = \"ToolInterruptError\";\n  }\n}\nfunction interruptTool(registry) {\n  return (metadata) => {\n    (0, import_core.assertUnstable)(registry, \"beta\", \"Tool interrupts are a beta feature.\");\n    throw new ToolInterruptError(metadata);\n  };\n}\nfunction dynamicTool(ai, config, fn) {\n  const a = (0, import_core.action)(\n    ai.registry,\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\", dynamic: true }\n    },\n    (i, runOptions) => {\n      const interrupt = interruptTool(ai.registry);\n      if (fn) {\n        return fn(i, {\n          ...runOptions,\n          context: { ...runOptions.context },\n          interrupt\n        });\n      }\n      return interrupt();\n    }\n  );\n  implementTool(a, config, ai.registry);\n  return a;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/types.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  LlmResponseSchema: () => LlmResponseSchema,\n  LlmStatsSchema: () => LlmStatsSchema,\n  ToolCallSchema: () => ToolCallSchema,\n  ToolSchema: () => ToolSchema,\n  toToolWireFormat: () => toToolWireFormat\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst LlmStatsSchema = import_core.z.object({\n  latencyMs: import_core.z.number().optional(),\n  inputTokenCount: import_core.z.number().optional(),\n  outputTokenCount: import_core.z.number().optional()\n});\nconst ToolSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string().optional(),\n  schema: import_core.z.any()\n});\nconst ToolCallSchema = import_core.z.object({\n  toolName: import_core.z.string(),\n  arguments: import_core.z.any()\n});\nconst LlmResponseSchema = import_core.z.object({\n  completion: import_core.z.string(),\n  toolCalls: import_core.z.array(ToolCallSchema).optional(),\n  stats: LlmStatsSchema\n});\nfunction toToolWireFormat(actions) {\n  if (!actions) return void 0;\n  return actions.map((a) => {\n    return {\n      name: a.__action.name,\n      description: a.__action.description,\n      schema: {\n        input: (0, import_schema.toJsonSchema)({\n          schema: a.__action.inputSchema,\n          jsonSchema: a.__action.inputJsonSchema\n        }),\n        output: (0, import_schema.toJsonSchema)({\n          schema: a.__action.outputSchema,\n          jsonSchema: a.__action.outputJsonSchema\n        })\n      }\n    };\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLE1BQU0sQ0FNTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi90eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdHlwZXNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodHlwZXNfZXhwb3J0cywge1xuICBMbG1SZXNwb25zZVNjaGVtYTogKCkgPT4gTGxtUmVzcG9uc2VTY2hlbWEsXG4gIExsbVN0YXRzU2NoZW1hOiAoKSA9PiBMbG1TdGF0c1NjaGVtYSxcbiAgVG9vbENhbGxTY2hlbWE6ICgpID0+IFRvb2xDYWxsU2NoZW1hLFxuICBUb29sU2NoZW1hOiAoKSA9PiBUb29sU2NoZW1hLFxuICB0b1Rvb2xXaXJlRm9ybWF0OiAoKSA9PiB0b1Rvb2xXaXJlRm9ybWF0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHR5cGVzX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfc2NoZW1hID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS9zY2hlbWFcIik7XG5jb25zdCBMbG1TdGF0c1NjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgbGF0ZW5jeU1zOiBpbXBvcnRfY29yZS56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIGlucHV0VG9rZW5Db3VudDogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBvdXRwdXRUb2tlbkNvdW50OiBpbXBvcnRfY29yZS56Lm51bWJlcigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgVG9vbFNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X2NvcmUuei5zdHJpbmcoKSxcbiAgZGVzY3JpcHRpb246IGltcG9ydF9jb3JlLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc2NoZW1hOiBpbXBvcnRfY29yZS56LmFueSgpXG59KTtcbmNvbnN0IFRvb2xDYWxsU2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICB0b29sTmFtZTogaW1wb3J0X2NvcmUuei5zdHJpbmcoKSxcbiAgYXJndW1lbnRzOiBpbXBvcnRfY29yZS56LmFueSgpXG59KTtcbmNvbnN0IExsbVJlc3BvbnNlU2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICBjb21wbGV0aW9uOiBpbXBvcnRfY29yZS56LnN0cmluZygpLFxuICB0b29sQ2FsbHM6IGltcG9ydF9jb3JlLnouYXJyYXkoVG9vbENhbGxTY2hlbWEpLm9wdGlvbmFsKCksXG4gIHN0YXRzOiBMbG1TdGF0c1NjaGVtYVxufSk7XG5mdW5jdGlvbiB0b1Rvb2xXaXJlRm9ybWF0KGFjdGlvbnMpIHtcbiAgaWYgKCFhY3Rpb25zKSByZXR1cm4gdm9pZCAwO1xuICByZXR1cm4gYWN0aW9ucy5tYXAoKGEpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogYS5fX2FjdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGEuX19hY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBzY2hlbWE6IHtcbiAgICAgICAgaW5wdXQ6ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoe1xuICAgICAgICAgIHNjaGVtYTogYS5fX2FjdGlvbi5pbnB1dFNjaGVtYSxcbiAgICAgICAgICBqc29uU2NoZW1hOiBhLl9fYWN0aW9uLmlucHV0SnNvblNjaGVtYVxuICAgICAgICB9KSxcbiAgICAgICAgb3V0cHV0OiAoMCwgaW1wb3J0X3NjaGVtYS50b0pzb25TY2hlbWEpKHtcbiAgICAgICAgICBzY2hlbWE6IGEuX19hY3Rpb24ub3V0cHV0U2NoZW1hLFxuICAgICAgICAgIGpzb25TY2hlbWE6IGEuX19hY3Rpb24ub3V0cHV0SnNvblNjaGVtYVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIExsbVJlc3BvbnNlU2NoZW1hLFxuICBMbG1TdGF0c1NjaGVtYSxcbiAgVG9vbENhbGxTY2hlbWEsXG4gIFRvb2xTY2hlbWEsXG4gIHRvVG9vbFdpcmVGb3JtYXRcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/__codegen/version.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar version_exports = {};\n__export(version_exports, {\n  version: () => version\n});\nmodule.exports = __toCommonJS(version_exports);\nconst version = \"1.8.0\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL19fY29kZWdlbi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL19fY29kZWdlbi92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB2ZXJzaW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHZlcnNpb25fZXhwb3J0cywge1xuICB2ZXJzaW9uOiAoKSA9PiB2ZXJzaW9uXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHZlcnNpb25fZXhwb3J0cyk7XG5jb25zdCB2ZXJzaW9uID0gXCIxLjguMFwiO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZlcnNpb25cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/action.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/action.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  StatusCodes: () => import_statusTypes.StatusCodes,\n  StatusSchema: () => import_statusTypes.StatusSchema,\n  action: () => action,\n  actionWithMiddleware: () => actionWithMiddleware,\n  defineAction: () => defineAction,\n  defineActionAsync: () => defineActionAsync,\n  getStreamingCallback: () => getStreamingCallback,\n  isInRuntimeContext: () => isInRuntimeContext,\n  runInActionRuntimeContext: () => runInActionRuntimeContext,\n  runOutsideActionRuntimeContext: () => runOutsideActionRuntimeContext,\n  runWithStreamingCallback: () => runWithStreamingCallback,\n  sentinelNoopStreamingCallback: () => sentinelNoopStreamingCallback\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_async = __webpack_require__(/*! ./async.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nfunction actionWithMiddleware(action2, middleware) {\n  const wrapped = async (req) => {\n    return (await wrapped.run(req)).result;\n  };\n  wrapped.__action = action2.__action;\n  wrapped.__registry = action2.__registry;\n  wrapped.run = async (req, options) => {\n    let telemetry;\n    const dispatch = async (index, req2, opts) => {\n      if (index === middleware.length) {\n        const result = await action2.run(req2, opts);\n        telemetry = result.telemetry;\n        return result.result;\n      }\n      const currentMiddleware = middleware[index];\n      if (currentMiddleware.length === 3) {\n        return currentMiddleware(\n          req2,\n          opts,\n          async (modifiedReq, modifiedOptions) => dispatch(index + 1, modifiedReq || req2, modifiedOptions || opts)\n        );\n      } else if (currentMiddleware.length === 2) {\n        return currentMiddleware(\n          req2,\n          async (modifiedReq) => dispatch(index + 1, modifiedReq || req2, opts)\n        );\n      } else {\n        throw new Error(\"unspported middleware function shape\");\n      }\n    };\n    wrapped.stream = action2.stream;\n    return { result: await dispatch(0, req, options), telemetry };\n  };\n  return wrapped;\n}\nfunction action(registry, config, fn) {\n  const actionName = typeof config.name === \"string\" ? config.name : `${config.name.pluginId}/${config.name.actionId}`;\n  const actionFn = async (input, options) => {\n    return (await actionFn.run(input, options)).result;\n  };\n  actionFn.__registry = registry;\n  actionFn.__action = {\n    name: actionName,\n    description: config.description,\n    inputSchema: config.inputSchema,\n    inputJsonSchema: config.inputJsonSchema,\n    outputSchema: config.outputSchema,\n    outputJsonSchema: config.outputJsonSchema,\n    streamSchema: config.streamSchema,\n    metadata: config.metadata,\n    actionType: config.actionType\n  };\n  actionFn.run = async (input, options) => {\n    input = (0, import_schema.parseSchema)(input, {\n      schema: config.inputSchema,\n      jsonSchema: config.inputJsonSchema\n    });\n    let traceId;\n    let spanId;\n    let output = await (0, import_tracing.newTrace)(\n      registry,\n      {\n        name: actionName,\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"action\",\n          \"genkit:metadata:subtype\": config.actionType,\n          ...options?.telemetryLabels\n        }\n      },\n      async (metadata, span) => {\n        (0, import_tracing.setCustomMetadataAttributes)(registry, { subtype: config.actionType });\n        if (options?.context) {\n          (0, import_tracing.setCustomMetadataAttributes)(registry, {\n            context: JSON.stringify(options.context)\n          });\n        }\n        traceId = span.spanContext().traceId;\n        spanId = span.spanContext().spanId;\n        metadata.name = actionName;\n        metadata.input = input;\n        try {\n          const actionFn2 = () => fn(input, {\n            ...options,\n            // Context can either be explicitly set, or inherited from the parent action.\n            context: options?.context ?? (0, import_context.getContext)(registry),\n            sendChunk: options?.onChunk ?? sentinelNoopStreamingCallback,\n            trace: {\n              traceId,\n              spanId\n            }\n          });\n          const output2 = await (0, import_context.runWithContext)(\n            registry,\n            options?.context,\n            actionFn2\n          );\n          metadata.output = JSON.stringify(output2);\n          return output2;\n        } catch (err) {\n          if (typeof err === \"object\") {\n            err.traceId = traceId;\n          }\n          throw err;\n        }\n      }\n    );\n    output = (0, import_schema.parseSchema)(output, {\n      schema: config.outputSchema,\n      jsonSchema: config.outputJsonSchema\n    });\n    return {\n      result: output,\n      telemetry: {\n        traceId,\n        spanId\n      }\n    };\n  };\n  actionFn.stream = (input, opts) => {\n    let chunkStreamController;\n    const chunkStream = new ReadableStream({\n      start(controller) {\n        chunkStreamController = controller;\n      },\n      pull() {\n      },\n      cancel() {\n      }\n    });\n    const invocationPromise = actionFn.run(config.inputSchema ? config.inputSchema.parse(input) : input, {\n      onChunk: (chunk) => {\n        chunkStreamController.enqueue(chunk);\n      },\n      context: opts?.context\n    }).then((s) => s.result).finally(() => {\n      chunkStreamController.close();\n    });\n    return {\n      output: invocationPromise,\n      stream: async function* () {\n        const reader = chunkStream.getReader();\n        while (true) {\n          const chunk = await reader.read();\n          if (chunk.value) {\n            yield chunk.value;\n          }\n          if (chunk.done) {\n            break;\n          }\n        }\n        return await invocationPromise;\n      }()\n    };\n  };\n  if (config.use) {\n    return actionWithMiddleware(actionFn, config.use);\n  }\n  return actionFn;\n}\nfunction defineAction(registry, config, fn) {\n  if (isInRuntimeContext(registry)) {\n    throw new Error(\n      \"Cannot define new actions at runtime.\\nSee: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md\"\n    );\n  }\n  const act = action(\n    registry,\n    config,\n    async (i, options) => {\n      await registry.initializeAllPlugins();\n      return await runInActionRuntimeContext(registry, () => fn(i, options));\n    }\n  );\n  act.__action.actionType = config.actionType;\n  registry.registerAction(config.actionType, act);\n  return act;\n}\nfunction defineActionAsync(registry, actionType, name, config, onInit) {\n  const actionName = typeof name === \"string\" ? name : `${name.pluginId}/${name.actionId}`;\n  const actionPromise = (0, import_async.lazy)(\n    () => config.then((resolvedConfig) => {\n      const act = action(\n        registry,\n        resolvedConfig,\n        async (i, options) => {\n          await registry.initializeAllPlugins();\n          return await runInActionRuntimeContext(\n            registry,\n            () => resolvedConfig.fn(i, options)\n          );\n        }\n      );\n      act.__action.actionType = actionType;\n      onInit?.(act);\n      return act;\n    })\n  );\n  registry.registerActionAsync(actionType, actionName, actionPromise);\n  return actionPromise;\n}\nconst streamingAlsKey = \"core.action.streamingCallback\";\nconst sentinelNoopStreamingCallback = () => null;\nfunction runWithStreamingCallback(registry, streamingCallback, fn) {\n  return registry.asyncStore.run(\n    streamingAlsKey,\n    streamingCallback || sentinelNoopStreamingCallback,\n    fn\n  );\n}\nfunction getStreamingCallback(registry) {\n  const cb = registry.asyncStore.getStore(streamingAlsKey);\n  if (cb === sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return cb;\n}\nconst runtimeContextAslKey = \"core.action.runtimeContext\";\nfunction isInRuntimeContext(registry) {\n  return registry.asyncStore.getStore(runtimeContextAslKey) === \"runtime\";\n}\nfunction runInActionRuntimeContext(registry, fn) {\n  return registry.asyncStore.run(runtimeContextAslKey, \"runtime\", fn);\n}\nfunction runOutsideActionRuntimeContext(registry, fn) {\n  return registry.asyncStore.run(runtimeContextAslKey, \"outside\", fn);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/async.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/async.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar async_exports = {};\n__export(async_exports, {\n  Channel: () => Channel,\n  LazyPromise: () => LazyPromise,\n  lazy: () => lazy\n});\nmodule.exports = __toCommonJS(async_exports);\nfunction createTask() {\n  let resolve, reject;\n  let promise = new Promise((res, rej) => [resolve, reject] = [res, rej]);\n  return {\n    resolve,\n    reject,\n    promise\n  };\n}\nclass Channel {\n  ready = createTask();\n  buffer = [];\n  err = null;\n  send(value) {\n    this.buffer.push(value);\n    this.ready.resolve();\n  }\n  close() {\n    this.buffer.push(null);\n    this.ready.resolve();\n  }\n  error(err) {\n    this.err = err;\n    this.ready.reject(err);\n  }\n  [Symbol.asyncIterator]() {\n    return {\n      next: async () => {\n        if (this.err) {\n          throw this.err;\n        }\n        if (!this.buffer.length) {\n          await this.ready.promise;\n        }\n        const value = this.buffer.shift();\n        if (!this.buffer.length) {\n          this.ready = createTask();\n        }\n        return {\n          value,\n          done: !value\n        };\n      }\n    };\n  }\n}\nclass LazyPromise {\n  executor;\n  promise;\n  constructor(executor) {\n    this.executor = executor;\n  }\n  then(onfulfilled, onrejected) {\n    this.promise ??= new Promise(this.executor);\n    return this.promise.then(onfulfilled, onrejected);\n  }\n}\nfunction lazy(fn) {\n  return new LazyPromise((resolve, reject) => {\n    try {\n      resolve(fn());\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=async.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLE1BQU0sQ0FJTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBhc3luY19leHBvcnRzID0ge307XG5fX2V4cG9ydChhc3luY19leHBvcnRzLCB7XG4gIENoYW5uZWw6ICgpID0+IENoYW5uZWwsXG4gIExhenlQcm9taXNlOiAoKSA9PiBMYXp5UHJvbWlzZSxcbiAgbGF6eTogKCkgPT4gbGF6eVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhhc3luY19leHBvcnRzKTtcbmZ1bmN0aW9uIGNyZWF0ZVRhc2soKSB7XG4gIGxldCByZXNvbHZlLCByZWplY3Q7XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiBbcmVzb2x2ZSwgcmVqZWN0XSA9IFtyZXMsIHJlal0pO1xuICByZXR1cm4ge1xuICAgIHJlc29sdmUsXG4gICAgcmVqZWN0LFxuICAgIHByb21pc2VcbiAgfTtcbn1cbmNsYXNzIENoYW5uZWwge1xuICByZWFkeSA9IGNyZWF0ZVRhc2soKTtcbiAgYnVmZmVyID0gW107XG4gIGVyciA9IG51bGw7XG4gIHNlbmQodmFsdWUpIHtcbiAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICB0aGlzLnJlYWR5LnJlc29sdmUoKTtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICB0aGlzLmJ1ZmZlci5wdXNoKG51bGwpO1xuICAgIHRoaXMucmVhZHkucmVzb2x2ZSgpO1xuICB9XG4gIGVycm9yKGVycikge1xuICAgIHRoaXMuZXJyID0gZXJyO1xuICAgIHRoaXMucmVhZHkucmVqZWN0KGVycik7XG4gIH1cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dDogYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5lcnIpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLmVycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgIGF3YWl0IHRoaXMucmVhZHkucHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5yZWFkeSA9IGNyZWF0ZVRhc2soKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGRvbmU6ICF2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmNsYXNzIExhenlQcm9taXNlIHtcbiAgZXhlY3V0b3I7XG4gIHByb21pc2U7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5leGVjdXRvciA9IGV4ZWN1dG9yO1xuICB9XG4gIHRoZW4ob25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpIHtcbiAgICB0aGlzLnByb21pc2UgPz89IG5ldyBQcm9taXNlKHRoaXMuZXhlY3V0b3IpO1xuICAgIHJldHVybiB0aGlzLnByb21pc2UudGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxhenkoZm4pIHtcbiAgcmV0dXJuIG5ldyBMYXp5UHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGUpO1xuICAgIH1cbiAgfSk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2hhbm5lbCxcbiAgTGF6eVByb21pc2UsXG4gIGxhenlcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/context.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/context.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar context_exports = {};\n__export(context_exports, {\n  apiKey: () => apiKey,\n  getContext: () => getContext,\n  runWithContext: () => runWithContext\n});\nmodule.exports = __toCommonJS(context_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst contextAlsKey = \"core.auth.context\";\nfunction runWithContext(registry, context, fn) {\n  if (context === void 0) {\n    return fn();\n  }\n  return registry.asyncStore.run(\n    contextAlsKey,\n    context,\n    () => (0, import_action.runInActionRuntimeContext)(registry, fn)\n  );\n}\nfunction getContext(registry) {\n  if (registry.registry) {\n    registry = registry.registry;\n  }\n  registry = registry;\n  return registry.asyncStore.getStore(contextAlsKey);\n}\nfunction apiKey(valueOrPolicy) {\n  return async function(request) {\n    const context = {\n      auth: { apiKey: request.headers[\"authorization\"] }\n    };\n    if (typeof valueOrPolicy === \"string\") {\n      if (!context.auth?.apiKey) {\n        console.error(\"THROWING UNAUTHENTICATED\");\n        throw new import_error.UserFacingError(\"UNAUTHENTICATED\", \"Unauthenticated\");\n      }\n      if (context.auth?.apiKey != valueOrPolicy) {\n        console.error(\"Throwing PERMISSION_DENIED\");\n        throw new import_error.UserFacingError(\"PERMISSION_DENIED\", \"Permission Denied\");\n      }\n    } else if (typeof valueOrPolicy === \"function\") {\n      await valueOrPolicy(context);\n    } else if (typeof valueOrPolicy !== \"undefined\") {\n      throw new Error(\n        `Invalid type ${typeof valueOrPolicy} passed to apiKey()`\n      );\n    }\n    return context;\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9jb250ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBjb250ZXh0X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNvbnRleHRfZXhwb3J0cywge1xuICBhcGlLZXk6ICgpID0+IGFwaUtleSxcbiAgZ2V0Q29udGV4dDogKCkgPT4gZ2V0Q29udGV4dCxcbiAgcnVuV2l0aENvbnRleHQ6ICgpID0+IHJ1bldpdGhDb250ZXh0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNvbnRleHRfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2FjdGlvbiA9IHJlcXVpcmUoXCIuL2FjdGlvbi5qc1wiKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbmNvbnN0IGNvbnRleHRBbHNLZXkgPSBcImNvcmUuYXV0aC5jb250ZXh0XCI7XG5mdW5jdGlvbiBydW5XaXRoQ29udGV4dChyZWdpc3RyeSwgY29udGV4dCwgZm4pIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBmbigpO1xuICB9XG4gIHJldHVybiByZWdpc3RyeS5hc3luY1N0b3JlLnJ1bihcbiAgICBjb250ZXh0QWxzS2V5LFxuICAgIGNvbnRleHQsXG4gICAgKCkgPT4gKDAsIGltcG9ydF9hY3Rpb24ucnVuSW5BY3Rpb25SdW50aW1lQ29udGV4dCkocmVnaXN0cnksIGZuKVxuICApO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChyZWdpc3RyeSkge1xuICBpZiAocmVnaXN0cnkucmVnaXN0cnkpIHtcbiAgICByZWdpc3RyeSA9IHJlZ2lzdHJ5LnJlZ2lzdHJ5O1xuICB9XG4gIHJlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gIHJldHVybiByZWdpc3RyeS5hc3luY1N0b3JlLmdldFN0b3JlKGNvbnRleHRBbHNLZXkpO1xufVxuZnVuY3Rpb24gYXBpS2V5KHZhbHVlT3JQb2xpY3kpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgYXV0aDogeyBhcGlLZXk6IHJlcXVlc3QuaGVhZGVyc1tcImF1dGhvcml6YXRpb25cIl0gfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZU9yUG9saWN5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAoIWNvbnRleHQuYXV0aD8uYXBpS2V5KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUSFJPV0lORyBVTkFVVEhFTlRJQ0FURURcIik7XG4gICAgICAgIHRocm93IG5ldyBpbXBvcnRfZXJyb3IuVXNlckZhY2luZ0Vycm9yKFwiVU5BVVRIRU5USUNBVEVEXCIsIFwiVW5hdXRoZW50aWNhdGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQuYXV0aD8uYXBpS2V5ICE9IHZhbHVlT3JQb2xpY3kpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRocm93aW5nIFBFUk1JU1NJT05fREVOSUVEXCIpO1xuICAgICAgICB0aHJvdyBuZXcgaW1wb3J0X2Vycm9yLlVzZXJGYWNpbmdFcnJvcihcIlBFUk1JU1NJT05fREVOSUVEXCIsIFwiUGVybWlzc2lvbiBEZW5pZWRcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVPclBvbGljeSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBhd2FpdCB2YWx1ZU9yUG9saWN5KGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlT3JQb2xpY3kgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgdHlwZSAke3R5cGVvZiB2YWx1ZU9yUG9saWN5fSBwYXNzZWQgdG8gYXBpS2V5KClgXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbiAgfTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBhcGlLZXksXG4gIGdldENvbnRleHQsXG4gIHJ1bldpdGhDb250ZXh0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/error.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/error.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar error_exports = {};\n__export(error_exports, {\n  GenkitError: () => GenkitError,\n  UnstableApiError: () => UnstableApiError,\n  UserFacingError: () => UserFacingError,\n  assertUnstable: () => assertUnstable,\n  getCallableJSON: () => getCallableJSON,\n  getErrorMessage: () => getErrorMessage,\n  getErrorStack: () => getErrorStack,\n  getHttpStatus: () => getHttpStatus\n});\nmodule.exports = __toCommonJS(error_exports);\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nclass GenkitError extends Error {\n  source;\n  status;\n  detail;\n  code;\n  // For easy printing, we wrap the error with information like the source\n  // and status, but that's redundant with JSON.\n  originalMessage;\n  constructor({\n    status,\n    message,\n    detail,\n    source\n  }) {\n    super(`${source ? `${source}: ` : \"\"}${status}: ${message}`);\n    this.originalMessage = message;\n    this.code = (0, import_statusTypes.httpStatusCode)(status);\n    this.status = status;\n    this.detail = detail;\n    this.name = \"GenkitError\";\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return {\n      // This error type is used by 3P authors with the field \"detail\",\n      // but the actual Callable protocol value is \"details\"\n      ...this.detail === void 0 ? {} : { details: this.detail },\n      status: this.status,\n      message: this.originalMessage\n    };\n  }\n}\nclass UnstableApiError extends GenkitError {\n  constructor(level, message) {\n    super({\n      status: \"FAILED_PRECONDITION\",\n      message: `${message ? message + \" \" : \"\"}This API requires '${level}' stability level.\n\nTo use this feature, initialize Genkit using \\`import {genkit} from \"genkit/${level}\"\\`.`\n    });\n    this.name = \"UnstableApiError\";\n  }\n}\nfunction assertUnstable(registry, level, message) {\n  if (level === \"beta\" && registry.apiStability === \"stable\") {\n    throw new UnstableApiError(level, message);\n  }\n}\nclass UserFacingError extends GenkitError {\n  constructor(status, message, details) {\n    super({ status, detail: details, message });\n    super.name = \"UserFacingError\";\n  }\n}\nfunction getHttpStatus(e) {\n  if (e instanceof GenkitError) {\n    return e.code;\n  }\n  return 500;\n}\nfunction getCallableJSON(e) {\n  if (e instanceof GenkitError) {\n    return e.toJSON();\n  }\n  return {\n    message: \"Internal Error\",\n    status: \"INTERNAL\"\n  };\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction getErrorStack(e) {\n  if (e instanceof Error) {\n    return e.stack;\n  }\n  return void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0RkFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsYUFBYSxZQUFZLE9BQU8sU0FBUyxFQUFFLE9BQU8sSUFBSSxRQUFRO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUksc0JBQXNCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2QkFBNkIscUJBQXFCLE1BQU07O0FBRTFFLHVEQUF1RCxRQUFRLGVBQWUsTUFBTTtBQUNwRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksRUFBRTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBU0w7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZXJyb3JfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZXJyb3JfZXhwb3J0cywge1xuICBHZW5raXRFcnJvcjogKCkgPT4gR2Vua2l0RXJyb3IsXG4gIFVuc3RhYmxlQXBpRXJyb3I6ICgpID0+IFVuc3RhYmxlQXBpRXJyb3IsXG4gIFVzZXJGYWNpbmdFcnJvcjogKCkgPT4gVXNlckZhY2luZ0Vycm9yLFxuICBhc3NlcnRVbnN0YWJsZTogKCkgPT4gYXNzZXJ0VW5zdGFibGUsXG4gIGdldENhbGxhYmxlSlNPTjogKCkgPT4gZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRFcnJvck1lc3NhZ2U6ICgpID0+IGdldEVycm9yTWVzc2FnZSxcbiAgZ2V0RXJyb3JTdGFjazogKCkgPT4gZ2V0RXJyb3JTdGFjayxcbiAgZ2V0SHR0cFN0YXR1czogKCkgPT4gZ2V0SHR0cFN0YXR1c1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhlcnJvcl9leHBvcnRzKTtcbnZhciBpbXBvcnRfc3RhdHVzVHlwZXMgPSByZXF1aXJlKFwiLi9zdGF0dXNUeXBlcy5qc1wiKTtcbmNsYXNzIEdlbmtpdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBzb3VyY2U7XG4gIHN0YXR1cztcbiAgZGV0YWlsO1xuICBjb2RlO1xuICAvLyBGb3IgZWFzeSBwcmludGluZywgd2Ugd3JhcCB0aGUgZXJyb3Igd2l0aCBpbmZvcm1hdGlvbiBsaWtlIHRoZSBzb3VyY2VcbiAgLy8gYW5kIHN0YXR1cywgYnV0IHRoYXQncyByZWR1bmRhbnQgd2l0aCBKU09OLlxuICBvcmlnaW5hbE1lc3NhZ2U7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBzdGF0dXMsXG4gICAgbWVzc2FnZSxcbiAgICBkZXRhaWwsXG4gICAgc291cmNlXG4gIH0pIHtcbiAgICBzdXBlcihgJHtzb3VyY2UgPyBgJHtzb3VyY2V9OiBgIDogXCJcIn0ke3N0YXR1c306ICR7bWVzc2FnZX1gKTtcbiAgICB0aGlzLm9yaWdpbmFsTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jb2RlID0gKDAsIGltcG9ydF9zdGF0dXNUeXBlcy5odHRwU3RhdHVzQ29kZSkoc3RhdHVzKTtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmRldGFpbCA9IGRldGFpbDtcbiAgICB0aGlzLm5hbWUgPSBcIkdlbmtpdEVycm9yXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gVGhpcyBlcnJvciB0eXBlIGlzIHVzZWQgYnkgM1AgYXV0aG9ycyB3aXRoIHRoZSBmaWVsZCBcImRldGFpbFwiLFxuICAgICAgLy8gYnV0IHRoZSBhY3R1YWwgQ2FsbGFibGUgcHJvdG9jb2wgdmFsdWUgaXMgXCJkZXRhaWxzXCJcbiAgICAgIC4uLnRoaXMuZGV0YWlsID09PSB2b2lkIDAgPyB7fSA6IHsgZGV0YWlsczogdGhpcy5kZXRhaWwgfSxcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiB0aGlzLm9yaWdpbmFsTWVzc2FnZVxuICAgIH07XG4gIH1cbn1cbmNsYXNzIFVuc3RhYmxlQXBpRXJyb3IgZXh0ZW5kcyBHZW5raXRFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsLCBtZXNzYWdlKSB7XG4gICAgc3VwZXIoe1xuICAgICAgc3RhdHVzOiBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgICAgIG1lc3NhZ2U6IGAke21lc3NhZ2UgPyBtZXNzYWdlICsgXCIgXCIgOiBcIlwifVRoaXMgQVBJIHJlcXVpcmVzICcke2xldmVsfScgc3RhYmlsaXR5IGxldmVsLlxuXG5UbyB1c2UgdGhpcyBmZWF0dXJlLCBpbml0aWFsaXplIEdlbmtpdCB1c2luZyBcXGBpbXBvcnQge2dlbmtpdH0gZnJvbSBcImdlbmtpdC8ke2xldmVsfVwiXFxgLmBcbiAgICB9KTtcbiAgICB0aGlzLm5hbWUgPSBcIlVuc3RhYmxlQXBpRXJyb3JcIjtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0VW5zdGFibGUocmVnaXN0cnksIGxldmVsLCBtZXNzYWdlKSB7XG4gIGlmIChsZXZlbCA9PT0gXCJiZXRhXCIgJiYgcmVnaXN0cnkuYXBpU3RhYmlsaXR5ID09PSBcInN0YWJsZVwiKSB7XG4gICAgdGhyb3cgbmV3IFVuc3RhYmxlQXBpRXJyb3IobGV2ZWwsIG1lc3NhZ2UpO1xuICB9XG59XG5jbGFzcyBVc2VyRmFjaW5nRXJyb3IgZXh0ZW5kcyBHZW5raXRFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHN0YXR1cywgbWVzc2FnZSwgZGV0YWlscykge1xuICAgIHN1cGVyKHsgc3RhdHVzLCBkZXRhaWw6IGRldGFpbHMsIG1lc3NhZ2UgfSk7XG4gICAgc3VwZXIubmFtZSA9IFwiVXNlckZhY2luZ0Vycm9yXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEh0dHBTdGF0dXMoZSkge1xuICBpZiAoZSBpbnN0YW5jZW9mIEdlbmtpdEVycm9yKSB7XG4gICAgcmV0dXJuIGUuY29kZTtcbiAgfVxuICByZXR1cm4gNTAwO1xufVxuZnVuY3Rpb24gZ2V0Q2FsbGFibGVKU09OKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBHZW5raXRFcnJvcikge1xuICAgIHJldHVybiBlLnRvSlNPTigpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogXCJJbnRlcm5hbCBFcnJvclwiLFxuICAgIHN0YXR1czogXCJJTlRFUk5BTFwiXG4gIH07XG59XG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UoZSkge1xuICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGUubWVzc2FnZTtcbiAgfVxuICByZXR1cm4gYCR7ZX1gO1xufVxuZnVuY3Rpb24gZ2V0RXJyb3JTdGFjayhlKSB7XG4gIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gZS5zdGFjaztcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdlbmtpdEVycm9yLFxuICBVbnN0YWJsZUFwaUVycm9yLFxuICBVc2VyRmFjaW5nRXJyb3IsXG4gIGFzc2VydFVuc3RhYmxlLFxuICBnZXRDYWxsYWJsZUpTT04sXG4gIGdldEVycm9yTWVzc2FnZSxcbiAgZ2V0RXJyb3JTdGFjayxcbiAgZ2V0SHR0cFN0YXR1c1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/flow.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar flow_exports = {};\n__export(flow_exports, {\n  defineFlow: () => defineFlow,\n  run: () => run\n});\nmodule.exports = __toCommonJS(flow_exports);\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_registry = __webpack_require__(/*! ./registry.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nfunction defineFlow(registry, config, fn) {\n  const resolvedConfig = typeof config === \"string\" ? { name: config } : config;\n  return defineFlowAction(registry, resolvedConfig, fn);\n}\nfunction defineFlowAction(registry, config, fn) {\n  return (0, import_action.defineAction)(\n    registry,\n    {\n      actionType: \"flow\",\n      name: config.name,\n      inputSchema: config.inputSchema,\n      outputSchema: config.outputSchema,\n      streamSchema: config.streamSchema\n    },\n    async (input, { sendChunk, context, trace }) => {\n      return await legacyRegistryAls.run(registry, () => {\n        const ctx = sendChunk;\n        ctx.sendChunk = sendChunk;\n        ctx.context = context;\n        ctx.trace = trace;\n        return fn(input, ctx);\n      });\n    }\n  );\n}\nconst legacyRegistryAls = new import_node_async_hooks.AsyncLocalStorage();\nfunction run(name, funcOrInput, fnOrRegistry, maybeRegistry) {\n  let func;\n  let input;\n  let registry;\n  if (typeof funcOrInput === \"function\") {\n    func = funcOrInput;\n  } else {\n    input = funcOrInput;\n  }\n  if (typeof fnOrRegistry === \"function\") {\n    func = fnOrRegistry;\n  } else if (fnOrRegistry instanceof import_registry.Registry || fnOrRegistry?.registry) {\n    registry = fnOrRegistry?.registry ? fnOrRegistry?.registry : fnOrRegistry;\n  }\n  if (maybeRegistry) {\n    registry = maybeRegistry.registry ? maybeRegistry.registry : maybeRegistry;\n  }\n  if (!registry) {\n    registry = legacyRegistryAls.getStore();\n  }\n  if (!registry) {\n    throw new Error(\n      \"Unable to resolve registry. Consider explicitly passing Genkit instance.\"\n    );\n  }\n  if (!func) {\n    throw new Error(\"unable to resolve run function\");\n  }\n  return (0, import_tracing.runInNewSpan)(\n    registry,\n    {\n      metadata: { name },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"flowStep\"\n      }\n    },\n    async (meta) => {\n      meta.input = input;\n      const output = arguments.length === 3 ? await func(input) : await func();\n      meta.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=flow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDhCQUE4QixtQkFBTyxDQUFDLDBDQUFrQjtBQUN4RCxvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUN6QyxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBZTtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxvRkFBYztBQUMzQztBQUNBLHdEQUF3RCxlQUFlO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsb0JBQW9CLDJCQUEyQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvZmxvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZmxvd19leHBvcnRzID0ge307XG5fX2V4cG9ydChmbG93X2V4cG9ydHMsIHtcbiAgZGVmaW5lRmxvdzogKCkgPT4gZGVmaW5lRmxvdyxcbiAgcnVuOiAoKSA9PiBydW5cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZmxvd19leHBvcnRzKTtcbnZhciBpbXBvcnRfbm9kZV9hc3luY19ob29rcyA9IHJlcXVpcmUoXCJub2RlOmFzeW5jX2hvb2tzXCIpO1xudmFyIGltcG9ydF9hY3Rpb24gPSByZXF1aXJlKFwiLi9hY3Rpb24uanNcIik7XG52YXIgaW1wb3J0X3JlZ2lzdHJ5ID0gcmVxdWlyZShcIi4vcmVnaXN0cnkuanNcIik7XG52YXIgaW1wb3J0X3RyYWNpbmcgPSByZXF1aXJlKFwiLi90cmFjaW5nLmpzXCIpO1xuZnVuY3Rpb24gZGVmaW5lRmxvdyhyZWdpc3RyeSwgY29uZmlnLCBmbikge1xuICBjb25zdCByZXNvbHZlZENvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09IFwic3RyaW5nXCIgPyB7IG5hbWU6IGNvbmZpZyB9IDogY29uZmlnO1xuICByZXR1cm4gZGVmaW5lRmxvd0FjdGlvbihyZWdpc3RyeSwgcmVzb2x2ZWRDb25maWcsIGZuKTtcbn1cbmZ1bmN0aW9uIGRlZmluZUZsb3dBY3Rpb24ocmVnaXN0cnksIGNvbmZpZywgZm4pIHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfYWN0aW9uLmRlZmluZUFjdGlvbikoXG4gICAgcmVnaXN0cnksXG4gICAge1xuICAgICAgYWN0aW9uVHlwZTogXCJmbG93XCIsXG4gICAgICBuYW1lOiBjb25maWcubmFtZSxcbiAgICAgIGlucHV0U2NoZW1hOiBjb25maWcuaW5wdXRTY2hlbWEsXG4gICAgICBvdXRwdXRTY2hlbWE6IGNvbmZpZy5vdXRwdXRTY2hlbWEsXG4gICAgICBzdHJlYW1TY2hlbWE6IGNvbmZpZy5zdHJlYW1TY2hlbWFcbiAgICB9LFxuICAgIGFzeW5jIChpbnB1dCwgeyBzZW5kQ2h1bmssIGNvbnRleHQsIHRyYWNlIH0pID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBsZWdhY3lSZWdpc3RyeUFscy5ydW4ocmVnaXN0cnksICgpID0+IHtcbiAgICAgICAgY29uc3QgY3R4ID0gc2VuZENodW5rO1xuICAgICAgICBjdHguc2VuZENodW5rID0gc2VuZENodW5rO1xuICAgICAgICBjdHguY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIGN0eC50cmFjZSA9IHRyYWNlO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQsIGN0eCk7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59XG5jb25zdCBsZWdhY3lSZWdpc3RyeUFscyA9IG5ldyBpbXBvcnRfbm9kZV9hc3luY19ob29rcy5Bc3luY0xvY2FsU3RvcmFnZSgpO1xuZnVuY3Rpb24gcnVuKG5hbWUsIGZ1bmNPcklucHV0LCBmbk9yUmVnaXN0cnksIG1heWJlUmVnaXN0cnkpIHtcbiAgbGV0IGZ1bmM7XG4gIGxldCBpbnB1dDtcbiAgbGV0IHJlZ2lzdHJ5O1xuICBpZiAodHlwZW9mIGZ1bmNPcklucHV0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmdW5jID0gZnVuY09ySW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgaW5wdXQgPSBmdW5jT3JJbnB1dDtcbiAgfVxuICBpZiAodHlwZW9mIGZuT3JSZWdpc3RyeSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZnVuYyA9IGZuT3JSZWdpc3RyeTtcbiAgfSBlbHNlIGlmIChmbk9yUmVnaXN0cnkgaW5zdGFuY2VvZiBpbXBvcnRfcmVnaXN0cnkuUmVnaXN0cnkgfHwgZm5PclJlZ2lzdHJ5Py5yZWdpc3RyeSkge1xuICAgIHJlZ2lzdHJ5ID0gZm5PclJlZ2lzdHJ5Py5yZWdpc3RyeSA/IGZuT3JSZWdpc3RyeT8ucmVnaXN0cnkgOiBmbk9yUmVnaXN0cnk7XG4gIH1cbiAgaWYgKG1heWJlUmVnaXN0cnkpIHtcbiAgICByZWdpc3RyeSA9IG1heWJlUmVnaXN0cnkucmVnaXN0cnkgPyBtYXliZVJlZ2lzdHJ5LnJlZ2lzdHJ5IDogbWF5YmVSZWdpc3RyeTtcbiAgfVxuICBpZiAoIXJlZ2lzdHJ5KSB7XG4gICAgcmVnaXN0cnkgPSBsZWdhY3lSZWdpc3RyeUFscy5nZXRTdG9yZSgpO1xuICB9XG4gIGlmICghcmVnaXN0cnkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlVuYWJsZSB0byByZXNvbHZlIHJlZ2lzdHJ5LiBDb25zaWRlciBleHBsaWNpdGx5IHBhc3NpbmcgR2Vua2l0IGluc3RhbmNlLlwiXG4gICAgKTtcbiAgfVxuICBpZiAoIWZ1bmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmFibGUgdG8gcmVzb2x2ZSBydW4gZnVuY3Rpb25cIik7XG4gIH1cbiAgcmV0dXJuICgwLCBpbXBvcnRfdHJhY2luZy5ydW5Jbk5ld1NwYW4pKFxuICAgIHJlZ2lzdHJ5LFxuICAgIHtcbiAgICAgIG1ldGFkYXRhOiB7IG5hbWUgfSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBbaW1wb3J0X3RyYWNpbmcuU1BBTl9UWVBFX0FUVFJdOiBcImZsb3dTdGVwXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIChtZXRhKSA9PiB7XG4gICAgICBtZXRhLmlucHV0ID0gaW5wdXQ7XG4gICAgICBjb25zdCBvdXRwdXQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAzID8gYXdhaXQgZnVuYyhpbnB1dCkgOiBhd2FpdCBmdW5jKCk7XG4gICAgICBtZXRhLm91dHB1dCA9IEpTT04uc3RyaW5naWZ5KG91dHB1dCk7XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBkZWZpbmVGbG93LFxuICBydW5cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar src_exports = {};\n__export(src_exports, {\n  GENKIT_CLIENT_HEADER: () => GENKIT_CLIENT_HEADER,\n  GENKIT_REFLECTION_API_SPEC_VERSION: () => GENKIT_REFLECTION_API_SPEC_VERSION,\n  GENKIT_VERSION: () => GENKIT_VERSION,\n  GenkitError: () => import_error.GenkitError,\n  UnstableApiError: () => import_error.UnstableApiError,\n  UserFacingError: () => import_error.UserFacingError,\n  apiKey: () => import_context.apiKey,\n  assertUnstable: () => import_error.assertUnstable,\n  defineFlow: () => import_flow.defineFlow,\n  defineJsonSchema: () => import_schema.defineJsonSchema,\n  defineSchema: () => import_schema.defineSchema,\n  getCallableJSON: () => import_error.getCallableJSON,\n  getContext: () => import_context.getContext,\n  getHttpStatus: () => import_error.getHttpStatus,\n  run: () => import_flow.run,\n  runWithContext: () => import_context.runWithContext,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_version = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\n__reExport(src_exports, __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\"), module.exports);\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_flow = __webpack_require__(/*! ./flow.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\");\n__reExport(src_exports, __webpack_require__(/*! ./plugin.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ./reflection.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\"), module.exports);\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n__reExport(src_exports, __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\"), module.exports);\nconst GENKIT_VERSION = import_version.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\nconst GENKIT_REFLECTION_API_SPEC_VERSION = 1;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHdHQUF3QjtBQUNyRCxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5Qix3QkFBd0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxvRkFBYztBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBVztBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUM3Qyx3QkFBd0IsbUJBQU8sQ0FBQywwRkFBaUI7QUFDakQsb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMsd0JBQXdCLG1CQUFPLENBQUMsa0dBQXFCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLGdGQUFZO0FBQzVDO0FBQ0EsNENBQTRDLGdCQUFnQixVQUFVLHNCQUFzQjtBQUM1RjtBQUNBO0FBQ0EsTUFBTSxDQXVCTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEdFTktJVF9DTElFTlRfSEVBREVSOiAoKSA9PiBHRU5LSVRfQ0xJRU5UX0hFQURFUixcbiAgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTjogKCkgPT4gR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTixcbiAgR0VOS0lUX1ZFUlNJT046ICgpID0+IEdFTktJVF9WRVJTSU9OLFxuICBHZW5raXRFcnJvcjogKCkgPT4gaW1wb3J0X2Vycm9yLkdlbmtpdEVycm9yLFxuICBVbnN0YWJsZUFwaUVycm9yOiAoKSA9PiBpbXBvcnRfZXJyb3IuVW5zdGFibGVBcGlFcnJvcixcbiAgVXNlckZhY2luZ0Vycm9yOiAoKSA9PiBpbXBvcnRfZXJyb3IuVXNlckZhY2luZ0Vycm9yLFxuICBhcGlLZXk6ICgpID0+IGltcG9ydF9jb250ZXh0LmFwaUtleSxcbiAgYXNzZXJ0VW5zdGFibGU6ICgpID0+IGltcG9ydF9lcnJvci5hc3NlcnRVbnN0YWJsZSxcbiAgZGVmaW5lRmxvdzogKCkgPT4gaW1wb3J0X2Zsb3cuZGVmaW5lRmxvdyxcbiAgZGVmaW5lSnNvblNjaGVtYTogKCkgPT4gaW1wb3J0X3NjaGVtYS5kZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWE6ICgpID0+IGltcG9ydF9zY2hlbWEuZGVmaW5lU2NoZW1hLFxuICBnZXRDYWxsYWJsZUpTT046ICgpID0+IGltcG9ydF9lcnJvci5nZXRDYWxsYWJsZUpTT04sXG4gIGdldENvbnRleHQ6ICgpID0+IGltcG9ydF9jb250ZXh0LmdldENvbnRleHQsXG4gIGdldEh0dHBTdGF0dXM6ICgpID0+IGltcG9ydF9lcnJvci5nZXRIdHRwU3RhdHVzLFxuICBydW46ICgpID0+IGltcG9ydF9mbG93LnJ1bixcbiAgcnVuV2l0aENvbnRleHQ6ICgpID0+IGltcG9ydF9jb250ZXh0LnJ1bldpdGhDb250ZXh0LFxuICB6OiAoKSA9PiBpbXBvcnRfem9kLnpcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF92ZXJzaW9uID0gcmVxdWlyZShcIi4vX19jb2RlZ2VuL3ZlcnNpb24uanNcIik7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi9hY3Rpb24uanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbnZhciBpbXBvcnRfY29udGV4dCA9IHJlcXVpcmUoXCIuL2NvbnRleHQuanNcIik7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG52YXIgaW1wb3J0X2Zsb3cgPSByZXF1aXJlKFwiLi9mbG93LmpzXCIpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vcGx1Z2luLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi9yZWZsZWN0aW9uLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCIuL3NjaGVtYS5qc1wiKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi91dGlscy5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuY29uc3QgR0VOS0lUX1ZFUlNJT04gPSBpbXBvcnRfdmVyc2lvbi52ZXJzaW9uO1xuY29uc3QgR0VOS0lUX0NMSUVOVF9IRUFERVIgPSBgZ2Vua2l0LW5vZGUvJHtHRU5LSVRfVkVSU0lPTn0gZ2wtbm9kZS8ke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gO1xuY29uc3QgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTiA9IDE7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgR0VOS0lUX0NMSUVOVF9IRUFERVIsXG4gIEdFTktJVF9SRUZMRUNUSU9OX0FQSV9TUEVDX1ZFUlNJT04sXG4gIEdFTktJVF9WRVJTSU9OLFxuICBHZW5raXRFcnJvcixcbiAgVW5zdGFibGVBcGlFcnJvcixcbiAgVXNlckZhY2luZ0Vycm9yLFxuICBhcGlLZXksXG4gIGFzc2VydFVuc3RhYmxlLFxuICBkZWZpbmVGbG93LFxuICBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWEsXG4gIGdldENhbGxhYmxlSlNPTixcbiAgZ2V0Q29udGV4dCxcbiAgZ2V0SHR0cFN0YXR1cyxcbiAgcnVuLFxuICBydW5XaXRoQ29udGV4dCxcbiAgeixcbiAgLi4ucmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi9wbHVnaW4uanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3JlZmxlY3Rpb24uanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi91dGlscy5qc1wiKVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GENKIT_CLIENT_HEADER: () => (/* binding */ GENKIT_CLIENT_HEADER),\n/* harmony export */   GENKIT_REFLECTION_API_SPEC_VERSION: () => (/* binding */ GENKIT_REFLECTION_API_SPEC_VERSION),\n/* harmony export */   GENKIT_VERSION: () => (/* binding */ GENKIT_VERSION),\n/* harmony export */   GenkitError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_3__.GenkitError),\n/* harmony export */   UnstableApiError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_3__.UnstableApiError),\n/* harmony export */   UserFacingError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_3__.UserFacingError),\n/* harmony export */   apiKey: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.apiKey),\n/* harmony export */   assertUnstable: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_3__.assertUnstable),\n/* harmony export */   defineFlow: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_4__.defineFlow),\n/* harmony export */   defineJsonSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_7__.defineJsonSchema),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_7__.defineSchema),\n/* harmony export */   getCallableJSON: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_3__.getCallableJSON),\n/* harmony export */   getContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.getContext),\n/* harmony export */   getHttpStatus: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_3__.getHttpStatus),\n/* harmony export */   run: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_4__.run),\n/* harmony export */   runWithContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.runWithContext),\n/* harmony export */   z: () => (/* reexport safe */ zod__WEBPACK_IMPORTED_MODULE_10__.z)\n/* harmony export */ });\n/* harmony import */ var _codegen_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _action_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _action_js__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _action_js__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\n/* harmony import */ var _flow_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flow.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\");\n/* harmony import */ var _plugin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugin.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _plugin_js__WEBPACK_IMPORTED_MODULE_5__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _plugin_js__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _reflection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reflection.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _reflection_js__WEBPACK_IMPORTED_MODULE_6__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _reflection_js__WEBPACK_IMPORTED_MODULE_6__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n/* harmony import */ var _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_8__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_8__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _utils_js__WEBPACK_IMPORTED_MODULE_9__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _utils_js__WEBPACK_IMPORTED_MODULE_9__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst GENKIT_VERSION = _codegen_version_js__WEBPACK_IMPORTED_MODULE_0__.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\nconst GENKIT_REFLECTION_API_SPEC_VERSION = 1;\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlEO0FBQ2pELHVCQUF1Qix3REFBTztBQUM5Qiw0Q0FBNEMsZ0JBQWdCLFVBQVUsc0JBQXNCO0FBQzVGO0FBQ3dCO0FBQ0k7QUFLTjtBQVFGO0FBSUQ7QUFDUztBQUNJO0FBQzZCO0FBQ3pCO0FBQ1Q7QUFtQnpCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fX2NvZGVnZW4vdmVyc2lvbi5qc1wiO1xuY29uc3QgR0VOS0lUX1ZFUlNJT04gPSB2ZXJzaW9uO1xuY29uc3QgR0VOS0lUX0NMSUVOVF9IRUFERVIgPSBgZ2Vua2l0LW5vZGUvJHtHRU5LSVRfVkVSU0lPTn0gZ2wtbm9kZS8ke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gO1xuY29uc3QgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTiA9IDE7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vYWN0aW9uLmpzXCI7XG5pbXBvcnQge1xuICBhcGlLZXksXG4gIGdldENvbnRleHQsXG4gIHJ1bldpdGhDb250ZXh0XG59IGZyb20gXCIuL2NvbnRleHQuanNcIjtcbmltcG9ydCB7XG4gIEdlbmtpdEVycm9yLFxuICBVbnN0YWJsZUFwaUVycm9yLFxuICBVc2VyRmFjaW5nRXJyb3IsXG4gIGFzc2VydFVuc3RhYmxlLFxuICBnZXRDYWxsYWJsZUpTT04sXG4gIGdldEh0dHBTdGF0dXNcbn0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmltcG9ydCB7XG4gIGRlZmluZUZsb3csXG4gIHJ1blxufSBmcm9tIFwiLi9mbG93LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wbHVnaW4uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlZmxlY3Rpb24uanNcIjtcbmltcG9ydCB7IGRlZmluZUpzb25TY2hlbWEsIGRlZmluZVNjaGVtYSB9IGZyb20gXCIuL3NjaGVtYS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGVsZW1ldHJ5VHlwZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzLmpzXCI7XG5leHBvcnQge1xuICBHRU5LSVRfQ0xJRU5UX0hFQURFUixcbiAgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTixcbiAgR0VOS0lUX1ZFUlNJT04sXG4gIEdlbmtpdEVycm9yLFxuICBVbnN0YWJsZUFwaUVycm9yLFxuICBVc2VyRmFjaW5nRXJyb3IsXG4gIGFwaUtleSxcbiAgYXNzZXJ0VW5zdGFibGUsXG4gIGRlZmluZUZsb3csXG4gIGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYSxcbiAgZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRDb250ZXh0LFxuICBnZXRIdHRwU3RhdHVzLFxuICBydW4sXG4gIHJ1bldpdGhDb250ZXh0LFxuICB6XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar logging_exports = {};\n__export(logging_exports, {\n  logger: () => logger\n});\nmodule.exports = __toCommonJS(logging_exports);\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nconst loggerKey = \"__genkit_logger\";\nconst _defaultLogger = {\n  shouldLog(targetLevel) {\n    return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n  },\n  debug(...args) {\n    this.shouldLog(\"debug\") && console.debug(...args);\n  },\n  info(...args) {\n    this.shouldLog(\"info\") && console.info(...args);\n  },\n  warn(...args) {\n    this.shouldLog(\"warn\") && console.warn(...args);\n  },\n  error(...args) {\n    this.shouldLog(\"error\") && console.error(...args);\n  },\n  level: \"info\"\n};\nfunction getLogger() {\n  if (!global[loggerKey]) {\n    global[loggerKey] = _defaultLogger;\n  }\n  return global[loggerKey];\n}\nclass Logger {\n  defaultLogger = _defaultLogger;\n  init(fn) {\n    global[loggerKey] = fn;\n  }\n  info(...args) {\n    getLogger().info.apply(getLogger(), args);\n  }\n  debug(...args) {\n    getLogger().debug.apply(getLogger(), args);\n  }\n  error(...args) {\n    getLogger().error.apply(getLogger(), args);\n  }\n  warn(...args) {\n    getLogger().warn.apply(getLogger(), args);\n  }\n  setLogLevel(level) {\n    getLogger().level = level;\n  }\n  logStructured(msg, metadata) {\n    getLogger().info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    getLogger().error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9sb2dnaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBsb2dnaW5nX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGxvZ2dpbmdfZXhwb3J0cywge1xuICBsb2dnZXI6ICgpID0+IGxvZ2dlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhsb2dnaW5nX2V4cG9ydHMpO1xuY29uc3QgTE9HX0xFVkVMUyA9IFtcImRlYnVnXCIsIFwiaW5mb1wiLCBcIndhcm5cIiwgXCJlcnJvclwiXTtcbmNvbnN0IGxvZ2dlcktleSA9IFwiX19nZW5raXRfbG9nZ2VyXCI7XG5jb25zdCBfZGVmYXVsdExvZ2dlciA9IHtcbiAgc2hvdWxkTG9nKHRhcmdldExldmVsKSB7XG4gICAgcmV0dXJuIExPR19MRVZFTFMuaW5kZXhPZih0aGlzLmxldmVsKSA8PSBMT0dfTEVWRUxTLmluZGV4T2YodGFyZ2V0TGV2ZWwpO1xuICB9LFxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJkZWJ1Z1wiKSAmJiBjb25zb2xlLmRlYnVnKC4uLmFyZ3MpO1xuICB9LFxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcImluZm9cIikgJiYgY29uc29sZS5pbmZvKC4uLmFyZ3MpO1xuICB9LFxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcIndhcm5cIikgJiYgY29uc29sZS53YXJuKC4uLmFyZ3MpO1xuICB9LFxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJlcnJvclwiKSAmJiBjb25zb2xlLmVycm9yKC4uLmFyZ3MpO1xuICB9LFxuICBsZXZlbDogXCJpbmZvXCJcbn07XG5mdW5jdGlvbiBnZXRMb2dnZXIoKSB7XG4gIGlmICghZ2xvYmFsW2xvZ2dlcktleV0pIHtcbiAgICBnbG9iYWxbbG9nZ2VyS2V5XSA9IF9kZWZhdWx0TG9nZ2VyO1xuICB9XG4gIHJldHVybiBnbG9iYWxbbG9nZ2VyS2V5XTtcbn1cbmNsYXNzIExvZ2dlciB7XG4gIGRlZmF1bHRMb2dnZXIgPSBfZGVmYXVsdExvZ2dlcjtcbiAgaW5pdChmbikge1xuICAgIGdsb2JhbFtsb2dnZXJLZXldID0gZm47XG4gIH1cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkuaW5mby5hcHBseShnZXRMb2dnZXIoKSwgYXJncyk7XG4gIH1cbiAgZGVidWcoLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLmRlYnVnLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkuZXJyb3IuYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIHdhcm4oLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLndhcm4uYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIHNldExvZ0xldmVsKGxldmVsKSB7XG4gICAgZ2V0TG9nZ2VyKCkubGV2ZWwgPSBsZXZlbDtcbiAgfVxuICBsb2dTdHJ1Y3R1cmVkKG1zZywgbWV0YWRhdGEpIHtcbiAgICBnZXRMb2dnZXIoKS5pbmZvKG1zZywgbWV0YWRhdGEpO1xuICB9XG4gIGxvZ1N0cnVjdHVyZWRFcnJvcihtc2csIG1ldGFkYXRhKSB7XG4gICAgZ2V0TG9nZ2VyKCkuZXJyb3IobXNnLCBtZXRhZGF0YSk7XG4gIH1cbn1cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBsb2dnZXJcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/logging.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nconst loggerKey = \"__genkit_logger\";\nconst _defaultLogger = {\n  shouldLog(targetLevel) {\n    return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n  },\n  debug(...args) {\n    this.shouldLog(\"debug\") && console.debug(...args);\n  },\n  info(...args) {\n    this.shouldLog(\"info\") && console.info(...args);\n  },\n  warn(...args) {\n    this.shouldLog(\"warn\") && console.warn(...args);\n  },\n  error(...args) {\n    this.shouldLog(\"error\") && console.error(...args);\n  },\n  level: \"info\"\n};\nfunction getLogger() {\n  if (!global[loggerKey]) {\n    global[loggerKey] = _defaultLogger;\n  }\n  return global[loggerKey];\n}\nclass Logger {\n  defaultLogger = _defaultLogger;\n  init(fn) {\n    global[loggerKey] = fn;\n  }\n  info(...args) {\n    getLogger().info.apply(getLogger(), args);\n  }\n  debug(...args) {\n    getLogger().debug.apply(getLogger(), args);\n  }\n  error(...args) {\n    getLogger().error.apply(getLogger(), args);\n  }\n  warn(...args) {\n    getLogger().warn.apply(getLogger(), args);\n  }\n  setLogLevel(level) {\n    getLogger().level = level;\n  }\n  logStructured(msg, metadata) {\n    getLogger().info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    getLogger().error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n\n//# sourceMappingURL=logging.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9sb2dnaW5nLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBMT0dfTEVWRUxTID0gW1wiZGVidWdcIiwgXCJpbmZvXCIsIFwid2FyblwiLCBcImVycm9yXCJdO1xuY29uc3QgbG9nZ2VyS2V5ID0gXCJfX2dlbmtpdF9sb2dnZXJcIjtcbmNvbnN0IF9kZWZhdWx0TG9nZ2VyID0ge1xuICBzaG91bGRMb2codGFyZ2V0TGV2ZWwpIHtcbiAgICByZXR1cm4gTE9HX0xFVkVMUy5pbmRleE9mKHRoaXMubGV2ZWwpIDw9IExPR19MRVZFTFMuaW5kZXhPZih0YXJnZXRMZXZlbCk7XG4gIH0sXG4gIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcImRlYnVnXCIpICYmIGNvbnNvbGUuZGVidWcoLi4uYXJncyk7XG4gIH0sXG4gIGluZm8oLi4uYXJncykge1xuICAgIHRoaXMuc2hvdWxkTG9nKFwiaW5mb1wiKSAmJiBjb25zb2xlLmluZm8oLi4uYXJncyk7XG4gIH0sXG4gIHdhcm4oLi4uYXJncykge1xuICAgIHRoaXMuc2hvdWxkTG9nKFwid2FyblwiKSAmJiBjb25zb2xlLndhcm4oLi4uYXJncyk7XG4gIH0sXG4gIGVycm9yKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcImVycm9yXCIpICYmIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gIH0sXG4gIGxldmVsOiBcImluZm9cIlxufTtcbmZ1bmN0aW9uIGdldExvZ2dlcigpIHtcbiAgaWYgKCFnbG9iYWxbbG9nZ2VyS2V5XSkge1xuICAgIGdsb2JhbFtsb2dnZXJLZXldID0gX2RlZmF1bHRMb2dnZXI7XG4gIH1cbiAgcmV0dXJuIGdsb2JhbFtsb2dnZXJLZXldO1xufVxuY2xhc3MgTG9nZ2VyIHtcbiAgZGVmYXVsdExvZ2dlciA9IF9kZWZhdWx0TG9nZ2VyO1xuICBpbml0KGZuKSB7XG4gICAgZ2xvYmFsW2xvZ2dlcktleV0gPSBmbjtcbiAgfVxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICBnZXRMb2dnZXIoKS5pbmZvLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkuZGVidWcuYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIGVycm9yKC4uLmFyZ3MpIHtcbiAgICBnZXRMb2dnZXIoKS5lcnJvci5hcHBseShnZXRMb2dnZXIoKSwgYXJncyk7XG4gIH1cbiAgd2FybiguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkud2Fybi5hcHBseShnZXRMb2dnZXIoKSwgYXJncyk7XG4gIH1cbiAgc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgICBnZXRMb2dnZXIoKS5sZXZlbCA9IGxldmVsO1xuICB9XG4gIGxvZ1N0cnVjdHVyZWQobXNnLCBtZXRhZGF0YSkge1xuICAgIGdldExvZ2dlcigpLmluZm8obXNnLCBtZXRhZGF0YSk7XG4gIH1cbiAgbG9nU3RydWN0dXJlZEVycm9yKG1zZywgbWV0YWRhdGEpIHtcbiAgICBnZXRMb2dnZXIoKS5lcnJvcihtc2csIG1ldGFkYXRhKTtcbiAgfVxufVxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuZXhwb3J0IHtcbiAgbG9nZ2VyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/logging.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/plugin.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar plugin_exports = {};\nmodule.exports = __toCommonJS(plugin_exports);\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvcGx1Z2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBwbHVnaW5fZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocGx1Z2luX2V4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/reflection.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reflection_exports = {};\n__export(reflection_exports, {\n  ReflectionServer: () => ReflectionServer,\n  RunActionResponseSchema: () => RunActionResponseSchema\n});\nmodule.exports = __toCommonJS(reflection_exports);\nvar import_express = __toESM(__webpack_require__(/*! express */ \"express\"));\nvar import_promises = __toESM(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nvar import_get_port = __toESM(__webpack_require__(/*! get-port */ \"(action-browser)/./node_modules/get-port/index.js\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst RunActionResponseSchema = z.object({\n  result: z.unknown().optional(),\n  error: z.unknown().optional(),\n  telemetry: z.object({\n    traceId: z.string().optional()\n  }).optional()\n});\nclass ReflectionServer {\n  /** List of all running servers needed to be cleaned up on process exit. */\n  static RUNNING_SERVERS = [];\n  /** Registry instance to be used for API calls. */\n  registry;\n  /** Options for the reflection server. */\n  options;\n  /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null if server is not running. */\n  port = null;\n  /** Express server instance. Null if server is not running. */\n  server = null;\n  /** Path to the runtime file. Null if server is not running. */\n  runtimeFilePath = null;\n  constructor(registry, options) {\n    this.registry = registry;\n    this.options = {\n      port: 3100,\n      bodyLimit: \"30mb\",\n      configuredEnvs: [\"dev\"],\n      ...options\n    };\n  }\n  /**\n   * Finds a free port to run the server on based on the original chosen port and environment.\n   */\n  async findPort() {\n    const chosenPort = this.options.port;\n    const freePort = await (0, import_get_port.default)({\n      port: (0, import_get_port.makeRange)(chosenPort, chosenPort + 100)\n    });\n    if (freePort !== chosenPort) {\n      import_logging.logger.warn(\n        `Port ${chosenPort} is already in use, using next available port ${freePort} instead.`\n      );\n    }\n    return freePort;\n  }\n  /**\n   * Starts the server.\n   *\n   * The server will be registered to be shut down on process exit.\n   */\n  async start() {\n    const server = (0, import_express.default)();\n    server.use(import_express.default.json({ limit: this.options.bodyLimit }));\n    server.use(function(req, res, next) {\n      res.header(\"x-genkit-version\", import_index.GENKIT_VERSION);\n      next();\n    });\n    server.get(\"/api/__health\", async (_, response) => {\n      await this.registry.listActions();\n      response.status(200).send(\"OK\");\n    });\n    server.get(\"/api/__quitquitquit\", async (_, response) => {\n      import_logging.logger.debug(\"Received quitquitquit\");\n      response.status(200).send(\"OK\");\n      await this.stop();\n    });\n    server.get(\"/api/actions\", async (_, response, next) => {\n      import_logging.logger.debug(\"Fetching actions.\");\n      try {\n        const actions = await this.registry.listResolvableActions();\n        const convertedActions = {};\n        Object.keys(actions).forEach((key) => {\n          const action = actions[key];\n          convertedActions[key] = {\n            key,\n            name: action.name,\n            description: action.description,\n            metadata: action.metadata\n          };\n          if (action.inputSchema || action.inputJsonSchema) {\n            convertedActions[key].inputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.inputSchema,\n              jsonSchema: action.inputJsonSchema\n            });\n          }\n          if (action.outputSchema || action.outputJsonSchema) {\n            convertedActions[key].outputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.outputSchema,\n              jsonSchema: action.outputJsonSchema\n            });\n          }\n        });\n        response.send(convertedActions);\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack });\n      }\n    });\n    server.post(\"/api/runAction\", async (request, response, next) => {\n      const { key, input, context, telemetryLabels } = request.body;\n      const { stream } = request.query;\n      import_logging.logger.debug(`Running action \\`${key}\\` with stream=${stream}...`);\n      try {\n        const action = await this.registry.lookupAction(key);\n        if (!action) {\n          response.status(404).send(`action ${key} not found`);\n          return;\n        }\n        if (stream === \"true\") {\n          try {\n            const callback = (chunk) => {\n              response.write(JSON.stringify(chunk) + \"\\n\");\n            };\n            const result = await (0, import_action.runWithStreamingCallback)(\n              this.registry,\n              callback,\n              () => action.run(input, { context, onChunk: callback })\n            );\n            await (0, import_tracing.flushTracing)();\n            response.write(\n              JSON.stringify({\n                result: result.result,\n                telemetry: {\n                  traceId: result.telemetry.traceId\n                }\n              })\n            );\n            response.end();\n          } catch (err) {\n            const { message, stack } = err;\n            const errorResponse = {\n              code: import_action.StatusCodes.INTERNAL,\n              message,\n              details: {\n                stack\n              }\n            };\n            if (err.traceId) {\n              errorResponse.details.traceId = err.traceId;\n            }\n            response.write(\n              JSON.stringify({\n                error: errorResponse\n              })\n            );\n            response.end();\n          }\n        } else {\n          const result = await action.run(input, { context, telemetryLabels });\n          await (0, import_tracing.flushTracing)();\n          response.send({\n            result: result.result,\n            telemetry: {\n              traceId: result.telemetry.traceId\n            }\n          });\n        }\n      } catch (err) {\n        const { message, stack, traceId } = err;\n        next({ message, stack, traceId });\n      }\n    });\n    server.get(\"/api/envs\", async (_, response) => {\n      response.json(this.options.configuredEnvs);\n    });\n    server.post(\"/api/notify\", async (request, response) => {\n      const { telemetryServerUrl, reflectionApiSpecVersion } = request.body;\n      if (!process.env.GENKIT_TELEMETRY_SERVER) {\n        if (typeof telemetryServerUrl === \"string\") {\n          (0, import_tracing.setTelemetryServerUrl)(telemetryServerUrl);\n          import_logging.logger.debug(\n            `Connected to telemetry server on ${telemetryServerUrl}`\n          );\n        }\n      }\n      if (reflectionApiSpecVersion !== import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n        if (!reflectionApiSpecVersion || reflectionApiSpecVersion < import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n          import_logging.logger.warn(\n            \"WARNING: Genkit CLI version may be outdated. Please update `genkit-cli` to the latest version.\"\n          );\n        } else {\n          import_logging.logger.warn(\n            `Genkit CLI is newer than runtime library. Some feature may not be supported. Consider upgrading your runtime library version (debug info: expected ${import_index.GENKIT_REFLECTION_API_SPEC_VERSION}, got ${reflectionApiSpecVersion}).`\n          );\n        }\n      }\n      response.status(200).send(\"OK\");\n    });\n    server.use((err, req, res, next) => {\n      import_logging.logger.error(err.stack);\n      const error = err;\n      const { message, stack } = error;\n      const errorResponse = {\n        code: import_action.StatusCodes.INTERNAL,\n        message,\n        details: {\n          stack\n        }\n      };\n      if (err.traceId) {\n        errorResponse.details.traceId = err.traceId;\n      }\n      res.status(500).json(errorResponse);\n    });\n    this.port = await this.findPort();\n    this.server = server.listen(this.port, async () => {\n      import_logging.logger.debug(\n        `Reflection server (${process.pid}) running on http://localhost:${this.port}`\n      );\n      ReflectionServer.RUNNING_SERVERS.push(this);\n      await this.writeRuntimeFile();\n    });\n  }\n  /**\n   * Stops the server and removes it from the list of running servers to clean up on exit.\n   */\n  async stop() {\n    if (!this.server) {\n      return;\n    }\n    return new Promise(async (resolve, reject) => {\n      await this.cleanupRuntimeFile();\n      this.server.close(async (err) => {\n        if (err) {\n          import_logging.logger.error(\n            `Error shutting down reflection server on port ${this.port}: ${err}`\n          );\n          reject(err);\n        }\n        const index = ReflectionServer.RUNNING_SERVERS.indexOf(this);\n        if (index > -1) {\n          ReflectionServer.RUNNING_SERVERS.splice(index, 1);\n        }\n        import_logging.logger.debug(\n          `Reflection server on port ${this.port} has successfully shut down.`\n        );\n        this.port = null;\n        this.server = null;\n        resolve();\n      });\n    });\n  }\n  /**\n   * Writes the runtime file to the project root.\n   */\n  async writeRuntimeFile() {\n    try {\n      const rootDir = await findProjectRoot();\n      const runtimesDir = import_path.default.join(rootDir, \".genkit\", \"runtimes\");\n      const date = /* @__PURE__ */ new Date();\n      const time = date.getTime();\n      const timestamp = date.toISOString();\n      this.runtimeFilePath = import_path.default.join(\n        runtimesDir,\n        `${process.pid}-${time}.json`\n      );\n      const fileContent = JSON.stringify(\n        {\n          id: process.env.GENKIT_RUNTIME_ID || process.pid.toString(),\n          pid: process.pid,\n          reflectionServerUrl: `http://localhost:${this.port}`,\n          timestamp,\n          genkitVersion: `nodejs/${import_index.GENKIT_VERSION}`,\n          reflectionApiSpecVersion: import_index.GENKIT_REFLECTION_API_SPEC_VERSION\n        },\n        null,\n        2\n      );\n      await import_promises.default.mkdir(runtimesDir, { recursive: true });\n      await import_promises.default.writeFile(this.runtimeFilePath, fileContent, \"utf8\");\n      import_logging.logger.debug(`Runtime file written: ${this.runtimeFilePath}`);\n    } catch (error) {\n      import_logging.logger.error(`Error writing runtime file: ${error}`);\n    }\n  }\n  /**\n   * Cleans up the port file.\n   */\n  async cleanupRuntimeFile() {\n    if (!this.runtimeFilePath) {\n      return;\n    }\n    try {\n      const fileContent = await import_promises.default.readFile(this.runtimeFilePath, \"utf8\");\n      const data = JSON.parse(fileContent);\n      if (data.pid === process.pid) {\n        await import_promises.default.unlink(this.runtimeFilePath);\n        import_logging.logger.debug(`Runtime file cleaned up: ${this.runtimeFilePath}`);\n      }\n    } catch (error) {\n      import_logging.logger.error(`Error cleaning up runtime file: ${error}`);\n    }\n  }\n  /**\n   * Stops all running reflection servers.\n   */\n  static async stopAll() {\n    return Promise.all(\n      ReflectionServer.RUNNING_SERVERS.map((server) => server.stop())\n    );\n  }\n}\nasync function findProjectRoot() {\n  let currentDir = process.cwd();\n  while (currentDir !== import_path.default.parse(currentDir).root) {\n    const packageJsonPath = import_path.default.join(currentDir, \"package.json\");\n    try {\n      await import_promises.default.access(packageJsonPath);\n      return currentDir;\n    } catch {\n      currentDir = import_path.default.dirname(currentDir);\n    }\n  }\n  throw new Error(\"Could not find project root (package.json not found)\");\n}\nif ( true && \"hot\" in module) {\n  module.hot.accept();\n  module.hot.dispose(async () => {\n    import_logging.logger.debug(\"Cleaning up reflection server(s) before module reload...\");\n    await ReflectionServer.stopAll();\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reflection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/registry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar registry_exports = {};\n__export(registry_exports, {\n  AsyncStore: () => AsyncStore,\n  Registry: () => Registry,\n  parseRegistryKey: () => parseRegistryKey\n});\nmodule.exports = __toCommonJS(registry_exports);\nvar import_dotprompt = __webpack_require__(/*! dotprompt */ \"(action-browser)/./node_modules/dotprompt/dist/index.js\");\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nfunction parsePluginName(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length >= 4) {\n    return tokens[2];\n  }\n  return void 0;\n}\nfunction parseRegistryKey(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length < 3) {\n    return void 0;\n  }\n  if (tokens.length >= 4) {\n    return {\n      actionType: tokens[1],\n      pluginName: tokens[2],\n      actionName: tokens.slice(3).join(\"/\")\n    };\n  }\n  return {\n    actionType: tokens[1],\n    actionName: tokens[2]\n  };\n}\nclass Registry {\n  actionsById = {};\n  pluginsByName = {};\n  schemasByName = {};\n  valueByTypeAndName = {};\n  allPluginsInitialized = false;\n  apiStability = \"stable\";\n  asyncStore;\n  dotprompt;\n  parent;\n  constructor(parent) {\n    if (parent) {\n      this.parent = parent;\n      this.apiStability = parent?.apiStability;\n      this.asyncStore = parent.asyncStore;\n      this.dotprompt = parent.dotprompt;\n    } else {\n      this.asyncStore = new AsyncStore();\n      this.dotprompt = new import_dotprompt.Dotprompt({\n        schemaResolver: async (name) => {\n          const resolvedSchema = await this.lookupSchema(name);\n          if (!resolvedSchema) {\n            throw new import_error.GenkitError({\n              message: `Schema '${name}' not found`,\n              status: \"NOT_FOUND\"\n            });\n          }\n          return (0, import_schema.toJsonSchema)(resolvedSchema);\n        }\n      });\n    }\n  }\n  /**\n   * Creates a new registry overlaid onto the provided registry.\n   * @param parent The parent registry.\n   * @returns The new overlaid registry.\n   */\n  static withParent(parent) {\n    return new Registry(parent);\n  }\n  /**\n   * Looks up an action in the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  async lookupAction(key) {\n    const parsedKey = parseRegistryKey(key);\n    if (parsedKey?.pluginName && this.pluginsByName[parsedKey.pluginName]) {\n      await this.initializePlugin(parsedKey.pluginName);\n      if (!this.actionsById[key]) {\n        await this.resolvePluginAction(\n          parsedKey.pluginName,\n          parsedKey.actionType,\n          parsedKey.actionName\n        );\n      }\n    }\n    return await this.actionsById[key] || this.parent?.lookupAction(key);\n  }\n  /**\n   * Registers an action in the registry.\n   * @param type The type of the action to register.\n   * @param action The action to register.\n   */\n  registerAction(type, action) {\n    if (type !== action.__action.actionType) {\n      throw new import_error.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `action type (${type}) does not match type on action (${action.__action.actionType})`\n      });\n    }\n    const key = `/${type}/${action.__action.name}`;\n    import_logging.logger.debug(`registering ${key}`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n  }\n  /**\n   * Registers an action promise in the registry.\n   */\n  registerActionAsync(type, name, action) {\n    const key = `/${type}/${name}`;\n    import_logging.logger.debug(`registering ${key} (async)`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n  }\n  /**\n   * Returns all actions that have been registered in the registry.\n   * @returns All actions in the registry as a map of <key, action>.\n   */\n  async listActions() {\n    await this.initializeAllPlugins();\n    const actions = {};\n    await Promise.all(\n      Object.entries(this.actionsById).map(async ([key, action]) => {\n        actions[key] = await action;\n      })\n    );\n    return {\n      ...await this.parent?.listActions(),\n      ...actions\n    };\n  }\n  /**\n   * Returns all actions that are resolvable by plugins as well as those that are already\n   * in the registry.\n   *\n   * NOTE: this method should not be used in latency sensitive code paths.\n   * It may rely on \"admin\" API calls such as \"list models\", which may cause increased cold start latency.\n   *\n   * @returns All resolvable action metadata as a map of <key, action metadata>.\n   */\n  async listResolvableActions() {\n    const resolvableActions = {};\n    await Promise.all(\n      Object.entries(this.pluginsByName).map(async ([pluginName, plugin]) => {\n        if (plugin.listActions) {\n          try {\n            (await plugin.listActions()).forEach((meta) => {\n              if (!meta.name) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - name required`\n                });\n              }\n              if (!meta.actionType) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - actionType required`\n                });\n              }\n              resolvableActions[`/${meta.actionType}/${meta.name}`] = meta;\n            });\n          } catch (e) {\n            import_logging.logger.error(`Error listing actions for ${pluginName}\n`, e);\n          }\n        }\n      })\n    );\n    for (const [key, action] of Object.entries(await this.listActions())) {\n      resolvableActions[key] = action.__action;\n    }\n    return {\n      ...await this.parent?.listResolvableActions(),\n      ...resolvableActions\n    };\n  }\n  /**\n   * Initializes all plugins in the registry.\n   */\n  async initializeAllPlugins() {\n    if (this.allPluginsInitialized) {\n      return;\n    }\n    for (const pluginName of Object.keys(this.pluginsByName)) {\n      await this.initializePlugin(pluginName);\n    }\n    this.allPluginsInitialized = true;\n  }\n  /**\n   * Registers a plugin provider. This plugin must be initialized before it can be used by calling {@link initializePlugin} or {@link initializeAllPlugins}.\n   * @param name The name of the plugin to register.\n   * @param provider The plugin provider.\n   */\n  registerPluginProvider(name, provider) {\n    if (this.pluginsByName[name]) {\n      throw new Error(`Plugin ${name} already registered`);\n    }\n    this.allPluginsInitialized = false;\n    let cached;\n    let isInitialized = false;\n    this.pluginsByName[name] = {\n      name: provider.name,\n      initializer: () => {\n        if (!isInitialized) {\n          cached = provider.initializer();\n          isInitialized = true;\n        }\n        return cached;\n      },\n      resolver: async (actionType, actionName) => {\n        if (provider.resolver) {\n          await provider.resolver(actionType, actionName);\n        }\n      },\n      listActions: async () => {\n        if (provider.listActions) {\n          return await provider.listActions();\n        }\n        return [];\n      }\n    };\n  }\n  /**\n   * Looks up a plugin.\n   * @param name The name of the plugin to lookup.\n   * @returns The plugin provider.\n   */\n  lookupPlugin(name) {\n    return this.pluginsByName[name] || this.parent?.lookupPlugin(name);\n  }\n  /**\n   * Resolves a new Action dynamically by registering it.\n   * @param pluginName The name of the plugin\n   * @param actionType The type of the action\n   * @param actionName The name of the action\n   * @returns\n   */\n  async resolvePluginAction(pluginName, actionType, actionName) {\n    const plugin = this.pluginsByName[pluginName];\n    if (plugin) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(this, async () => {\n        if (plugin.resolver) {\n          await plugin.resolver(actionType, actionName);\n        }\n      });\n    }\n  }\n  /**\n   * Initializes a plugin already registered with {@link registerPluginProvider}.\n   * @param name The name of the plugin to initialize.\n   * @returns The plugin.\n   */\n  async initializePlugin(name) {\n    if (this.pluginsByName[name]) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(\n        this,\n        () => this.pluginsByName[name].initializer()\n      );\n    }\n  }\n  /**\n   * Registers a schema.\n   * @param name The name of the schema to register.\n   * @param data The schema to register (either a Zod schema or a JSON schema).\n   */\n  registerSchema(name, data) {\n    if (this.schemasByName[name]) {\n      throw new Error(`Schema ${name} already registered`);\n    }\n    this.schemasByName[name] = data;\n  }\n  registerValue(type, name, value) {\n    if (!this.valueByTypeAndName[type]) {\n      this.valueByTypeAndName[type] = {};\n    }\n    this.valueByTypeAndName[type][name] = value;\n  }\n  async lookupValue(type, key) {\n    const pluginName = parsePluginName(key);\n    if (!this.valueByTypeAndName[type]?.[key] && pluginName) {\n      await this.initializePlugin(pluginName);\n    }\n    return this.valueByTypeAndName[type]?.[key] || this.parent?.lookupValue(type, key);\n  }\n  async listValues(type) {\n    await this.initializeAllPlugins();\n    return {\n      ...await this.parent?.listValues(type) || {},\n      ...this.valueByTypeAndName[type] || {}\n    };\n  }\n  /**\n   * Looks up a schema.\n   * @param name The name of the schema to lookup.\n   * @returns The schema.\n   */\n  lookupSchema(name) {\n    return this.schemasByName[name] || this.parent?.lookupSchema(name);\n  }\n}\nclass AsyncStore {\n  asls = {};\n  getStore(key) {\n    return this.asls[key]?.getStore();\n  }\n  run(key, store, callback) {\n    if (!this.asls[key]) {\n      this.asls[key] = new import_node_async_hooks.AsyncLocalStorage();\n    }\n    return this.asls[key].run(store, callback);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar schema_exports = {};\n__export(schema_exports, {\n  ValidationError: () => ValidationError,\n  defineJsonSchema: () => defineJsonSchema,\n  defineSchema: () => defineSchema,\n  parseSchema: () => parseSchema,\n  toJsonSchema: () => toJsonSchema,\n  validateSchema: () => validateSchema,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(schema_exports);\nvar import_ajv = __toESM(__webpack_require__(/*! ajv */ \"(action-browser)/./node_modules/ajv/dist/ajv.js\"));\nvar import_ajv_formats = __toESM(__webpack_require__(/*! ajv-formats */ \"(action-browser)/./node_modules/ajv-formats/dist/index.js\"));\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\nvar import_zod_to_json_schema = __toESM(__webpack_require__(/*! zod-to-json-schema */ \"(action-browser)/./node_modules/zod-to-json-schema/dist/cjs/index.js\"));\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst ajv = new import_ajv.default();\n(0, import_ajv_formats.default)(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends import_error.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema) return null;\n  if (jsonSchema) return jsonSchema;\n  if (jsonSchemas.has(schema)) return jsonSchemas.get(schema);\n  const outSchema = (0, import_zod_to_json_schema.default)(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = validator.errors?.map((e) => e);\n  return { valid, errors: errors?.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid) throw new ValidationError({ data, errors, schema });\n  return data;\n}\nfunction defineSchema(registry, name, schema) {\n  registry.registerSchema(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(registry, name, jsonSchema) {\n  registry.registerSchema(name, { jsonSchema });\n  return jsonSchema;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0REFBSztBQUN0QyxpQ0FBaUMsbUJBQU8sQ0FBQyw4RUFBYTtBQUN0RCxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5Qix3Q0FBd0MsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDcEUsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLHVCQUF1QixPQUFPLElBQUksVUFBVTs7QUFFOUM7O0FBRUEsRUFBRTs7QUFFRjs7QUFFQSxFQUFFLGdDQUFnQztBQUNsQyxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEMsMENBQTBDLHNCQUFzQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsWUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxNQUFNLENBUUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9zY2hlbWEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHNjaGVtYV9leHBvcnRzID0ge307XG5fX2V4cG9ydChzY2hlbWFfZXhwb3J0cywge1xuICBWYWxpZGF0aW9uRXJyb3I6ICgpID0+IFZhbGlkYXRpb25FcnJvcixcbiAgZGVmaW5lSnNvblNjaGVtYTogKCkgPT4gZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hOiAoKSA9PiBkZWZpbmVTY2hlbWEsXG4gIHBhcnNlU2NoZW1hOiAoKSA9PiBwYXJzZVNjaGVtYSxcbiAgdG9Kc29uU2NoZW1hOiAoKSA9PiB0b0pzb25TY2hlbWEsXG4gIHZhbGlkYXRlU2NoZW1hOiAoKSA9PiB2YWxpZGF0ZVNjaGVtYSxcbiAgejogKCkgPT4gaW1wb3J0X3pvZC56XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNjaGVtYV9leHBvcnRzKTtcbnZhciBpbXBvcnRfYWp2ID0gX190b0VTTShyZXF1aXJlKFwiYWp2XCIpKTtcbnZhciBpbXBvcnRfYWp2X2Zvcm1hdHMgPSBfX3RvRVNNKHJlcXVpcmUoXCJhanYtZm9ybWF0c1wiKSk7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG52YXIgaW1wb3J0X3pvZF90b19qc29uX3NjaGVtYSA9IF9fdG9FU00ocmVxdWlyZShcInpvZC10by1qc29uLXNjaGVtYVwiKSk7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG5jb25zdCBhanYgPSBuZXcgaW1wb3J0X2Fqdi5kZWZhdWx0KCk7XG4oMCwgaW1wb3J0X2Fqdl9mb3JtYXRzLmRlZmF1bHQpKGFqdik7XG5jb25zdCBqc29uU2NoZW1hcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgdmFsaWRhdG9ycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgaW1wb3J0X2Vycm9yLkdlbmtpdEVycm9yIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHNjaGVtYVxuICB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgIG1lc3NhZ2U6IGBTY2hlbWEgdmFsaWRhdGlvbiBmYWlsZWQuIFBhcnNlIEVycm9yczpcblxuJHtlcnJvcnMubWFwKChlKSA9PiBgLSAke2UucGF0aH06ICR7ZS5tZXNzYWdlfWApLmpvaW4oXCJcXG5cIil9XG5cblByb3ZpZGVkIGRhdGE6XG5cbiR7SlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMil9XG5cblJlcXVpcmVkIEpTT04gc2NoZW1hOlxuXG4ke0pTT04uc3RyaW5naWZ5KHNjaGVtYSwgbnVsbCwgMil9YCxcbiAgICAgIGRldGFpbDogeyBlcnJvcnMsIHNjaGVtYSB9XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHRvSnNvblNjaGVtYSh7XG4gIGpzb25TY2hlbWEsXG4gIHNjaGVtYVxufSkge1xuICBpZiAoIWpzb25TY2hlbWEgJiYgIXNjaGVtYSkgcmV0dXJuIG51bGw7XG4gIGlmIChqc29uU2NoZW1hKSByZXR1cm4ganNvblNjaGVtYTtcbiAgaWYgKGpzb25TY2hlbWFzLmhhcyhzY2hlbWEpKSByZXR1cm4ganNvblNjaGVtYXMuZ2V0KHNjaGVtYSk7XG4gIGNvbnN0IG91dFNjaGVtYSA9ICgwLCBpbXBvcnRfem9kX3RvX2pzb25fc2NoZW1hLmRlZmF1bHQpKHNjaGVtYSwge1xuICAgICRyZWZTdHJhdGVneTogXCJub25lXCIsXG4gICAgcmVtb3ZlQWRkaXRpb25hbFN0cmF0ZWd5OiBcInN0cmljdFwiXG4gIH0pO1xuICBqc29uU2NoZW1hcy5zZXQoc2NoZW1hLCBvdXRTY2hlbWEpO1xuICByZXR1cm4gb3V0U2NoZW1hO1xufVxuZnVuY3Rpb24gdG9FcnJvckRldGFpbChlcnJvcikge1xuICByZXR1cm4ge1xuICAgIHBhdGg6IGVycm9yLmluc3RhbmNlUGF0aC5zdWJzdHJpbmcoMSkucmVwbGFjZSgvXFwvL2csIFwiLlwiKSB8fCBcIihyb290KVwiLFxuICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgfTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlU2NoZW1hKGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgdG9WYWxpZGF0ZSA9IHRvSnNvblNjaGVtYShvcHRpb25zKTtcbiAgaWYgKCF0b1ZhbGlkYXRlKSB7XG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIHNjaGVtYTogdG9WYWxpZGF0ZSB9O1xuICB9XG4gIGNvbnN0IHZhbGlkYXRvciA9IHZhbGlkYXRvcnMuZ2V0KHRvVmFsaWRhdGUpIHx8IGFqdi5jb21waWxlKHRvVmFsaWRhdGUpO1xuICBjb25zdCB2YWxpZCA9IHZhbGlkYXRvcihkYXRhKTtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdG9yLmVycm9ycz8ubWFwKChlKSA9PiBlKTtcbiAgcmV0dXJuIHsgdmFsaWQsIGVycm9yczogZXJyb3JzPy5tYXAodG9FcnJvckRldGFpbCksIHNjaGVtYTogdG9WYWxpZGF0ZSB9O1xufVxuZnVuY3Rpb24gcGFyc2VTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB7IHZhbGlkLCBlcnJvcnMsIHNjaGVtYSB9ID0gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucyk7XG4gIGlmICghdmFsaWQpIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoeyBkYXRhLCBlcnJvcnMsIHNjaGVtYSB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBkZWZpbmVTY2hlbWEocmVnaXN0cnksIG5hbWUsIHNjaGVtYSkge1xuICByZWdpc3RyeS5yZWdpc3RlclNjaGVtYShuYW1lLCB7IHNjaGVtYSB9KTtcbiAgcmV0dXJuIHNjaGVtYTtcbn1cbmZ1bmN0aW9uIGRlZmluZUpzb25TY2hlbWEocmVnaXN0cnksIG5hbWUsIGpzb25TY2hlbWEpIHtcbiAgcmVnaXN0cnkucmVnaXN0ZXJTY2hlbWEobmFtZSwgeyBqc29uU2NoZW1hIH0pO1xuICByZXR1cm4ganNvblNjaGVtYTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBWYWxpZGF0aW9uRXJyb3IsXG4gIGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYSxcbiAgcGFyc2VTY2hlbWEsXG4gIHRvSnNvblNjaGVtYSxcbiAgdmFsaWRhdGVTY2hlbWEsXG4gIHpcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/schema.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   defineJsonSchema: () => (/* binding */ defineJsonSchema),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   parseSchema: () => (/* binding */ parseSchema),\n/* harmony export */   toJsonSchema: () => (/* binding */ toJsonSchema),\n/* harmony export */   validateSchema: () => (/* binding */ validateSchema),\n/* harmony export */   z: () => (/* reexport safe */ zod__WEBPACK_IMPORTED_MODULE_4__.z)\n/* harmony export */ });\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ajv */ \"(action-browser)/./node_modules/ajv/dist/ajv.js\");\n/* harmony import */ var ajv_formats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ajv-formats */ \"(action-browser)/./node_modules/ajv-formats/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod-to-json-schema */ \"(action-browser)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\n\n\n\n\n\nconst ajv = new ajv__WEBPACK_IMPORTED_MODULE_0__();\najv_formats__WEBPACK_IMPORTED_MODULE_1__(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends _error_js__WEBPACK_IMPORTED_MODULE_3__.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema) return null;\n  if (jsonSchema) return jsonSchema;\n  if (jsonSchemas.has(schema)) return jsonSchemas.get(schema);\n  const outSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = validator.errors?.map((e) => e);\n  return { valid, errors: errors?.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid) throw new ValidationError({ data, errors, schema });\n  return data;\n}\nfunction defineSchema(registry, name, schema) {\n  registry.registerSchema(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(registry, name, jsonSchema) {\n  registry.registerSchema(name, { jsonSchema });\n  return jsonSchema;\n}\n\n//# sourceMappingURL=schema.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNCO0FBQ2U7QUFDYjtBQUN5QjtBQUNSO0FBQ3pDLGdCQUFnQixnQ0FBRztBQUNuQix3Q0FBVTtBQUNWO0FBQ0E7QUFDQSw4QkFBOEIsa0RBQVc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLEVBQUUsdUJBQXVCLE9BQU8sSUFBSSxVQUFVOztBQUU5Qzs7QUFFQSxFQUFFOztBQUVGOztBQUVBLEVBQUUsZ0NBQWdDO0FBQ2xDLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOERBQWU7QUFDbkM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDLDBDQUEwQyxzQkFBc0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFlBQVk7QUFDOUM7QUFDQTtBQVNFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvc2NoZW1hLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQWp2IGZyb20gXCJhanZcIjtcbmltcG9ydCBhZGRGb3JtYXRzIGZyb20gXCJhanYtZm9ybWF0c1wiO1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB6b2RUb0pzb25TY2hlbWEgZnJvbSBcInpvZC10by1qc29uLXNjaGVtYVwiO1xuaW1wb3J0IHsgR2Vua2l0RXJyb3IgfSBmcm9tIFwiLi9lcnJvci5qc1wiO1xuY29uc3QgYWp2ID0gbmV3IEFqdigpO1xuYWRkRm9ybWF0cyhhanYpO1xuY29uc3QganNvblNjaGVtYXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHZhbGlkYXRvcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEdlbmtpdEVycm9yIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHNjaGVtYVxuICB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgIG1lc3NhZ2U6IGBTY2hlbWEgdmFsaWRhdGlvbiBmYWlsZWQuIFBhcnNlIEVycm9yczpcblxuJHtlcnJvcnMubWFwKChlKSA9PiBgLSAke2UucGF0aH06ICR7ZS5tZXNzYWdlfWApLmpvaW4oXCJcXG5cIil9XG5cblByb3ZpZGVkIGRhdGE6XG5cbiR7SlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMil9XG5cblJlcXVpcmVkIEpTT04gc2NoZW1hOlxuXG4ke0pTT04uc3RyaW5naWZ5KHNjaGVtYSwgbnVsbCwgMil9YCxcbiAgICAgIGRldGFpbDogeyBlcnJvcnMsIHNjaGVtYSB9XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHRvSnNvblNjaGVtYSh7XG4gIGpzb25TY2hlbWEsXG4gIHNjaGVtYVxufSkge1xuICBpZiAoIWpzb25TY2hlbWEgJiYgIXNjaGVtYSkgcmV0dXJuIG51bGw7XG4gIGlmIChqc29uU2NoZW1hKSByZXR1cm4ganNvblNjaGVtYTtcbiAgaWYgKGpzb25TY2hlbWFzLmhhcyhzY2hlbWEpKSByZXR1cm4ganNvblNjaGVtYXMuZ2V0KHNjaGVtYSk7XG4gIGNvbnN0IG91dFNjaGVtYSA9IHpvZFRvSnNvblNjaGVtYShzY2hlbWEsIHtcbiAgICAkcmVmU3RyYXRlZ3k6IFwibm9uZVwiLFxuICAgIHJlbW92ZUFkZGl0aW9uYWxTdHJhdGVneTogXCJzdHJpY3RcIlxuICB9KTtcbiAganNvblNjaGVtYXMuc2V0KHNjaGVtYSwgb3V0U2NoZW1hKTtcbiAgcmV0dXJuIG91dFNjaGVtYTtcbn1cbmZ1bmN0aW9uIHRvRXJyb3JEZXRhaWwoZXJyb3IpIHtcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBlcnJvci5pbnN0YW5jZVBhdGguc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1xcLy9nLCBcIi5cIikgfHwgXCIocm9vdClcIixcbiAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gIH07XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYShkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IHRvVmFsaWRhdGUgPSB0b0pzb25TY2hlbWEob3B0aW9ucyk7XG4gIGlmICghdG9WYWxpZGF0ZSkge1xuICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBzY2hlbWE6IHRvVmFsaWRhdGUgfTtcbiAgfVxuICBjb25zdCB2YWxpZGF0b3IgPSB2YWxpZGF0b3JzLmdldCh0b1ZhbGlkYXRlKSB8fCBhanYuY29tcGlsZSh0b1ZhbGlkYXRlKTtcbiAgY29uc3QgdmFsaWQgPSB2YWxpZGF0b3IoZGF0YSk7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRvci5lcnJvcnM/Lm1hcCgoZSkgPT4gZSk7XG4gIHJldHVybiB7IHZhbGlkLCBlcnJvcnM6IGVycm9ycz8ubWFwKHRvRXJyb3JEZXRhaWwpLCBzY2hlbWE6IHRvVmFsaWRhdGUgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlU2NoZW1hKGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyB2YWxpZCwgZXJyb3JzLCBzY2hlbWEgfSA9IHZhbGlkYXRlU2NoZW1hKGRhdGEsIG9wdGlvbnMpO1xuICBpZiAoIXZhbGlkKSB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKHsgZGF0YSwgZXJyb3JzLCBzY2hlbWEgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gZGVmaW5lU2NoZW1hKHJlZ2lzdHJ5LCBuYW1lLCBzY2hlbWEpIHtcbiAgcmVnaXN0cnkucmVnaXN0ZXJTY2hlbWEobmFtZSwgeyBzY2hlbWEgfSk7XG4gIHJldHVybiBzY2hlbWE7XG59XG5mdW5jdGlvbiBkZWZpbmVKc29uU2NoZW1hKHJlZ2lzdHJ5LCBuYW1lLCBqc29uU2NoZW1hKSB7XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyU2NoZW1hKG5hbWUsIHsganNvblNjaGVtYSB9KTtcbiAgcmV0dXJuIGpzb25TY2hlbWE7XG59XG5leHBvcnQge1xuICBWYWxpZGF0aW9uRXJyb3IsXG4gIGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYSxcbiAgcGFyc2VTY2hlbWEsXG4gIHRvSnNvblNjaGVtYSxcbiAgdmFsaWRhdGVTY2hlbWEsXG4gIHpcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWEubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/schema.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/statusTypes.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar statusTypes_exports = {};\n__export(statusTypes_exports, {\n  StatusCodes: () => StatusCodes,\n  StatusNameSchema: () => StatusNameSchema,\n  StatusSchema: () => StatusSchema,\n  httpStatusCode: () => httpStatusCode\n});\nmodule.exports = __toCommonJS(statusTypes_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar StatusCodes = /* @__PURE__ */ ((StatusCodes2) => {\n  StatusCodes2[StatusCodes2[\"OK\"] = 0] = \"OK\";\n  StatusCodes2[StatusCodes2[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  StatusCodes2[StatusCodes2[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  StatusCodes2[StatusCodes2[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  StatusCodes2[StatusCodes2[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  StatusCodes2[StatusCodes2[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  StatusCodes2[StatusCodes2[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  StatusCodes2[StatusCodes2[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  StatusCodes2[StatusCodes2[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  StatusCodes2[StatusCodes2[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  StatusCodes2[StatusCodes2[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  StatusCodes2[StatusCodes2[\"ABORTED\"] = 10] = \"ABORTED\";\n  StatusCodes2[StatusCodes2[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  StatusCodes2[StatusCodes2[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  StatusCodes2[StatusCodes2[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  StatusCodes2[StatusCodes2[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  StatusCodes2[StatusCodes2[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n  return StatusCodes2;\n})(StatusCodes || {});\nconst StatusNameSchema = z.enum([\n  \"OK\",\n  \"CANCELLED\",\n  \"UNKNOWN\",\n  \"INVALID_ARGUMENT\",\n  \"DEADLINE_EXCEEDED\",\n  \"NOT_FOUND\",\n  \"ALREADY_EXISTS\",\n  \"PERMISSION_DENIED\",\n  \"UNAUTHENTICATED\",\n  \"RESOURCE_EXHAUSTED\",\n  \"FAILED_PRECONDITION\",\n  \"ABORTED\",\n  \"OUT_OF_RANGE\",\n  \"UNIMPLEMENTED\",\n  \"INTERNAL\",\n  \"UNAVAILABLE\",\n  \"DATA_LOSS\"\n]);\nconst statusCodeMap = {\n  OK: 200,\n  CANCELLED: 499,\n  UNKNOWN: 500,\n  INVALID_ARGUMENT: 400,\n  DEADLINE_EXCEEDED: 504,\n  NOT_FOUND: 404,\n  ALREADY_EXISTS: 409,\n  PERMISSION_DENIED: 403,\n  UNAUTHENTICATED: 401,\n  RESOURCE_EXHAUSTED: 429,\n  FAILED_PRECONDITION: 400,\n  ABORTED: 409,\n  OUT_OF_RANGE: 400,\n  UNIMPLEMENTED: 501,\n  INTERNAL: 500,\n  UNAVAILABLE: 503,\n  DATA_LOSS: 500\n};\nfunction httpStatusCode(status) {\n  if (!(status in statusCodeMap)) {\n    throw new Error(`Invalid status code ${status}`);\n  }\n  return statusCodeMap[status];\n}\nconst StatusCodesSchema = z.nativeEnum(StatusCodes);\nconst StatusSchema = z.object({\n  code: StatusCodesSchema,\n  message: z.string(),\n  details: z.any().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=statusTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLDZEQUFLO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUI7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUtMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvc3RhdHVzVHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHN0YXR1c1R5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHN0YXR1c1R5cGVzX2V4cG9ydHMsIHtcbiAgU3RhdHVzQ29kZXM6ICgpID0+IFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hOiAoKSA9PiBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWE6ICgpID0+IFN0YXR1c1NjaGVtYSxcbiAgaHR0cFN0YXR1c0NvZGU6ICgpID0+IGh0dHBTdGF0dXNDb2RlXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHN0YXR1c1R5cGVzX2V4cG9ydHMpO1xudmFyIHogPSBfX3RvRVNNKHJlcXVpcmUoXCJ6b2RcIikpO1xudmFyIFN0YXR1c0NvZGVzID0gLyogQF9fUFVSRV9fICovICgoU3RhdHVzQ29kZXMyKSA9PiB7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJPS1wiXSA9IDBdID0gXCJPS1wiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiQ0FOQ0VMTEVEXCJdID0gMV0gPSBcIkNBTkNFTExFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiVU5LTk9XTlwiXSA9IDJdID0gXCJVTktOT1dOXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJJTlZBTElEX0FSR1VNRU5UXCJdID0gM10gPSBcIklOVkFMSURfQVJHVU1FTlRcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkRFQURMSU5FX0VYQ0VFREVEXCJdID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJOT1RfRk9VTkRcIl0gPSA1XSA9IFwiTk9UX0ZPVU5EXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJBTFJFQURZX0VYSVNUU1wiXSA9IDZdID0gXCJBTFJFQURZX0VYSVNUU1wiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOQVVUSEVOVElDQVRFRFwiXSA9IDE2XSA9IFwiVU5BVVRIRU5USUNBVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJSRVNPVVJDRV9FWEhBVVNURURcIl0gPSA4XSA9IFwiUkVTT1VSQ0VfRVhIQVVTVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkFCT1JURURcIl0gPSAxMF0gPSBcIkFCT1JURURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIk9VVF9PRl9SQU5HRVwiXSA9IDExXSA9IFwiT1VUX09GX1JBTkdFXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJJTlRFUk5BTFwiXSA9IDEzXSA9IFwiSU5URVJOQUxcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOQVZBSUxBQkxFXCJdID0gMTRdID0gXCJVTkFWQUlMQUJMRVwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcbiAgcmV0dXJuIFN0YXR1c0NvZGVzMjtcbn0pKFN0YXR1c0NvZGVzIHx8IHt9KTtcbmNvbnN0IFN0YXR1c05hbWVTY2hlbWEgPSB6LmVudW0oW1xuICBcIk9LXCIsXG4gIFwiQ0FOQ0VMTEVEXCIsXG4gIFwiVU5LTk9XTlwiLFxuICBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgXCJERUFETElORV9FWENFRURFRFwiLFxuICBcIk5PVF9GT1VORFwiLFxuICBcIkFMUkVBRFlfRVhJU1RTXCIsXG4gIFwiUEVSTUlTU0lPTl9ERU5JRURcIixcbiAgXCJVTkFVVEhFTlRJQ0FURURcIixcbiAgXCJSRVNPVVJDRV9FWEhBVVNURURcIixcbiAgXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gIFwiQUJPUlRFRFwiLFxuICBcIk9VVF9PRl9SQU5HRVwiLFxuICBcIlVOSU1QTEVNRU5URURcIixcbiAgXCJJTlRFUk5BTFwiLFxuICBcIlVOQVZBSUxBQkxFXCIsXG4gIFwiREFUQV9MT1NTXCJcbl0pO1xuY29uc3Qgc3RhdHVzQ29kZU1hcCA9IHtcbiAgT0s6IDIwMCxcbiAgQ0FOQ0VMTEVEOiA0OTksXG4gIFVOS05PV046IDUwMCxcbiAgSU5WQUxJRF9BUkdVTUVOVDogNDAwLFxuICBERUFETElORV9FWENFRURFRDogNTA0LFxuICBOT1RfRk9VTkQ6IDQwNCxcbiAgQUxSRUFEWV9FWElTVFM6IDQwOSxcbiAgUEVSTUlTU0lPTl9ERU5JRUQ6IDQwMyxcbiAgVU5BVVRIRU5USUNBVEVEOiA0MDEsXG4gIFJFU09VUkNFX0VYSEFVU1RFRDogNDI5LFxuICBGQUlMRURfUFJFQ09ORElUSU9OOiA0MDAsXG4gIEFCT1JURUQ6IDQwOSxcbiAgT1VUX09GX1JBTkdFOiA0MDAsXG4gIFVOSU1QTEVNRU5URUQ6IDUwMSxcbiAgSU5URVJOQUw6IDUwMCxcbiAgVU5BVkFJTEFCTEU6IDUwMyxcbiAgREFUQV9MT1NTOiA1MDBcbn07XG5mdW5jdGlvbiBodHRwU3RhdHVzQ29kZShzdGF0dXMpIHtcbiAgaWYgKCEoc3RhdHVzIGluIHN0YXR1c0NvZGVNYXApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHN0YXR1cyBjb2RlICR7c3RhdHVzfWApO1xuICB9XG4gIHJldHVybiBzdGF0dXNDb2RlTWFwW3N0YXR1c107XG59XG5jb25zdCBTdGF0dXNDb2Rlc1NjaGVtYSA9IHoubmF0aXZlRW51bShTdGF0dXNDb2Rlcyk7XG5jb25zdCBTdGF0dXNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGNvZGU6IFN0YXR1c0NvZGVzU2NoZW1hLFxuICBtZXNzYWdlOiB6LnN0cmluZygpLFxuICBkZXRhaWxzOiB6LmFueSgpLm9wdGlvbmFsKClcbn0pO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWEsXG4gIGh0dHBTdGF0dXNDb2RlXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1c1R5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/telemetryTypes.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar telemetryTypes_exports = {};\nmodule.exports = __toCommonJS(telemetryTypes_exports);\n//# sourceMappingURL=telemetryTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90ZWxlbWV0cnlUeXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdGVsZW1ldHJ5VHlwZXNfZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModGVsZW1ldHJ5VHlwZXNfZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZWxlbWV0cnlUeXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tracing_exports = {};\n__export(tracing_exports, {\n  cleanUpTracing: () => cleanUpTracing,\n  enableTelemetry: () => enableTelemetry,\n  ensureBasicTelemetryInstrumentation: () => ensureBasicTelemetryInstrumentation,\n  flushTracing: () => flushTracing\n});\nmodule.exports = __toCommonJS(tracing_exports);\nvar import_sdk_node = __webpack_require__(/*! @opentelemetry/sdk-node */ \"(action-browser)/./node_modules/@opentelemetry/sdk-node/build/src/index.js\");\nvar import_sdk_trace_base = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(action-browser)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_exporter = __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/processor.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/types.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\"), module.exports);\nlet telemetrySDK = null;\nlet nodeOtelConfig = null;\nconst instrumentationKey = \"__GENKIT_TELEMETRY_INSTRUMENTED\";\nasync function ensureBasicTelemetryInstrumentation() {\n  if (global[instrumentationKey]) {\n    return await global[instrumentationKey];\n  }\n  await enableTelemetry({});\n}\nasync function enableTelemetry(telemetryConfig) {\n  if (process.env.GENKIT_TELEMETRY_SERVER) {\n    (0, import_exporter.setTelemetryServerUrl)(process.env.GENKIT_TELEMETRY_SERVER);\n  }\n  global[instrumentationKey] = telemetryConfig instanceof Promise ? telemetryConfig : Promise.resolve();\n  telemetryConfig = telemetryConfig instanceof Promise ? await telemetryConfig : telemetryConfig;\n  nodeOtelConfig = telemetryConfig || {};\n  const processors = [createTelemetryServerProcessor()];\n  if (nodeOtelConfig.traceExporter) {\n    throw new Error(\"Please specify spanProcessors instead.\");\n  }\n  if (nodeOtelConfig.spanProcessors) {\n    processors.push(...nodeOtelConfig.spanProcessors);\n  }\n  if (nodeOtelConfig.spanProcessor) {\n    processors.push(nodeOtelConfig.spanProcessor);\n    delete nodeOtelConfig.spanProcessor;\n  }\n  nodeOtelConfig.spanProcessors = processors;\n  telemetrySDK = new import_sdk_node.NodeSDK(nodeOtelConfig);\n  telemetrySDK.start();\n  process.on(\"SIGTERM\", async () => await cleanUpTracing());\n}\nasync function cleanUpTracing() {\n  if (!telemetrySDK) {\n    return;\n  }\n  await maybeFlushMetrics();\n  await telemetrySDK.shutdown();\n  import_logging.logger.debug(\"OpenTelemetry SDK shut down.\");\n  telemetrySDK = null;\n}\nfunction createTelemetryServerProcessor() {\n  const exporter = new import_exporter.TraceServerExporter();\n  return (0, import_utils.isDevEnv)() ? new import_sdk_trace_base.SimpleSpanProcessor(exporter) : new import_sdk_trace_base.BatchSpanProcessor(exporter);\n}\nfunction maybeFlushMetrics() {\n  if (nodeOtelConfig?.metricReader) {\n    return nodeOtelConfig.metricReader.forceFlush();\n  }\n  return Promise.resolve();\n}\nasync function flushTracing() {\n  if (nodeOtelConfig?.spanProcessors) {\n    await Promise.all(nodeOtelConfig.spanProcessors.map((p) => p.forceFlush()));\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDJHQUF5QjtBQUN2RCw0QkFBNEIsbUJBQU8sQ0FBQyx1SEFBK0I7QUFDbkUscUJBQXFCLG1CQUFPLENBQUMsb0ZBQWM7QUFDM0Msc0JBQXNCLG1CQUFPLENBQUMsc0dBQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDLDRCQUE0QixtQkFBTyxDQUFDLHNHQUF1QjtBQUMzRCw0QkFBNEIsbUJBQU8sQ0FBQyxvSEFBOEI7QUFDbEUsNEJBQTRCLG1CQUFPLENBQUMsd0dBQXdCO0FBQzVELDRCQUE0QixtQkFBTyxDQUFDLGdHQUFvQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FTTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3JlRXhwb3J0ID0gKHRhcmdldCwgbW9kLCBzZWNvbmRUYXJnZXQpID0+IChfX2NvcHlQcm9wcyh0YXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpLCBzZWNvbmRUYXJnZXQgJiYgX19jb3B5UHJvcHMoc2Vjb25kVGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0cmFjaW5nX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHRyYWNpbmdfZXhwb3J0cywge1xuICBjbGVhblVwVHJhY2luZzogKCkgPT4gY2xlYW5VcFRyYWNpbmcsXG4gIGVuYWJsZVRlbGVtZXRyeTogKCkgPT4gZW5hYmxlVGVsZW1ldHJ5LFxuICBlbnN1cmVCYXNpY1RlbGVtZXRyeUluc3RydW1lbnRhdGlvbjogKCkgPT4gZW5zdXJlQmFzaWNUZWxlbWV0cnlJbnN0cnVtZW50YXRpb24sXG4gIGZsdXNoVHJhY2luZzogKCkgPT4gZmx1c2hUcmFjaW5nXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRyYWNpbmdfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3Nka19ub2RlID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L3Nkay1ub2RlXCIpO1xudmFyIGltcG9ydF9zZGtfdHJhY2VfYmFzZSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZVwiKTtcbnZhciBpbXBvcnRfbG9nZ2luZyA9IHJlcXVpcmUoXCIuL2xvZ2dpbmcuanNcIik7XG52YXIgaW1wb3J0X2V4cG9ydGVyID0gcmVxdWlyZShcIi4vdHJhY2luZy9leHBvcnRlci5qc1wiKTtcbnZhciBpbXBvcnRfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbl9fcmVFeHBvcnQodHJhY2luZ19leHBvcnRzLCByZXF1aXJlKFwiLi90cmFjaW5nL2V4cG9ydGVyLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHRyYWNpbmdfZXhwb3J0cywgcmVxdWlyZShcIi4vdHJhY2luZy9pbnN0cnVtZW50YXRpb24uanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQodHJhY2luZ19leHBvcnRzLCByZXF1aXJlKFwiLi90cmFjaW5nL3Byb2Nlc3Nvci5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydCh0cmFjaW5nX2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RyYWNpbmcvdHlwZXMuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbmxldCB0ZWxlbWV0cnlTREsgPSBudWxsO1xubGV0IG5vZGVPdGVsQ29uZmlnID0gbnVsbDtcbmNvbnN0IGluc3RydW1lbnRhdGlvbktleSA9IFwiX19HRU5LSVRfVEVMRU1FVFJZX0lOU1RSVU1FTlRFRFwiO1xuYXN5bmMgZnVuY3Rpb24gZW5zdXJlQmFzaWNUZWxlbWV0cnlJbnN0cnVtZW50YXRpb24oKSB7XG4gIGlmIChnbG9iYWxbaW5zdHJ1bWVudGF0aW9uS2V5XSkge1xuICAgIHJldHVybiBhd2FpdCBnbG9iYWxbaW5zdHJ1bWVudGF0aW9uS2V5XTtcbiAgfVxuICBhd2FpdCBlbmFibGVUZWxlbWV0cnkoe30pO1xufVxuYXN5bmMgZnVuY3Rpb24gZW5hYmxlVGVsZW1ldHJ5KHRlbGVtZXRyeUNvbmZpZykge1xuICBpZiAocHJvY2Vzcy5lbnYuR0VOS0lUX1RFTEVNRVRSWV9TRVJWRVIpIHtcbiAgICAoMCwgaW1wb3J0X2V4cG9ydGVyLnNldFRlbGVtZXRyeVNlcnZlclVybCkocHJvY2Vzcy5lbnYuR0VOS0lUX1RFTEVNRVRSWV9TRVJWRVIpO1xuICB9XG4gIGdsb2JhbFtpbnN0cnVtZW50YXRpb25LZXldID0gdGVsZW1ldHJ5Q29uZmlnIGluc3RhbmNlb2YgUHJvbWlzZSA/IHRlbGVtZXRyeUNvbmZpZyA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB0ZWxlbWV0cnlDb25maWcgPSB0ZWxlbWV0cnlDb25maWcgaW5zdGFuY2VvZiBQcm9taXNlID8gYXdhaXQgdGVsZW1ldHJ5Q29uZmlnIDogdGVsZW1ldHJ5Q29uZmlnO1xuICBub2RlT3RlbENvbmZpZyA9IHRlbGVtZXRyeUNvbmZpZyB8fCB7fTtcbiAgY29uc3QgcHJvY2Vzc29ycyA9IFtjcmVhdGVUZWxlbWV0cnlTZXJ2ZXJQcm9jZXNzb3IoKV07XG4gIGlmIChub2RlT3RlbENvbmZpZy50cmFjZUV4cG9ydGVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHNwZWNpZnkgc3BhblByb2Nlc3NvcnMgaW5zdGVhZC5cIik7XG4gIH1cbiAgaWYgKG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3JzKSB7XG4gICAgcHJvY2Vzc29ycy5wdXNoKC4uLm5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3JzKTtcbiAgfVxuICBpZiAobm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3Nvcikge1xuICAgIHByb2Nlc3NvcnMucHVzaChub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29yKTtcbiAgICBkZWxldGUgbm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3NvcjtcbiAgfVxuICBub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29ycyA9IHByb2Nlc3NvcnM7XG4gIHRlbGVtZXRyeVNESyA9IG5ldyBpbXBvcnRfc2RrX25vZGUuTm9kZVNESyhub2RlT3RlbENvbmZpZyk7XG4gIHRlbGVtZXRyeVNESy5zdGFydCgpO1xuICBwcm9jZXNzLm9uKFwiU0lHVEVSTVwiLCBhc3luYyAoKSA9PiBhd2FpdCBjbGVhblVwVHJhY2luZygpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNsZWFuVXBUcmFjaW5nKCkge1xuICBpZiAoIXRlbGVtZXRyeVNESykge1xuICAgIHJldHVybjtcbiAgfVxuICBhd2FpdCBtYXliZUZsdXNoTWV0cmljcygpO1xuICBhd2FpdCB0ZWxlbWV0cnlTREsuc2h1dGRvd24oKTtcbiAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmRlYnVnKFwiT3BlblRlbGVtZXRyeSBTREsgc2h1dCBkb3duLlwiKTtcbiAgdGVsZW1ldHJ5U0RLID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRlbGVtZXRyeVNlcnZlclByb2Nlc3NvcigpIHtcbiAgY29uc3QgZXhwb3J0ZXIgPSBuZXcgaW1wb3J0X2V4cG9ydGVyLlRyYWNlU2VydmVyRXhwb3J0ZXIoKTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbHMuaXNEZXZFbnYpKCkgPyBuZXcgaW1wb3J0X3Nka190cmFjZV9iYXNlLlNpbXBsZVNwYW5Qcm9jZXNzb3IoZXhwb3J0ZXIpIDogbmV3IGltcG9ydF9zZGtfdHJhY2VfYmFzZS5CYXRjaFNwYW5Qcm9jZXNzb3IoZXhwb3J0ZXIpO1xufVxuZnVuY3Rpb24gbWF5YmVGbHVzaE1ldHJpY3MoKSB7XG4gIGlmIChub2RlT3RlbENvbmZpZz8ubWV0cmljUmVhZGVyKSB7XG4gICAgcmV0dXJuIG5vZGVPdGVsQ29uZmlnLm1ldHJpY1JlYWRlci5mb3JjZUZsdXNoKCk7XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuYXN5bmMgZnVuY3Rpb24gZmx1c2hUcmFjaW5nKCkge1xuICBpZiAobm9kZU90ZWxDb25maWc/LnNwYW5Qcm9jZXNzb3JzKSB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwobm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3NvcnMubWFwKChwKSA9PiBwLmZvcmNlRmx1c2goKSkpO1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xlYW5VcFRyYWNpbmcsXG4gIGVuYWJsZVRlbGVtZXRyeSxcbiAgZW5zdXJlQmFzaWNUZWxlbWV0cnlJbnN0cnVtZW50YXRpb24sXG4gIGZsdXNoVHJhY2luZyxcbiAgLi4ucmVxdWlyZShcIi4vdHJhY2luZy9leHBvcnRlci5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdHJhY2luZy9pbnN0cnVtZW50YXRpb24uanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3RyYWNpbmcvcHJvY2Vzc29yLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi90cmFjaW5nL3R5cGVzLmpzXCIpXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/exporter.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar exporter_exports = {};\n__export(exporter_exports, {\n  TraceServerExporter: () => TraceServerExporter,\n  setTelemetryServerUrl: () => setTelemetryServerUrl,\n  telemetryServerUrl: () => telemetryServerUrl\n});\nmodule.exports = __toCommonJS(exporter_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_core = __webpack_require__(/*! @opentelemetry/core */ \"(action-browser)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\nlet telemetryServerUrl;\nfunction setTelemetryServerUrl(url) {\n  telemetryServerUrl = url;\n}\nclass TraceServerExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(spans, resultCallback) {\n    this._sendSpans(spans, resultCallback);\n  }\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown() {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n  /**\n   * Converts span info into trace store format.\n   * @param span\n   */\n  _exportInfo(span) {\n    const spanData = {\n      spanId: span.spanContext().spanId,\n      traceId: span.spanContext().traceId,\n      startTime: transformTime(span.startTime),\n      endTime: transformTime(span.endTime),\n      attributes: { ...span.attributes },\n      displayName: span.name,\n      links: span.links,\n      spanKind: import_api.SpanKind[span.kind],\n      parentSpanId: span.parentSpanId,\n      sameProcessAsParentSpan: { value: !span.spanContext().isRemote },\n      status: span.status,\n      timeEvents: {\n        timeEvent: span.events.map((e) => ({\n          time: transformTime(e.time),\n          annotation: {\n            attributes: e.attributes ?? {},\n            description: e.name\n          }\n        }))\n      }\n    };\n    if (span.instrumentationLibrary !== void 0) {\n      spanData.instrumentationLibrary = {\n        name: span.instrumentationLibrary.name\n      };\n      if (span.instrumentationLibrary.schemaUrl !== void 0) {\n        spanData.instrumentationLibrary.schemaUrl = span.instrumentationLibrary.schemaUrl;\n      }\n      if (span.instrumentationLibrary.version !== void 0) {\n        spanData.instrumentationLibrary.version = span.instrumentationLibrary.version;\n      }\n    }\n    (0, import_utils.deleteUndefinedProps)(spanData);\n    return spanData;\n  }\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  async _sendSpans(spans, done) {\n    const traces = {};\n    for (const span of spans) {\n      if (!traces[span.spanContext().traceId]) {\n        traces[span.spanContext().traceId] = [];\n      }\n      traces[span.spanContext().traceId].push(span);\n    }\n    let error = false;\n    for (const traceId of Object.keys(traces)) {\n      try {\n        await this.save(traceId, traces[traceId]);\n      } catch (e) {\n        error = true;\n        import_logging.logger.error(`Failed to save trace ${traceId}`, e);\n      }\n      if (done) {\n        return done({\n          code: error ? import_core.ExportResultCode.FAILED : import_core.ExportResultCode.SUCCESS\n        });\n      }\n    }\n  }\n  async save(traceId, spans) {\n    if (!telemetryServerUrl) {\n      import_logging.logger.debug(\n        `Telemetry server is not configured, trace ${traceId} not saved!`\n      );\n      return;\n    }\n    const data = {\n      traceId,\n      spans: {}\n    };\n    for (const span of spans) {\n      const convertedSpan = this._exportInfo(span);\n      data.spans[convertedSpan.spanId] = convertedSpan;\n      if (!convertedSpan.parentSpanId) {\n        data.displayName = convertedSpan.displayName;\n        data.startTime = convertedSpan.startTime;\n        data.endTime = convertedSpan.endTime;\n      }\n    }\n    await fetch(`${telemetryServerUrl}/api/traces`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n}\nfunction transformTime(time) {\n  return (0, import_core.hrTimeToMilliseconds)(time);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=exporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar instrumentation_exports = {};\n__export(instrumentation_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  SPAN_TYPE_ATTR: () => SPAN_TYPE_ATTR,\n  appendSpan: () => appendSpan,\n  newTrace: () => newTrace,\n  runInNewSpan: () => runInNewSpan,\n  setCustomMetadataAttribute: () => setCustomMetadataAttribute,\n  setCustomMetadataAttributes: () => setCustomMetadataAttributes,\n  spanMetadataAlsKey: () => spanMetadataAlsKey,\n  toDisplayPath: () => toDisplayPath,\n  traceMetadataAlsKey: () => traceMetadataAlsKey\n});\nmodule.exports = __toCommonJS(instrumentation_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_tracing = __webpack_require__(/*! ../tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst spanMetadataAlsKey = \"core.tracing.instrumentation.span\";\nconst traceMetadataAlsKey = \"core.tracing.instrumentation.trace\";\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_TYPE_ATTR = ATTR_PREFIX + \":type\";\nconst TRACER_NAME = \"genkit-tracer\";\nconst TRACER_VERSION = \"v1\";\nasync function newTrace(registry, opts, fn) {\n  registry = registry.registry ? registry.registry : registry;\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const traceMetadata = registry.asyncStore.getStore(\n    traceMetadataAlsKey\n  ) || {\n    paths: /* @__PURE__ */ new Set(),\n    timestamp: import_node_perf_hooks.performance.now(),\n    featureName: opts.name\n  };\n  return await registry.asyncStore.run(\n    traceMetadataAlsKey,\n    traceMetadata,\n    () => runInNewSpan(\n      registry,\n      {\n        metadata: {\n          name: opts.name\n        },\n        labels: opts.labels,\n        links: opts.links\n      },\n      async (metadata, otSpan) => {\n        return await fn(metadata, otSpan);\n      }\n    )\n  );\n}\nasync function runInNewSpan(registry, opts, fn) {\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const resolvedRegistry = registry.registry ? registry.registry : registry;\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const parentStep = resolvedRegistry.asyncStore.getStore(spanMetadataAlsKey);\n  const isInRoot = parentStep?.isRoot === true;\n  if (!parentStep) opts.metadata.isRoot ||= true;\n  return await tracer.startActiveSpan(\n    opts.metadata.name,\n    { links: opts.links, root: opts.metadata.isRoot },\n    async (otSpan) => {\n      if (opts.labels) otSpan.setAttributes(opts.labels);\n      try {\n        opts.metadata.path = buildPath(\n          opts.metadata.name,\n          parentStep?.path || \"\",\n          opts.labels\n        );\n        const output = await resolvedRegistry.asyncStore.run(\n          spanMetadataAlsKey,\n          opts.metadata,\n          () => fn(opts.metadata, otSpan, isInRoot)\n        );\n        if (opts.metadata.state !== \"error\") {\n          opts.metadata.state = \"success\";\n        }\n        recordPath(resolvedRegistry, opts.metadata);\n        return output;\n      } catch (e) {\n        recordPath(resolvedRegistry, opts.metadata, e);\n        opts.metadata.state = \"error\";\n        otSpan.setStatus({\n          code: import_api.SpanStatusCode.ERROR,\n          message: getErrorMessage(e)\n        });\n        if (e instanceof Error) {\n          otSpan.recordException(e);\n        }\n        throw e;\n      } finally {\n        otSpan.setAttributes(metadataToAttributes(opts.metadata));\n        otSpan.end();\n      }\n    }\n  );\n}\nasync function appendSpan(traceId, parentSpanId, metadata, labels) {\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const spanContext = import_api.trace.setSpanContext(import_api.ROOT_CONTEXT, {\n    traceId,\n    traceFlags: 1,\n    // sampled\n    spanId: parentSpanId\n  });\n  const span = tracer.startSpan(metadata.name, {}, spanContext);\n  span.setAttributes(metadataToAttributes(metadata));\n  if (labels) {\n    span.setAttributes(labels);\n  }\n  span.end();\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction metadataToAttributes(metadata) {\n  const out = {};\n  Object.keys(metadata).forEach((key) => {\n    if (key === \"metadata\" && typeof metadata[key] === \"object\" && metadata.metadata) {\n      Object.entries(metadata.metadata).forEach(([metaKey, value]) => {\n        out[ATTR_PREFIX + \":metadata:\" + metaKey] = value;\n      });\n    } else if (key === \"input\" || typeof metadata[key] === \"object\") {\n      out[ATTR_PREFIX + \":\" + key] = JSON.stringify(metadata[key]);\n    } else {\n      out[ATTR_PREFIX + \":\" + key] = metadata[key];\n    }\n  });\n  return out;\n}\nfunction setCustomMetadataAttribute(registry, key, value) {\n  const currentStep = getCurrentSpan(registry);\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  currentStep.metadata[key] = value;\n}\nfunction setCustomMetadataAttributes(registry, values) {\n  const currentStep = getCurrentSpan(registry);\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  for (const [key, value] of Object.entries(values)) {\n    currentStep.metadata[key] = value;\n  }\n}\nfunction toDisplayPath(path) {\n  const pathPartRegex = /\\{([^\\,}]+),[^\\}]+\\}/g;\n  return Array.from(path.matchAll(pathPartRegex), (m) => m[1]).join(\" > \");\n}\nfunction getCurrentSpan(registry) {\n  const step = registry.asyncStore.getStore(spanMetadataAlsKey);\n  if (!step) {\n    throw new Error(\"running outside step context\");\n  }\n  return step;\n}\nfunction buildPath(name, parentPath, labels) {\n  const stepType = labels && labels[\"genkit:type\"] ? `,t:${labels[\"genkit:metadata:subtype\"] === \"flow\" ? \"flow\" : labels[\"genkit:type\"]}` : \"\";\n  return parentPath + `/{${name}${stepType}}`;\n}\nfunction recordPath(registry, spanMeta, err) {\n  const path = spanMeta.path || \"\";\n  const decoratedPath = decoratePathWithSubtype(spanMeta);\n  const paths = Array.from(\n    registry.asyncStore.getStore(traceMetadataAlsKey)?.paths || /* @__PURE__ */ new Set()\n  );\n  const status = err ? \"failure\" : \"success\";\n  if (!paths.some((p) => p.path.startsWith(path) && p.status === status)) {\n    const now = import_node_perf_hooks.performance.now();\n    const start = registry.asyncStore.getStore(traceMetadataAlsKey)?.timestamp || now;\n    registry.asyncStore.getStore(traceMetadataAlsKey)?.paths?.add({\n      path: decoratedPath,\n      error: err?.name,\n      latency: now - start,\n      status\n    });\n  }\n  spanMeta.path = decoratedPath;\n}\nfunction decoratePathWithSubtype(metadata) {\n  if (!metadata.path) {\n    return \"\";\n  }\n  const pathComponents = metadata.path.split(\"}/{\");\n  if (pathComponents.length == 1) {\n    return metadata.path;\n  }\n  const stepSubtype = metadata.metadata && metadata.metadata[\"subtype\"] ? `,s:${metadata.metadata[\"subtype\"]}` : \"\";\n  const root = `${pathComponents.slice(0, -1).join(\"}/{\")}}/`;\n  const decoratedStep = `{${pathComponents.at(-1)?.slice(0, -1)}${stepSubtype}}`;\n  return root + decoratedStep;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/processor.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar processor_exports = {};\n__export(processor_exports, {\n  GenkitSpanProcessorWrapper: () => GenkitSpanProcessorWrapper\n});\nmodule.exports = __toCommonJS(processor_exports);\nvar import_instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\");\nclass GenkitSpanProcessorWrapper {\n  constructor(processor) {\n    this.processor = processor;\n  }\n  forceFlush() {\n    return this.processor.forceFlush();\n  }\n  onStart(span, parentContext) {\n    return this.processor.onStart(span, parentContext);\n  }\n  onEnd(span) {\n    if (Object.keys(span.attributes).find((k) => k.startsWith(import_instrumentation.ATTR_PREFIX + \":\"))) {\n      return this.processor.onEnd(new FilteringReadableSpanProxy(span));\n    } else {\n      return this.processor.onEnd(span);\n    }\n  }\n  async shutdown() {\n    return this.processor.shutdown();\n  }\n}\nclass FilteringReadableSpanProxy {\n  constructor(span) {\n    this.span = span;\n  }\n  get name() {\n    return this.span.name;\n  }\n  get kind() {\n    return this.span.kind;\n  }\n  get parentSpanId() {\n    return this.span.parentSpanId;\n  }\n  get startTime() {\n    return this.span.startTime;\n  }\n  get endTime() {\n    return this.span.endTime;\n  }\n  get status() {\n    return this.span.status;\n  }\n  get attributes() {\n    const out = {};\n    for (const [key, value] of Object.entries(this.span.attributes)) {\n      if (!key.startsWith(import_instrumentation.ATTR_PREFIX + \":\")) {\n        out[key] = value;\n      }\n    }\n    return out;\n  }\n  get links() {\n    return this.span.links;\n  }\n  get events() {\n    return this.span.events;\n  }\n  get duration() {\n    return this.span.duration;\n  }\n  get ended() {\n    return this.span.ended;\n  }\n  get resource() {\n    return this.span.resource;\n  }\n  get instrumentationLibrary() {\n    return this.span.instrumentationLibrary;\n  }\n  get droppedAttributesCount() {\n    return this.span.droppedAttributesCount;\n  }\n  get droppedEventsCount() {\n    return this.span.droppedEventsCount;\n  }\n  get droppedLinksCount() {\n    return this.span.droppedLinksCount;\n  }\n  spanContext() {\n    return this.span.spanContext();\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=processor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvcHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdHJhY2luZy9wcm9jZXNzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHByb2Nlc3Nvcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChwcm9jZXNzb3JfZXhwb3J0cywge1xuICBHZW5raXRTcGFuUHJvY2Vzc29yV3JhcHBlcjogKCkgPT4gR2Vua2l0U3BhblByb2Nlc3NvcldyYXBwZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocHJvY2Vzc29yX2V4cG9ydHMpO1xudmFyIGltcG9ydF9pbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb24uanNcIik7XG5jbGFzcyBHZW5raXRTcGFuUHJvY2Vzc29yV3JhcHBlciB7XG4gIGNvbnN0cnVjdG9yKHByb2Nlc3Nvcikge1xuICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICB9XG4gIGZvcmNlRmx1c2goKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc29yLmZvcmNlRmx1c2goKTtcbiAgfVxuICBvblN0YXJ0KHNwYW4sIHBhcmVudENvbnRleHQpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3Iub25TdGFydChzcGFuLCBwYXJlbnRDb250ZXh0KTtcbiAgfVxuICBvbkVuZChzcGFuKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKHNwYW4uYXR0cmlidXRlcykuZmluZCgoaykgPT4gay5zdGFydHNXaXRoKGltcG9ydF9pbnN0cnVtZW50YXRpb24uQVRUUl9QUkVGSVggKyBcIjpcIikpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3Iub25FbmQobmV3IEZpbHRlcmluZ1JlYWRhYmxlU3BhblByb3h5KHNwYW4pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc29yLm9uRW5kKHNwYW4pO1xuICAgIH1cbiAgfVxuICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3Iuc2h1dGRvd24oKTtcbiAgfVxufVxuY2xhc3MgRmlsdGVyaW5nUmVhZGFibGVTcGFuUHJveHkge1xuICBjb25zdHJ1Y3RvcihzcGFuKSB7XG4gICAgdGhpcy5zcGFuID0gc3BhbjtcbiAgfVxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLm5hbWU7XG4gIH1cbiAgZ2V0IGtpbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5raW5kO1xuICB9XG4gIGdldCBwYXJlbnRTcGFuSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5wYXJlbnRTcGFuSWQ7XG4gIH1cbiAgZ2V0IHN0YXJ0VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnN0YXJ0VGltZTtcbiAgfVxuICBnZXQgZW5kVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmVuZFRpbWU7XG4gIH1cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnN0YXR1cztcbiAgfVxuICBnZXQgYXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBvdXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnNwYW4uYXR0cmlidXRlcykpIHtcbiAgICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoaW1wb3J0X2luc3RydW1lbnRhdGlvbi5BVFRSX1BSRUZJWCArIFwiOlwiKSkge1xuICAgICAgICBvdXRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIGdldCBsaW5rcygpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmxpbmtzO1xuICB9XG4gIGdldCBldmVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5ldmVudHM7XG4gIH1cbiAgZ2V0IGR1cmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHVyYXRpb247XG4gIH1cbiAgZ2V0IGVuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZW5kZWQ7XG4gIH1cbiAgZ2V0IHJlc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4ucmVzb3VyY2U7XG4gIH1cbiAgZ2V0IGluc3RydW1lbnRhdGlvbkxpYnJhcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5pbnN0cnVtZW50YXRpb25MaWJyYXJ5O1xuICB9XG4gIGdldCBkcm9wcGVkQXR0cmlidXRlc0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHJvcHBlZEF0dHJpYnV0ZXNDb3VudDtcbiAgfVxuICBnZXQgZHJvcHBlZEV2ZW50c0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHJvcHBlZEV2ZW50c0NvdW50O1xuICB9XG4gIGdldCBkcm9wcGVkTGlua3NDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmRyb3BwZWRMaW5rc0NvdW50O1xuICB9XG4gIHNwYW5Db250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uc3BhbkNvbnRleHQoKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/types.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  InstrumentationLibrarySchema: () => InstrumentationLibrarySchema,\n  LinkSchema: () => LinkSchema,\n  PathMetadataSchema: () => PathMetadataSchema,\n  SpanContextSchema: () => SpanContextSchema,\n  SpanDataSchema: () => SpanDataSchema,\n  SpanMetadataSchema: () => SpanMetadataSchema,\n  SpanStatusSchema: () => SpanStatusSchema,\n  TimeEventSchema: () => TimeEventSchema,\n  TraceDataSchema: () => TraceDataSchema,\n  TraceMetadataSchema: () => TraceMetadataSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\nconst PathMetadataSchema = import_zod.z.object({\n  path: import_zod.z.string(),\n  status: import_zod.z.string(),\n  error: import_zod.z.string().optional(),\n  latency: import_zod.z.number()\n});\nconst TraceMetadataSchema = import_zod.z.object({\n  featureName: import_zod.z.string().optional(),\n  paths: import_zod.z.set(PathMetadataSchema).optional(),\n  timestamp: import_zod.z.number()\n});\nconst SpanMetadataSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  state: import_zod.z.enum([\"success\", \"error\"]).optional(),\n  input: import_zod.z.any().optional(),\n  output: import_zod.z.any().optional(),\n  isRoot: import_zod.z.boolean().optional(),\n  metadata: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional(),\n  path: import_zod.z.string().optional()\n});\nconst SpanStatusSchema = import_zod.z.object({\n  code: import_zod.z.number(),\n  message: import_zod.z.string().optional()\n});\nconst TimeEventSchema = import_zod.z.object({\n  time: import_zod.z.number(),\n  annotation: import_zod.z.object({\n    attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n    description: import_zod.z.string()\n  })\n});\nconst SpanContextSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  spanId: import_zod.z.string(),\n  isRemote: import_zod.z.boolean().optional(),\n  traceFlags: import_zod.z.number()\n});\nconst LinkSchema = import_zod.z.object({\n  context: SpanContextSchema.optional(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()).optional(),\n  droppedAttributesCount: import_zod.z.number().optional()\n});\nconst InstrumentationLibrarySchema = import_zod.z.object({\n  name: import_zod.z.string().readonly(),\n  version: import_zod.z.string().optional().readonly(),\n  schemaUrl: import_zod.z.string().optional().readonly()\n});\nconst SpanDataSchema = import_zod.z.object({\n  spanId: import_zod.z.string(),\n  traceId: import_zod.z.string(),\n  parentSpanId: import_zod.z.string().optional(),\n  startTime: import_zod.z.number(),\n  endTime: import_zod.z.number(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n  displayName: import_zod.z.string(),\n  links: import_zod.z.array(LinkSchema).optional(),\n  instrumentationLibrary: InstrumentationLibrarySchema,\n  spanKind: import_zod.z.string(),\n  sameProcessAsParentSpan: import_zod.z.object({ value: import_zod.z.boolean() }).optional(),\n  status: SpanStatusSchema.optional(),\n  timeEvents: import_zod.z.object({\n    timeEvent: import_zod.z.array(TimeEventSchema)\n  }).optional(),\n  truncated: import_zod.z.boolean().optional()\n});\nconst TraceDataSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  displayName: import_zod.z.string().optional(),\n  startTime: import_zod.z.number().optional().describe(\"trace start time in milliseconds since the epoch\"),\n  endTime: import_zod.z.number().optional().describe(\"end time in milliseconds since the epoch\"),\n  spans: import_zod.z.record(import_zod.z.string(), SpanDataSchema)\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCwrQkFBK0I7QUFDaEY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLE1BQU0sQ0FXTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYTogKCkgPT4gSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYSxcbiAgTGlua1NjaGVtYTogKCkgPT4gTGlua1NjaGVtYSxcbiAgUGF0aE1ldGFkYXRhU2NoZW1hOiAoKSA9PiBQYXRoTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5Db250ZXh0U2NoZW1hOiAoKSA9PiBTcGFuQ29udGV4dFNjaGVtYSxcbiAgU3BhbkRhdGFTY2hlbWE6ICgpID0+IFNwYW5EYXRhU2NoZW1hLFxuICBTcGFuTWV0YWRhdGFTY2hlbWE6ICgpID0+IFNwYW5NZXRhZGF0YVNjaGVtYSxcbiAgU3BhblN0YXR1c1NjaGVtYTogKCkgPT4gU3BhblN0YXR1c1NjaGVtYSxcbiAgVGltZUV2ZW50U2NoZW1hOiAoKSA9PiBUaW1lRXZlbnRTY2hlbWEsXG4gIFRyYWNlRGF0YVNjaGVtYTogKCkgPT4gVHJhY2VEYXRhU2NoZW1hLFxuICBUcmFjZU1ldGFkYXRhU2NoZW1hOiAoKSA9PiBUcmFjZU1ldGFkYXRhU2NoZW1hXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHR5cGVzX2V4cG9ydHMpO1xudmFyIGltcG9ydF96b2QgPSByZXF1aXJlKFwiem9kXCIpO1xuY29uc3QgUGF0aE1ldGFkYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHBhdGg6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgc3RhdHVzOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIGVycm9yOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgbGF0ZW5jeTogaW1wb3J0X3pvZC56Lm51bWJlcigpXG59KTtcbmNvbnN0IFRyYWNlTWV0YWRhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgZmVhdHVyZU5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBwYXRoczogaW1wb3J0X3pvZC56LnNldChQYXRoTWV0YWRhdGFTY2hlbWEpLm9wdGlvbmFsKCksXG4gIHRpbWVzdGFtcDogaW1wb3J0X3pvZC56Lm51bWJlcigpXG59KTtcbmNvbnN0IFNwYW5NZXRhZGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBuYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHN0YXRlOiBpbXBvcnRfem9kLnouZW51bShbXCJzdWNjZXNzXCIsIFwiZXJyb3JcIl0pLm9wdGlvbmFsKCksXG4gIGlucHV0OiBpbXBvcnRfem9kLnouYW55KCkub3B0aW9uYWwoKSxcbiAgb3V0cHV0OiBpbXBvcnRfem9kLnouYW55KCkub3B0aW9uYWwoKSxcbiAgaXNSb290OiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIG1ldGFkYXRhOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgaW1wb3J0X3pvZC56LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICBwYXRoOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKVxufSk7XG5jb25zdCBTcGFuU3RhdHVzU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGNvZGU6IGltcG9ydF96b2Quei5udW1iZXIoKSxcbiAgbWVzc2FnZTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgVGltZUV2ZW50U2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKSxcbiAgYW5ub3RhdGlvbjogaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gICAgYXR0cmlidXRlczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5hbnkoKSksXG4gICAgZGVzY3JpcHRpb246IGltcG9ydF96b2Quei5zdHJpbmcoKVxuICB9KVxufSk7XG5jb25zdCBTcGFuQ29udGV4dFNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICB0cmFjZUlkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBpc1JlbW90ZTogaW1wb3J0X3pvZC56LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICB0cmFjZUZsYWdzOiBpbXBvcnRfem9kLnoubnVtYmVyKClcbn0pO1xuY29uc3QgTGlua1NjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBjb250ZXh0OiBTcGFuQ29udGV4dFNjaGVtYS5vcHRpb25hbCgpLFxuICBhdHRyaWJ1dGVzOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgaW1wb3J0X3pvZC56LmFueSgpKS5vcHRpb25hbCgpLFxuICBkcm9wcGVkQXR0cmlidXRlc0NvdW50OiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKVxufSk7XG5jb25zdCBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIG5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKS5yZWFkb25seSgpLFxuICB2ZXJzaW9uOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKS5yZWFkb25seSgpLFxuICBzY2hlbWFVcmw6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLnJlYWRvbmx5KClcbn0pO1xuY29uc3QgU3BhbkRhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgc3BhbklkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHRyYWNlSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgcGFyZW50U3BhbklkOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc3RhcnRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGVuZFRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKSxcbiAgYXR0cmlidXRlczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5hbnkoKSksXG4gIGRpc3BsYXlOYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIGxpbmtzOiBpbXBvcnRfem9kLnouYXJyYXkoTGlua1NjaGVtYSkub3B0aW9uYWwoKSxcbiAgaW5zdHJ1bWVudGF0aW9uTGlicmFyeTogSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYSxcbiAgc3BhbktpbmQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgc2FtZVByb2Nlc3NBc1BhcmVudFNwYW46IGltcG9ydF96b2Quei5vYmplY3QoeyB2YWx1ZTogaW1wb3J0X3pvZC56LmJvb2xlYW4oKSB9KS5vcHRpb25hbCgpLFxuICBzdGF0dXM6IFNwYW5TdGF0dXNTY2hlbWEub3B0aW9uYWwoKSxcbiAgdGltZUV2ZW50czogaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gICAgdGltZUV2ZW50OiBpbXBvcnRfem9kLnouYXJyYXkoVGltZUV2ZW50U2NoZW1hKVxuICB9KS5vcHRpb25hbCgpLFxuICB0cnVuY2F0ZWQ6IGltcG9ydF96b2Quei5ib29sZWFuKCkub3B0aW9uYWwoKVxufSk7XG5jb25zdCBUcmFjZURhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgdHJhY2VJZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBkaXNwbGF5TmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHN0YXJ0VGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJ0cmFjZSBzdGFydCB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2hcIiksXG4gIGVuZFRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwiZW5kIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaFwiKSxcbiAgc3BhbnM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBTcGFuRGF0YVNjaGVtYSlcbn0pO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIExpbmtTY2hlbWEsXG4gIFBhdGhNZXRhZGF0YVNjaGVtYSxcbiAgU3BhbkNvbnRleHRTY2hlbWEsXG4gIFNwYW5EYXRhU2NoZW1hLFxuICBTcGFuTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5TdGF0dXNTY2hlbWEsXG4gIFRpbWVFdmVudFNjaGVtYSxcbiAgVHJhY2VEYXRhU2NoZW1hLFxuICBUcmFjZU1ldGFkYXRhU2NoZW1hXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/utils.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  deleteUndefinedProps: () => deleteUndefinedProps,\n  featureMetadataPrefix: () => featureMetadataPrefix,\n  getCurrentEnv: () => getCurrentEnv,\n  isDevEnv: () => isDevEnv,\n  stripUndefinedProps: () => stripUndefinedProps\n});\nmodule.exports = __toCommonJS(utils_exports);\nfunction deleteUndefinedProps(obj) {\n  for (const prop in obj) {\n    if (obj[prop] === void 0) {\n      delete obj[prop];\n    } else {\n      if (typeof obj[prop] === \"object\") {\n        deleteUndefinedProps(obj[prop]);\n      }\n    }\n  }\n}\nfunction stripUndefinedProps(input) {\n  if (input === void 0 || input === null || Array.isArray(input) || typeof input !== \"object\") {\n    return input;\n  }\n  const out = {};\n  for (const key in input) {\n    if (input[key] !== void 0) {\n      out[key] = stripUndefinedProps(input[key]);\n    }\n  }\n  return out;\n}\nfunction getCurrentEnv() {\n  return process.env.GENKIT_ENV || \"prod\";\n}\nfunction isDevEnv() {\n  return getCurrentEnv() === \"dev\";\n}\nfunction featureMetadataPrefix(name) {\n  return `feature:${name}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixLQUFLO0FBQ3pCO0FBQ0E7QUFDQSxNQUFNLENBTUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdXRpbHNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodXRpbHNfZXhwb3J0cywge1xuICBkZWxldGVVbmRlZmluZWRQcm9wczogKCkgPT4gZGVsZXRlVW5kZWZpbmVkUHJvcHMsXG4gIGZlYXR1cmVNZXRhZGF0YVByZWZpeDogKCkgPT4gZmVhdHVyZU1ldGFkYXRhUHJlZml4LFxuICBnZXRDdXJyZW50RW52OiAoKSA9PiBnZXRDdXJyZW50RW52LFxuICBpc0RldkVudjogKCkgPT4gaXNEZXZFbnYsXG4gIHN0cmlwVW5kZWZpbmVkUHJvcHM6ICgpID0+IHN0cmlwVW5kZWZpbmVkUHJvcHNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModXRpbHNfZXhwb3J0cyk7XG5mdW5jdGlvbiBkZWxldGVVbmRlZmluZWRQcm9wcyhvYmopIHtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iaikge1xuICAgIGlmIChvYmpbcHJvcF0gPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBvYmpbcHJvcF0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZGVsZXRlVW5kZWZpbmVkUHJvcHMob2JqW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHN0cmlwVW5kZWZpbmVkUHJvcHMoaW5wdXQpIHtcbiAgaWYgKGlucHV0ID09PSB2b2lkIDAgfHwgaW5wdXQgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgdHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBpbnB1dCkge1xuICAgIGlmIChpbnB1dFtrZXldICE9PSB2b2lkIDApIHtcbiAgICAgIG91dFtrZXldID0gc3RyaXBVbmRlZmluZWRQcm9wcyhpbnB1dFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRFbnYoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5HRU5LSVRfRU5WIHx8IFwicHJvZFwiO1xufVxuZnVuY3Rpb24gaXNEZXZFbnYoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50RW52KCkgPT09IFwiZGV2XCI7XG59XG5mdW5jdGlvbiBmZWF0dXJlTWV0YWRhdGFQcmVmaXgobmFtZSkge1xuICByZXR1cm4gYGZlYXR1cmU6JHtuYW1lfWA7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVsZXRlVW5kZWZpbmVkUHJvcHMsXG4gIGZlYXR1cmVNZXRhZGF0YVByZWZpeCxcbiAgZ2V0Q3VycmVudEVudixcbiAgaXNEZXZFbnYsXG4gIHN0cmlwVW5kZWZpbmVkUHJvcHNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/common.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar common_exports = {};\n__export(common_exports, {\n  getApiKeyFromEnvVar: () => getApiKeyFromEnvVar\n});\nmodule.exports = __toCommonJS(common_exports);\nvar import_process = __toESM(__webpack_require__(/*! process */ \"process\"));\nfunction getApiKeyFromEnvVar() {\n  return import_process.default.env.GEMINI_API_KEY || import_process.default.env.GOOGLE_API_KEY || import_process.default.env.GOOGLE_GENAI_API_KEY;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsNkJBQTZCLG1CQUFPLENBQUMsd0JBQVM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvY29tbW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBjb21tb25fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoY29tbW9uX2V4cG9ydHMsIHtcbiAgZ2V0QXBpS2V5RnJvbUVudlZhcjogKCkgPT4gZ2V0QXBpS2V5RnJvbUVudlZhclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhjb21tb25fZXhwb3J0cyk7XG52YXIgaW1wb3J0X3Byb2Nlc3MgPSBfX3RvRVNNKHJlcXVpcmUoXCJwcm9jZXNzXCIpKTtcbmZ1bmN0aW9uIGdldEFwaUtleUZyb21FbnZWYXIoKSB7XG4gIHJldHVybiBpbXBvcnRfcHJvY2Vzcy5kZWZhdWx0LmVudi5HRU1JTklfQVBJX0tFWSB8fCBpbXBvcnRfcHJvY2Vzcy5kZWZhdWx0LmVudi5HT09HTEVfQVBJX0tFWSB8fCBpbXBvcnRfcHJvY2Vzcy5kZWZhdWx0LmVudi5HT09HTEVfR0VOQUlfQVBJX0tFWTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBcGlLZXlGcm9tRW52VmFyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar constants_exports = {};\n__export(constants_exports, {\n  CONTEXT_CACHE_SUPPORTED_MODELS: () => CONTEXT_CACHE_SUPPORTED_MODELS,\n  DEFAULT_TTL: () => DEFAULT_TTL,\n  INVALID_ARGUMENT_MESSAGES: () => INVALID_ARGUMENT_MESSAGES\n});\nmodule.exports = __toCommonJS(constants_exports);\nconst CONTEXT_CACHE_SUPPORTED_MODELS = [\n  \"gemini-1.5-flash-001\",\n  \"gemini-1.5-pro-001\"\n];\nconst INVALID_ARGUMENT_MESSAGES = {\n  modelVersion: `Model version is required for context caching, supported only in ${CONTEXT_CACHE_SUPPORTED_MODELS.join(\",\")} models.`,\n  tools: \"Context caching cannot be used simultaneously with tools.\",\n  codeExecution: \"Context caching cannot be used simultaneously with code execution.\"\n};\nconst DEFAULT_TTL = 300;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsMENBQTBDO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL21ldGh1bnJhai9EZXNrdG9wL0ZpbmFsIEFwcC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvY29udGV4dC1jYWNoaW5nL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgY29uc3RhbnRzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNvbnN0YW50c19leHBvcnRzLCB7XG4gIENPTlRFWFRfQ0FDSEVfU1VQUE9SVEVEX01PREVMUzogKCkgPT4gQ09OVEVYVF9DQUNIRV9TVVBQT1JURURfTU9ERUxTLFxuICBERUZBVUxUX1RUTDogKCkgPT4gREVGQVVMVF9UVEwsXG4gIElOVkFMSURfQVJHVU1FTlRfTUVTU0FHRVM6ICgpID0+IElOVkFMSURfQVJHVU1FTlRfTUVTU0FHRVNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoY29uc3RhbnRzX2V4cG9ydHMpO1xuY29uc3QgQ09OVEVYVF9DQUNIRV9TVVBQT1JURURfTU9ERUxTID0gW1xuICBcImdlbWluaS0xLjUtZmxhc2gtMDAxXCIsXG4gIFwiZ2VtaW5pLTEuNS1wcm8tMDAxXCJcbl07XG5jb25zdCBJTlZBTElEX0FSR1VNRU5UX01FU1NBR0VTID0ge1xuICBtb2RlbFZlcnNpb246IGBNb2RlbCB2ZXJzaW9uIGlzIHJlcXVpcmVkIGZvciBjb250ZXh0IGNhY2hpbmcsIHN1cHBvcnRlZCBvbmx5IGluICR7Q09OVEVYVF9DQUNIRV9TVVBQT1JURURfTU9ERUxTLmpvaW4oXCIsXCIpfSBtb2RlbHMuYCxcbiAgdG9vbHM6IFwiQ29udGV4dCBjYWNoaW5nIGNhbm5vdCBiZSB1c2VkIHNpbXVsdGFuZW91c2x5IHdpdGggdG9vbHMuXCIsXG4gIGNvZGVFeGVjdXRpb246IFwiQ29udGV4dCBjYWNoaW5nIGNhbm5vdCBiZSB1c2VkIHNpbXVsdGFuZW91c2x5IHdpdGggY29kZSBleGVjdXRpb24uXCJcbn07XG5jb25zdCBERUZBVUxUX1RUTCA9IDMwMDtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDT05URVhUX0NBQ0hFX1NVUFBPUlRFRF9NT0RFTFMsXG4gIERFRkFVTFRfVFRMLFxuICBJTlZBTElEX0FSR1VNRU5UX01FU1NBR0VTXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar context_caching_exports = {};\n__export(context_caching_exports, {\n  handleCacheIfNeeded: () => handleCacheIfNeeded,\n  handleContextCache: () => handleContextCache\n});\nmodule.exports = __toCommonJS(context_caching_exports);\nvar import_server = __webpack_require__(/*! @google/generative-ai/server */ \"(action-browser)/./node_modules/@google/generative-ai/dist/server/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_logging = __webpack_require__(/*! genkit/logging */ \"(action-browser)/./node_modules/genkit/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\");\nasync function handleContextCache(apiKey, request, chatRequest, modelVersion, cacheConfigDetails) {\n  const cacheManager = new import_server.GoogleAICacheManager(apiKey);\n  const { cachedContent, chatRequest: newChatRequest } = (0, import_utils.getContentForCache)(\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  cachedContent.model = modelVersion;\n  const cacheKey = (0, import_utils.generateCacheKey)(cachedContent);\n  cachedContent.displayName = cacheKey;\n  let cache = await (0, import_utils.lookupContextCache)(cacheManager, cacheKey);\n  import_logging.logger.debug(`Cache hit: ${cache ? \"true\" : \"false\"}`);\n  if (!cache) {\n    try {\n      import_logging.logger.debug(\"No cache found, creating one.\");\n      const createParams = {\n        ...cachedContent,\n        ttlSeconds: (0, import_utils.calculateTTL)(cacheConfigDetails)\n      };\n      cache = await cacheManager.create(createParams);\n      import_logging.logger.debug(`Created new cache entry with key: ${cacheKey}`);\n    } catch (cacheError) {\n      import_logging.logger.error(\n        `Failed to create cache with key ${cacheKey}: ${cacheError}`\n      );\n      throw new import_genkit.GenkitError({\n        status: \"INTERNAL\",\n        message: `Failed to create cache: ${cacheError}`\n      });\n    }\n  }\n  if (!cache) {\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: \"Failed to use context cache feature\"\n    });\n  }\n  return { cache, newChatRequest };\n}\nasync function handleCacheIfNeeded(apiKey, request, chatRequest, modelVersion, cacheConfigDetails) {\n  if (!cacheConfigDetails || !(0, import_utils.validateContextCacheRequest)(request, modelVersion)) {\n    return { chatRequest, cache: null };\n  }\n  const { cache, newChatRequest } = await handleContextCache(\n    apiKey,\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  return { chatRequest: newChatRequest, cache };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLGdIQUE4QjtBQUMxRCxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBUTtBQUNwQyxxQkFBcUIsbUJBQU8sQ0FBQyw2RUFBZ0I7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsb0dBQVk7QUFDdkM7QUFDQTtBQUNBLFVBQVUsNkNBQTZDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5QkFBeUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxTQUFTO0FBQ2hGLE1BQU07QUFDTjtBQUNBLDJDQUEyQyxTQUFTLElBQUksV0FBVztBQUNuRTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsV0FBVztBQUN2RCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2NvbnRleHQtY2FjaGluZy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgY29udGV4dF9jYWNoaW5nX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNvbnRleHRfY2FjaGluZ19leHBvcnRzLCB7XG4gIGhhbmRsZUNhY2hlSWZOZWVkZWQ6ICgpID0+IGhhbmRsZUNhY2hlSWZOZWVkZWQsXG4gIGhhbmRsZUNvbnRleHRDYWNoZTogKCkgPT4gaGFuZGxlQ29udGV4dENhY2hlXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNvbnRleHRfY2FjaGluZ19leHBvcnRzKTtcbnZhciBpbXBvcnRfc2VydmVyID0gcmVxdWlyZShcIkBnb29nbGUvZ2VuZXJhdGl2ZS1haS9zZXJ2ZXJcIik7XG52YXIgaW1wb3J0X2dlbmtpdCA9IHJlcXVpcmUoXCJnZW5raXRcIik7XG52YXIgaW1wb3J0X2xvZ2dpbmcgPSByZXF1aXJlKFwiZ2Vua2l0L2xvZ2dpbmdcIik7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDb250ZXh0Q2FjaGUoYXBpS2V5LCByZXF1ZXN0LCBjaGF0UmVxdWVzdCwgbW9kZWxWZXJzaW9uLCBjYWNoZUNvbmZpZ0RldGFpbHMpIHtcbiAgY29uc3QgY2FjaGVNYW5hZ2VyID0gbmV3IGltcG9ydF9zZXJ2ZXIuR29vZ2xlQUlDYWNoZU1hbmFnZXIoYXBpS2V5KTtcbiAgY29uc3QgeyBjYWNoZWRDb250ZW50LCBjaGF0UmVxdWVzdDogbmV3Q2hhdFJlcXVlc3QgfSA9ICgwLCBpbXBvcnRfdXRpbHMuZ2V0Q29udGVudEZvckNhY2hlKShcbiAgICByZXF1ZXN0LFxuICAgIGNoYXRSZXF1ZXN0LFxuICAgIG1vZGVsVmVyc2lvbixcbiAgICBjYWNoZUNvbmZpZ0RldGFpbHNcbiAgKTtcbiAgY2FjaGVkQ29udGVudC5tb2RlbCA9IG1vZGVsVmVyc2lvbjtcbiAgY29uc3QgY2FjaGVLZXkgPSAoMCwgaW1wb3J0X3V0aWxzLmdlbmVyYXRlQ2FjaGVLZXkpKGNhY2hlZENvbnRlbnQpO1xuICBjYWNoZWRDb250ZW50LmRpc3BsYXlOYW1lID0gY2FjaGVLZXk7XG4gIGxldCBjYWNoZSA9IGF3YWl0ICgwLCBpbXBvcnRfdXRpbHMubG9va3VwQ29udGV4dENhY2hlKShjYWNoZU1hbmFnZXIsIGNhY2hlS2V5KTtcbiAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmRlYnVnKGBDYWNoZSBoaXQ6ICR7Y2FjaGUgPyBcInRydWVcIiA6IFwiZmFsc2VcIn1gKTtcbiAgaWYgKCFjYWNoZSkge1xuICAgIHRyeSB7XG4gICAgICBpbXBvcnRfbG9nZ2luZy5sb2dnZXIuZGVidWcoXCJObyBjYWNoZSBmb3VuZCwgY3JlYXRpbmcgb25lLlwiKTtcbiAgICAgIGNvbnN0IGNyZWF0ZVBhcmFtcyA9IHtcbiAgICAgICAgLi4uY2FjaGVkQ29udGVudCxcbiAgICAgICAgdHRsU2Vjb25kczogKDAsIGltcG9ydF91dGlscy5jYWxjdWxhdGVUVEwpKGNhY2hlQ29uZmlnRGV0YWlscylcbiAgICAgIH07XG4gICAgICBjYWNoZSA9IGF3YWl0IGNhY2hlTWFuYWdlci5jcmVhdGUoY3JlYXRlUGFyYW1zKTtcbiAgICAgIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5kZWJ1ZyhgQ3JlYXRlZCBuZXcgY2FjaGUgZW50cnkgd2l0aCBrZXk6ICR7Y2FjaGVLZXl9YCk7XG4gICAgfSBjYXRjaCAoY2FjaGVFcnJvcikge1xuICAgICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGNyZWF0ZSBjYWNoZSB3aXRoIGtleSAke2NhY2hlS2V5fTogJHtjYWNoZUVycm9yfWBcbiAgICAgICk7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2dlbmtpdC5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJJTlRFUk5BTFwiLFxuICAgICAgICBtZXNzYWdlOiBgRmFpbGVkIHRvIGNyZWF0ZSBjYWNoZTogJHtjYWNoZUVycm9yfWBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoIWNhY2hlKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9nZW5raXQuR2Vua2l0RXJyb3Ioe1xuICAgICAgc3RhdHVzOiBcIklOVEVSTkFMXCIsXG4gICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byB1c2UgY29udGV4dCBjYWNoZSBmZWF0dXJlXCJcbiAgICB9KTtcbiAgfVxuICByZXR1cm4geyBjYWNoZSwgbmV3Q2hhdFJlcXVlc3QgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNhY2hlSWZOZWVkZWQoYXBpS2V5LCByZXF1ZXN0LCBjaGF0UmVxdWVzdCwgbW9kZWxWZXJzaW9uLCBjYWNoZUNvbmZpZ0RldGFpbHMpIHtcbiAgaWYgKCFjYWNoZUNvbmZpZ0RldGFpbHMgfHwgISgwLCBpbXBvcnRfdXRpbHMudmFsaWRhdGVDb250ZXh0Q2FjaGVSZXF1ZXN0KShyZXF1ZXN0LCBtb2RlbFZlcnNpb24pKSB7XG4gICAgcmV0dXJuIHsgY2hhdFJlcXVlc3QsIGNhY2hlOiBudWxsIH07XG4gIH1cbiAgY29uc3QgeyBjYWNoZSwgbmV3Q2hhdFJlcXVlc3QgfSA9IGF3YWl0IGhhbmRsZUNvbnRleHRDYWNoZShcbiAgICBhcGlLZXksXG4gICAgcmVxdWVzdCxcbiAgICBjaGF0UmVxdWVzdCxcbiAgICBtb2RlbFZlcnNpb24sXG4gICAgY2FjaGVDb25maWdEZXRhaWxzXG4gICk7XG4gIHJldHVybiB7IGNoYXRSZXF1ZXN0OiBuZXdDaGF0UmVxdWVzdCwgY2FjaGUgfTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBoYW5kbGVDYWNoZUlmTmVlZGVkLFxuICBoYW5kbGVDb250ZXh0Q2FjaGVcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/types.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  cacheConfigDetailsSchema: () => cacheConfigDetailsSchema,\n  cacheConfigSchema: () => cacheConfigSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nconst cacheConfigSchema = import_genkit.z.union([\n  import_genkit.z.boolean(),\n  import_genkit.z.object({ ttlSeconds: import_genkit.z.number().optional() }).passthrough()\n]);\nconst cacheConfigDetailsSchema = import_genkit.z.object({\n  cacheConfig: cacheConfigSchema,\n  endOfCachedContents: import_genkit.z.number()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLG1FQUFRO0FBQ3BDO0FBQ0E7QUFDQSwyQkFBMkIsaURBQWlEO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZXRodW5yYWovRGVza3RvcC9GaW5hbCBBcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2NvbnRleHQtY2FjaGluZy90eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdHlwZXNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodHlwZXNfZXhwb3J0cywge1xuICBjYWNoZUNvbmZpZ0RldGFpbHNTY2hlbWE6ICgpID0+IGNhY2hlQ29uZmlnRGV0YWlsc1NjaGVtYSxcbiAgY2FjaGVDb25maWdTY2hlbWE6ICgpID0+IGNhY2hlQ29uZmlnU2NoZW1hXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHR5cGVzX2V4cG9ydHMpO1xudmFyIGltcG9ydF9nZW5raXQgPSByZXF1aXJlKFwiZ2Vua2l0XCIpO1xuY29uc3QgY2FjaGVDb25maWdTY2hlbWEgPSBpbXBvcnRfZ2Vua2l0LnoudW5pb24oW1xuICBpbXBvcnRfZ2Vua2l0LnouYm9vbGVhbigpLFxuICBpbXBvcnRfZ2Vua2l0Lnoub2JqZWN0KHsgdHRsU2Vjb25kczogaW1wb3J0X2dlbmtpdC56Lm51bWJlcigpLm9wdGlvbmFsKCkgfSkucGFzc3Rocm91Z2goKVxuXSk7XG5jb25zdCBjYWNoZUNvbmZpZ0RldGFpbHNTY2hlbWEgPSBpbXBvcnRfZ2Vua2l0Lnoub2JqZWN0KHtcbiAgY2FjaGVDb25maWc6IGNhY2hlQ29uZmlnU2NoZW1hLFxuICBlbmRPZkNhY2hlZENvbnRlbnRzOiBpbXBvcnRfZ2Vua2l0LnoubnVtYmVyKClcbn0pO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhY2hlQ29uZmlnRGV0YWlsc1NjaGVtYSxcbiAgY2FjaGVDb25maWdTY2hlbWFcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  calculateTTL: () => calculateTTL,\n  extractCacheConfig: () => extractCacheConfig,\n  findLastIndex: () => findLastIndex,\n  generateCacheKey: () => generateCacheKey,\n  getContentForCache: () => getContentForCache,\n  lookupContextCache: () => lookupContextCache,\n  validateContextCacheRequest: () => validateContextCacheRequest\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_crypto = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_constants = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js\");\nvar import_types = __webpack_require__(/*! ./types */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js\");\nfunction generateCacheKey(request) {\n  return import_crypto.default.createHash(\"sha256\").update(JSON.stringify(request)).digest(\"hex\");\n}\nfunction getContentForCache(request, chatRequest, modelVersion, cacheConfigDetails) {\n  if (!modelVersion) {\n    throw new Error(\"No model version provided for context caching\");\n  }\n  if (!chatRequest.history?.length) {\n    throw new Error(\"No history provided for context caching\");\n  }\n  validateHistoryLength(request, chatRequest);\n  const { endOfCachedContents, cacheConfig } = cacheConfigDetails;\n  const cachedContent = {\n    model: modelVersion,\n    contents: chatRequest.history.slice(0, endOfCachedContents + 1)\n  };\n  chatRequest.history = chatRequest.history.slice(endOfCachedContents + 1);\n  return { cachedContent, chatRequest, cacheConfig };\n}\nfunction validateHistoryLength(request, chatRequest) {\n  if (chatRequest.history?.length !== request.messages.length - 1) {\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: \"Genkit request history and Gemini chat request history length do not match\"\n    });\n  }\n}\nasync function lookupContextCache(cacheManager, cacheKey, maxPages = 100, pageSize = 100) {\n  let currentPage = 0;\n  let pageToken;\n  try {\n    while (currentPage < maxPages) {\n      const { cachedContents, nextPageToken } = await cacheManager.list({\n        pageSize,\n        pageToken\n      });\n      const found = cachedContents?.find(\n        (content) => content.displayName === cacheKey\n      );\n      if (found) return found;\n      if (!nextPageToken) break;\n      pageToken = nextPageToken;\n      currentPage++;\n    }\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"Unknown Network Error\";\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: `Error looking up context cache: ${message}`\n    });\n  }\n  return null;\n}\nconst extractCacheConfig = (request) => {\n  const endOfCachedContents = findLastIndex(\n    request.messages,\n    (message) => !!message.metadata?.cache\n  );\n  return endOfCachedContents === -1 ? null : {\n    endOfCachedContents,\n    cacheConfig: import_types.cacheConfigSchema.parse(\n      request.messages[endOfCachedContents].metadata?.cache\n    )\n  };\n};\nfunction validateContextCacheRequest(request, modelVersion) {\n  if (!modelVersion || !import_constants.CONTEXT_CACHE_SUPPORTED_MODELS.includes(modelVersion)) {\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.modelVersion\n    });\n  }\n  if (request.tools?.length)\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.tools\n    });\n  if (request.config?.codeExecution)\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.codeExecution\n    });\n  return true;\n}\nfunction findLastIndex(array, callback) {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (callback(array[i], i, array)) return i;\n  }\n  return -1;\n}\nfunction calculateTTL(cacheConfig) {\n  if (cacheConfig.cacheConfig === true) {\n    return import_constants.DEFAULT_TTL;\n  }\n  if (cacheConfig.cacheConfig === false) {\n    return 0;\n  }\n  return cacheConfig.cacheConfig.ttlSeconds || import_constants.DEFAULT_TTL;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/embedder.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  GeminiEmbeddingConfigSchema: () => GeminiEmbeddingConfigSchema,\n  SUPPORTED_MODELS: () => SUPPORTED_MODELS,\n  TaskTypeSchema: () => TaskTypeSchema,\n  defineGoogleAIEmbedder: () => defineGoogleAIEmbedder,\n  textEmbedding004: () => textEmbedding004,\n  textEmbeddingGecko001: () => textEmbeddingGecko001\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_embedder = __webpack_require__(/*! genkit/embedder */ \"(action-browser)/./node_modules/genkit/lib/embedder.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nconst TaskTypeSchema = import_genkit.z.enum([\n  \"RETRIEVAL_DOCUMENT\",\n  \"RETRIEVAL_QUERY\",\n  \"SEMANTIC_SIMILARITY\",\n  \"CLASSIFICATION\",\n  \"CLUSTERING\"\n]);\nconst GeminiEmbeddingConfigSchema = import_genkit.z.object({\n  /** Override the API key provided at plugin initialization. */\n  apiKey: import_genkit.z.string().optional(),\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: import_genkit.z.string().optional(),\n  version: import_genkit.z.string().optional(),\n  /**\n   * The `outputDimensionality` parameter allows you to specify the dimensionality of the embedding output.\n   * By default, the model generates embeddings with 768 dimensions. Models such as\n   * `text-embedding-004`, `text-embedding-005`, and `text-multilingual-embedding-002`\n   * allow the output dimensionality to be adjusted between 1 and 768.\n   * By selecting a smaller output dimensionality, users can save memory and storage space, leading to more efficient computations.\n   **/\n  outputDimensionality: import_genkit.z.number().min(1).max(768).optional()\n});\nconst textEmbeddingGecko001 = (0, import_embedder.embedderRef)({\n  name: \"googleai/embedding-001\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding Gecko (Legacy)\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst textEmbedding004 = (0, import_embedder.embedderRef)({\n  name: \"googleai/text-embedding-004\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding 001\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst SUPPORTED_MODELS = {\n  \"embedding-001\": textEmbeddingGecko001,\n  \"text-embedding-004\": textEmbedding004\n};\nfunction defineGoogleAIEmbedder(ai, name, pluginOptions) {\n  let apiKey;\n  if (pluginOptions.apiKey !== false) {\n    apiKey = pluginOptions?.apiKey || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey)\n      throw new Error(\n        \"Please pass in the API key or set either GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai\"\n      );\n  }\n  const embedder = SUPPORTED_MODELS[name] ?? (0, import_embedder.embedderRef)({\n    name,\n    configSchema: GeminiEmbeddingConfigSchema,\n    info: {\n      dimensions: 768,\n      label: `Google AI - ${name}`,\n      supports: {\n        input: [\"text\", \"image\", \"video\"]\n      }\n    }\n  });\n  const apiModelName = embedder.name.startsWith(\"googleai/\") ? embedder.name.substring(\"googleai/\".length) : embedder.name;\n  return ai.defineEmbedder(\n    {\n      name: embedder.name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: embedder.info\n    },\n    async (input, options) => {\n      if (pluginOptions.apiKey === false && !options?.apiKey) {\n        throw new import_genkit.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: \"GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n        });\n      }\n      const client = new import_generative_ai.GoogleGenerativeAI(\n        options?.apiKey || apiKey\n      ).getGenerativeModel({\n        model: options?.version || embedder.config?.version || embedder.version || apiModelName\n      });\n      const embeddings = await Promise.all(\n        input.map(async (doc) => {\n          const response = await client.embedContent({\n            taskType: options?.taskType,\n            title: options?.title,\n            content: {\n              role: \"\",\n              parts: [{ text: doc.text }]\n            },\n            outputDimensionality: options?.outputDimensionality\n          });\n          const values = response.embedding.values;\n          return { embedding: values };\n        })\n      );\n      return { embeddings };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/gemini.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar gemini_exports = {};\n__export(gemini_exports, {\n  GENERIC_GEMINI_MODEL: () => GENERIC_GEMINI_MODEL,\n  GeminiConfigSchema: () => GeminiConfigSchema,\n  SUPPORTED_GEMINI_MODELS: () => SUPPORTED_GEMINI_MODELS,\n  SUPPORTED_V15_MODELS: () => SUPPORTED_V15_MODELS,\n  SUPPORTED_V1_MODELS: () => SUPPORTED_V1_MODELS,\n  cleanSchema: () => cleanSchema,\n  defineGoogleAIModel: () => defineGoogleAIModel,\n  fromGeminiCandidate: () => fromGeminiCandidate,\n  gemini: () => gemini,\n  gemini10Pro: () => gemini10Pro,\n  gemini15Flash: () => gemini15Flash,\n  gemini15Flash8b: () => gemini15Flash8b,\n  gemini15Pro: () => gemini15Pro,\n  gemini20Flash: () => gemini20Flash,\n  gemini20FlashExp: () => gemini20FlashExp,\n  gemini20FlashLite: () => gemini20FlashLite,\n  gemini20ProExp0205: () => gemini20ProExp0205,\n  gemini25FlashPreview0417: () => gemini25FlashPreview0417,\n  gemini25ProExp0325: () => gemini25ProExp0325,\n  gemini25ProPreview0325: () => gemini25ProPreview0325,\n  toGeminiMessage: () => toGeminiMessage,\n  toGeminiSystemInstruction: () => toGeminiSystemInstruction,\n  toGeminiTool: () => toGeminiTool\n});\nmodule.exports = __toCommonJS(gemini_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_middleware = __webpack_require__(/*! genkit/model/middleware */ \"(action-browser)/./node_modules/genkit/lib/middleware.js\");\nvar import_tracing = __webpack_require__(/*! genkit/tracing */ \"(action-browser)/./node_modules/genkit/lib/tracing.js\");\nvar import_common = __webpack_require__(/*! ./common */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_context_caching = __webpack_require__(/*! ./context-caching */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js\");\nvar import_utils = __webpack_require__(/*! ./context-caching/utils */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\");\nconst SafetySettingsSchema = import_genkit.z.object({\n  category: import_genkit.z.enum([\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    \"HARM_CATEGORY_CIVIC_INTEGRITY\"\n  ]),\n  threshold: import_genkit.z.enum([\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\"\n  ])\n});\nconst GeminiConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  apiKey: import_genkit.z.string().describe(\"Overrides the plugin-configured API key, if specified.\").optional(),\n  safetySettings: import_genkit.z.array(SafetySettingsSchema).describe(\n    \"Adjust how likely you are to see responses that could be harmful. Content is blocked based on the probability that it is harmful.\"\n  ).optional(),\n  codeExecution: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).strict()]).describe(\"Enables the model to generate and run code.\").optional(),\n  contextCache: import_genkit.z.boolean().describe(\n    \"Context caching allows you to save and reuse precomputed input tokens that you wish to use repeatedly.\"\n  ).optional(),\n  functionCallingConfig: import_genkit.z.object({\n    mode: import_genkit.z.enum([\"MODE_UNSPECIFIED\", \"AUTO\", \"ANY\", \"NONE\"]).optional(),\n    allowedFunctionNames: import_genkit.z.array(import_genkit.z.string()).optional()\n  }).describe(\n    \"Controls how the model uses the provided tools (function declarations). With AUTO (Default) mode, the model decides whether to generate a natural language response or suggest a function call based on the prompt and context. With ANY, the model is constrained to always predict a function call and guarantee function schema adherence. With NONE, the model is prohibited from making function calls.\"\n  ).optional(),\n  responseModalities: import_genkit.z.array(import_genkit.z.enum([\"TEXT\", \"IMAGE\", \"AUDIO\"])).describe(\n    \"The modalities to be used in response. Only supported for 'gemini-2.0-flash-exp' model at present.\"\n  ).optional()\n}).passthrough();\nconst gemini10Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.0-pro\",\n  info: {\n    label: \"Google AI - Gemini Pro\",\n    versions: [\"gemini-pro\", \"gemini-1.0-pro-latest\", \"gemini-1.0-pro-001\"],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-pro\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Pro\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    },\n    versions: [\n      \"gemini-1.5-pro-latest\",\n      \"gemini-1.5-pro-001\",\n      \"gemini-1.5-pro-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\",\n      // @ts-ignore\n      contextCache: true\n    },\n    versions: [\n      \"gemini-1.5-flash-latest\",\n      \"gemini-1.5-flash-001\",\n      \"gemini-1.5-flash-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash8b = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash-8b\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    },\n    versions: [\"gemini-1.5-flash-8b-latest\", \"gemini-1.5-flash-8b-001\"]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20FlashExp = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash-exp\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash (Experimental)\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20FlashLite = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash-lite\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash Lite\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20ProExp0205 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-pro-exp-02-05\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Pro Exp 02-05\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25FlashPreview0417 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-flash-preview-04-17\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Flash Preview 04-17\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25ProExp0325 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-exp-03-25\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Exp 03-25\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25ProPreview0325 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-preview-03-25\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Preview 03-25\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst SUPPORTED_V1_MODELS = {\n  \"gemini-1.0-pro\": gemini10Pro\n};\nconst SUPPORTED_V15_MODELS = {\n  \"gemini-1.5-pro\": gemini15Pro,\n  \"gemini-1.5-flash\": gemini15Flash,\n  \"gemini-1.5-flash-8b\": gemini15Flash8b,\n  \"gemini-2.0-flash\": gemini20Flash,\n  \"gemini-2.0-flash-lite\": gemini20FlashLite,\n  \"gemini-2.0-pro-exp-02-05\": gemini20ProExp0205,\n  \"gemini-2.0-flash-exp\": gemini20FlashExp,\n  \"gemini-2.5-pro-exp-03-25\": gemini25ProExp0325,\n  \"gemini-2.5-pro-preview-03-25\": gemini25ProPreview0325,\n  \"gemini-2.5-flash-preview-04-17\": gemini25FlashPreview0417\n};\nconst GENERIC_GEMINI_MODEL = (0, import_model.modelRef)({\n  name: \"googleai/gemini\",\n  configSchema: GeminiConfigSchema,\n  info: {\n    label: \"Google Gemini\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  }\n});\nconst SUPPORTED_GEMINI_MODELS = {\n  ...SUPPORTED_V1_MODELS,\n  ...SUPPORTED_V15_MODELS\n};\nfunction longestMatchingPrefix(version, potentialMatches) {\n  return potentialMatches.filter((p) => version.startsWith(p)).reduce(\n    (longest, current) => current.length > longest.length ? current : longest,\n    \"\"\n  );\n}\nfunction gemini(version, options = {}) {\n  const nearestModel = nearestGeminiModelRef(version);\n  return (0, import_model.modelRef)({\n    name: `googleai/${version}`,\n    config: options,\n    configSchema: GeminiConfigSchema,\n    info: {\n      ...nearestModel.info,\n      // If exact suffix match for a known model, use its label, otherwise create a new label\n      label: nearestModel.name.endsWith(version) ? nearestModel.info?.label : `Google AI - ${version}`\n    }\n  });\n}\nfunction nearestGeminiModelRef(version, options = {}) {\n  const matchingKey = longestMatchingPrefix(\n    version,\n    Object.keys(SUPPORTED_GEMINI_MODELS)\n  );\n  if (matchingKey) {\n    return SUPPORTED_GEMINI_MODELS[matchingKey].withConfig({\n      ...options,\n      version\n    });\n  }\n  return GENERIC_GEMINI_MODEL.withConfig({ ...options, version });\n}\nfunction toGeminiRole(role, model) {\n  switch (role) {\n    case \"user\":\n      return \"user\";\n    case \"model\":\n      return \"model\";\n    case \"system\":\n      if (model && SUPPORTED_V15_MODELS[model.name]) {\n        throw new Error(\n          \"system role is only supported for a single message in the first position\"\n        );\n      } else {\n        throw new Error(\"system role is not supported\");\n      }\n    case \"tool\":\n      return \"function\";\n    default:\n      return \"user\";\n  }\n}\nfunction convertSchemaProperty(property) {\n  if (!property || !property.type) {\n    return void 0;\n  }\n  const baseSchema = {};\n  if (property.description) {\n    baseSchema.description = property.description;\n  }\n  if (property.enum) {\n    baseSchema.type = import_generative_ai.SchemaType.STRING;\n    baseSchema.enum = property.enum;\n  }\n  if (property.nullable) {\n    baseSchema.nullable = property.nullable;\n  }\n  let propertyType;\n  if (Array.isArray(property.type)) {\n    const types = property.type;\n    if (types.includes(\"null\")) {\n      baseSchema.nullable = true;\n    }\n    propertyType = types.find((t) => t !== \"null\");\n  } else {\n    propertyType = property.type;\n  }\n  if (propertyType === \"object\") {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      ...baseSchema,\n      type: import_generative_ai.SchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required\n    };\n  } else if (propertyType === \"array\") {\n    return {\n      ...baseSchema,\n      type: import_generative_ai.SchemaType.ARRAY,\n      items: convertSchemaProperty(property.items)\n    };\n  } else {\n    const schemaType = import_generative_ai.SchemaType[propertyType.toUpperCase()];\n    if (!schemaType) {\n      throw new import_genkit.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Unsupported property type ${propertyType.toUpperCase()}`\n      });\n    }\n    return {\n      ...baseSchema,\n      type: schemaType\n    };\n  }\n}\nfunction toGeminiTool(tool) {\n  const declaration = {\n    name: tool.name.replace(/\\//g, \"__\"),\n    // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema)\n  };\n  return declaration;\n}\nfunction toInlineData(part) {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(\",\") + 1);\n  const contentType = part.media.contentType || dataUrl.substring(dataUrl.indexOf(\":\") + 1, dataUrl.indexOf(\";\"));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\nfunction toFileData(part) {\n  if (!part.media.contentType)\n    throw new Error(\n      \"Must supply a `contentType` when sending File URIs to Gemini.\"\n    );\n  return {\n    fileData: { mimeType: part.media.contentType, fileUri: part.media.url }\n  };\n}\nfunction fromInlineData(inlinePart) {\n  if (!inlinePart.inlineData || !inlinePart.inlineData.hasOwnProperty(\"mimeType\") || !inlinePart.inlineData.hasOwnProperty(\"data\")) {\n    throw new Error(\"Invalid InlineDataPart: missing required properties\");\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType\n    }\n  };\n}\nfunction toFunctionCall(part) {\n  if (!part?.toolRequest?.input) {\n    throw Error(\"Invalid ToolRequestPart: input was missing.\");\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input\n    }\n  };\n}\nfunction fromFunctionCall(part, ref) {\n  if (!part.functionCall) {\n    throw Error(\"Invalid FunctionCallPart\");\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n      ref\n    }\n  };\n}\nfunction toFunctionResponse(part) {\n  if (!part?.toolResponse?.output) {\n    throw Error(\"Invalid ToolResponsePart: output was missing.\");\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output\n      }\n    }\n  };\n}\nfunction fromFunctionResponse(part) {\n  if (!part.functionResponse) {\n    throw new Error(\"Invalid FunctionResponsePart.\");\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, \"/\"),\n      // restore slashes\n      output: part.functionResponse.response\n    }\n  };\n}\nfunction fromExecutableCode(part) {\n  if (!part.executableCode) {\n    throw new Error(\"Invalid GeminiPart: missing executableCode\");\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code\n      }\n    }\n  };\n}\nfunction fromCodeExecutionResult(part) {\n  if (!part.codeExecutionResult) {\n    throw new Error(\"Invalid GeminiPart: missing codeExecutionResult\");\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output\n      }\n    }\n  };\n}\nfunction toCustomPart(part) {\n  if (!part.custom) {\n    throw new Error(\"Invalid GeminiPart: missing custom\");\n  }\n  if (part.custom.codeExecutionResult) {\n    return { codeExecutionResult: part.custom.codeExecutionResult };\n  }\n  if (part.custom.executableCode) {\n    return { executableCode: part.custom.executableCode };\n  }\n  throw new Error(\"Unsupported Custom Part type\");\n}\nfunction toGeminiPart(part) {\n  if (part.text !== void 0) return { text: part.text || \" \" };\n  if (part.media) {\n    if (part.media.url.startsWith(\"data:\")) return toInlineData(part);\n    return toFileData(part);\n  }\n  if (part.toolRequest) return toFunctionCall(part);\n  if (part.toolResponse) return toFunctionResponse(part);\n  if (part.custom) return toCustomPart(part);\n  throw new Error(\"Unsupported Part type\" + JSON.stringify(part));\n}\nfunction fromGeminiPart(part, jsonMode, ref) {\n  if (part.text !== void 0) return { text: part.text };\n  if (part.inlineData) return fromInlineData(part);\n  if (part.functionCall) return fromFunctionCall(part, ref);\n  if (part.functionResponse) return fromFunctionResponse(part);\n  if (part.executableCode) return fromExecutableCode(part);\n  if (part.codeExecutionResult) return fromCodeExecutionResult(part);\n  throw new Error(\"Unsupported GeminiPart type\");\n}\nfunction toGeminiMessage(message, model) {\n  let sortedParts = message.content;\n  if (message.role === \"tool\") {\n    sortedParts = [...message.content].sort((a, b) => {\n      const aRef = a.toolResponse?.ref;\n      const bRef = b.toolResponse?.ref;\n      if (!aRef && !bRef) return 0;\n      if (!aRef) return 1;\n      if (!bRef) return -1;\n      return parseInt(aRef, 10) - parseInt(bRef, 10);\n    });\n  }\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: sortedParts.map(toGeminiPart)\n  };\n}\nfunction toGeminiSystemInstruction(message) {\n  return {\n    role: \"user\",\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction fromGeminiFinishReason(reason) {\n  if (!reason) return \"unknown\";\n  switch (reason) {\n    case \"STOP\":\n      return \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"SAFETY\":\n    // blocked for safety\n    case \"RECITATION\":\n      return \"blocked\";\n    default:\n      return \"unknown\";\n  }\n}\nfunction fromGeminiCandidate(candidate, jsonMode = false) {\n  const parts = candidate.content?.parts || [];\n  const genkitCandidate = {\n    index: candidate.index || 0,\n    message: {\n      role: \"model\",\n      content: parts.map(\n        (part, index) => fromGeminiPart(part, jsonMode, index.toString())\n      )\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata\n    }\n  };\n  return genkitCandidate;\n}\nfunction cleanSchema(schema) {\n  const out = structuredClone(schema);\n  for (const key in out) {\n    if (key === \"$schema\" || key === \"additionalProperties\") {\n      delete out[key];\n      continue;\n    }\n    if (typeof out[key] === \"object\") {\n      out[key] = cleanSchema(out[key]);\n    }\n    if (key === \"type\" && Array.isArray(out[key])) {\n      out[key] = out[key].find((t) => t !== \"null\");\n    }\n  }\n  return out;\n}\nfunction defineGoogleAIModel({\n  ai,\n  name,\n  apiKey: apiKeyOption,\n  apiVersion,\n  baseUrl,\n  info,\n  defaultConfig,\n  debugTraces\n}) {\n  let apiKey;\n  if (apiKeyOption !== false) {\n    apiKey = apiKeyOption || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey) {\n      throw new import_genkit.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai\"\n      });\n    }\n  }\n  const apiModelName = name.startsWith(\"googleai/\") ? name.substring(\"googleai/\".length) : name;\n  const model = SUPPORTED_GEMINI_MODELS[apiModelName] ?? (0, import_model.modelRef)({\n    name: `googleai/${apiModelName}`,\n    info: {\n      label: `Google AI - ${apiModelName}`,\n      supports: {\n        multiturn: true,\n        media: true,\n        tools: true,\n        systemRole: true,\n        output: [\"text\", \"json\"]\n      },\n      ...info\n    },\n    configSchema: GeminiConfigSchema\n  });\n  const middleware = [];\n  if (SUPPORTED_V1_MODELS[apiModelName]) {\n    middleware.push((0, import_middleware.simulateSystemPrompt)());\n  }\n  if (model.info?.supports?.media) {\n    middleware.push(\n      (0, import_middleware.downloadRequestMedia)({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => {\n          try {\n            const url = new URL(part.media.url);\n            if (\n              // Gemini can handle these URLs\n              [\n                \"generativelanguage.googleapis.com\",\n                \"www.youtube.com\",\n                \"youtube.com\",\n                \"youtu.be\"\n              ].includes(url.hostname)\n            )\n              return false;\n          } catch {\n          }\n          return true;\n        }\n      })\n    );\n  }\n  return ai.defineModel(\n    {\n      name: model.name,\n      ...model.info,\n      configSchema: model.configSchema,\n      use: middleware\n    },\n    async (request, sendChunk) => {\n      const options = { apiClient: import_genkit.GENKIT_CLIENT_HEADER };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const requestConfig = {\n        ...defaultConfig,\n        ...request.config\n      };\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error(\"No messages provided.\");\n      let systemInstruction = void 0;\n      if (SUPPORTED_V15_MODELS[apiModelName]) {\n        const systemMessage = messages.find((m) => m.role === \"system\");\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n      const tools = [];\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool)\n        });\n      }\n      const {\n        apiKey: apiKeyFromConfig,\n        safetySettings: safetySettingsFromConfig,\n        codeExecution: codeExecutionFromConfig,\n        version: versionFromConfig,\n        functionCallingConfig,\n        ...restOfConfigOptions\n      } = requestConfig;\n      if (codeExecutionFromConfig) {\n        tools.push({\n          codeExecution: request.config.codeExecution === true ? {} : request.config.codeExecution\n        });\n      }\n      let toolConfig;\n      if (functionCallingConfig) {\n        toolConfig = {\n          functionCallingConfig: {\n            allowedFunctionNames: functionCallingConfig.allowedFunctionNames,\n            mode: toFunctionModeEnum(functionCallingConfig.mode)\n          }\n        };\n      } else if (request.toolChoice) {\n        toolConfig = {\n          functionCallingConfig: {\n            mode: toGeminiFunctionModeEnum(request.toolChoice)\n          }\n        };\n      }\n      const jsonMode = request.output?.format === \"json\" || request.output?.contentType === \"application/json\" && tools.length === 0;\n      const generationConfig = {\n        ...restOfConfigOptions,\n        candidateCount: request.candidates || void 0,\n        responseMimeType: jsonMode ? \"application/json\" : void 0\n      };\n      if (request.output?.constrained && jsonMode) {\n        generationConfig.responseSchema = cleanSchema(request.output.schema);\n      }\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      const fromJSONModeScopedGeminiCandidate = (candidate) => {\n        return fromGeminiCandidate(candidate, jsonMode);\n      };\n      let chatRequest = {\n        systemInstruction,\n        generationConfig,\n        tools: tools.length ? tools : void 0,\n        toolConfig,\n        history: messages.slice(0, -1).map((message) => toGeminiMessage(message, model)),\n        safetySettings: safetySettingsFromConfig\n      };\n      const modelVersion = versionFromConfig || model.version || apiModelName;\n      const cacheConfigDetails = (0, import_utils.extractCacheConfig)(request);\n      const { chatRequest: updatedChatRequest, cache } = await (0, import_context_caching.handleCacheIfNeeded)(\n        apiKey,\n        request,\n        chatRequest,\n        modelVersion,\n        cacheConfigDetails\n      );\n      if (!apiKeyFromConfig && !apiKey) {\n        throw new import_genkit.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: \"GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n        });\n      }\n      const client = new import_generative_ai.GoogleGenerativeAI(apiKeyFromConfig || apiKey);\n      let genModel;\n      if (cache) {\n        genModel = client.getGenerativeModelFromCachedContent(\n          cache,\n          {\n            model: modelVersion\n          },\n          options\n        );\n      } else {\n        genModel = client.getGenerativeModel(\n          {\n            model: modelVersion\n          },\n          options\n        );\n      }\n      const callGemini = async () => {\n        let response;\n        if (sendChunk) {\n          const result = await genModel.startChat(updatedChatRequest).sendMessageStream(msg.parts, options);\n          for await (const item of result.stream) {\n            item.candidates?.forEach(\n              (candidate) => {\n                const c = fromJSONModeScopedGeminiCandidate(candidate);\n                sendChunk({\n                  index: c.index,\n                  content: c.message.content\n                });\n              }\n            );\n          }\n          response = await result.response;\n        } else {\n          const result = await genModel.startChat(updatedChatRequest).sendMessage(msg.parts, options);\n          response = result.response;\n        }\n        const candidates = response.candidates || [];\n        if (response.candidates?.[\"undefined\"]) {\n          candidates.push(response.candidates[\"undefined\"]);\n        }\n        if (!candidates.length) {\n          throw new import_genkit.GenkitError({\n            status: \"FAILED_PRECONDITION\",\n            message: \"No valid candidates returned.\"\n          });\n        }\n        const candidateData = candidates.map(fromJSONModeScopedGeminiCandidate) || [];\n        return {\n          candidates: candidateData,\n          custom: response,\n          usage: {\n            ...(0, import_model.getBasicUsageStats)(request.messages, candidateData),\n            inputTokens: response.usageMetadata?.promptTokenCount,\n            outputTokens: response.usageMetadata?.candidatesTokenCount,\n            totalTokens: response.usageMetadata?.totalTokenCount\n          }\n        };\n      };\n      return debugTraces ? await (0, import_tracing.runInNewSpan)(\n        ai.registry,\n        {\n          metadata: {\n            name: sendChunk ? \"sendMessageStream\" : \"sendMessage\"\n          }\n        },\n        async (metadata) => {\n          metadata.input = {\n            sdk: \"@google/generative-ai\",\n            cache,\n            model: genModel.model,\n            chatOptions: updatedChatRequest,\n            parts: msg.parts,\n            options\n          };\n          const response = await callGemini();\n          metadata.output = response.custom;\n          return response;\n        }\n      ) : await callGemini();\n    }\n  );\n}\nfunction toFunctionModeEnum(configEnum) {\n  if (configEnum === void 0) {\n    return void 0;\n  }\n  switch (configEnum) {\n    case \"MODE_UNSPECIFIED\": {\n      return import_generative_ai.FunctionCallingMode.MODE_UNSPECIFIED;\n    }\n    case \"ANY\": {\n      return import_generative_ai.FunctionCallingMode.ANY;\n    }\n    case \"AUTO\": {\n      return import_generative_ai.FunctionCallingMode.AUTO;\n    }\n    case \"NONE\": {\n      return import_generative_ai.FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${configEnum}`);\n  }\n}\nfunction toGeminiFunctionModeEnum(genkitMode) {\n  if (genkitMode === void 0) {\n    return void 0;\n  }\n  switch (genkitMode) {\n    case \"required\": {\n      return import_generative_ai.FunctionCallingMode.ANY;\n    }\n    case \"auto\": {\n      return import_generative_ai.FunctionCallingMode.AUTO;\n    }\n    case \"none\": {\n      return import_generative_ai.FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${genkitMode}`);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   gemini: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini),\n/* harmony export */   gemini10Pro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini10Pro),\n/* harmony export */   gemini15Flash: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini15Flash),\n/* harmony export */   gemini15Flash8b: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini15Flash8b),\n/* harmony export */   gemini15Pro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini15Pro),\n/* harmony export */   gemini20Flash: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20Flash),\n/* harmony export */   gemini20FlashExp: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20FlashExp),\n/* harmony export */   gemini20FlashLite: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20FlashLite),\n/* harmony export */   gemini20ProExp0205: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20ProExp0205),\n/* harmony export */   gemini25FlashPreview0417: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini25FlashPreview0417),\n/* harmony export */   gemini25ProExp0325: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini25ProExp0325),\n/* harmony export */   gemini25ProPreview0325: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini25ProPreview0325),\n/* harmony export */   googleAI: () => (/* binding */ googleAI),\n/* harmony export */   googleAIPlugin: () => (/* binding */ googleAIPlugin),\n/* harmony export */   textEmbedding004: () => (/* reexport safe */ _embedder_js__WEBPACK_IMPORTED_MODULE_5__.textEmbedding004),\n/* harmony export */   textEmbeddingGecko001: () => (/* reexport safe */ _embedder_js__WEBPACK_IMPORTED_MODULE_5__.textEmbeddingGecko001)\n/* harmony export */ });\n/* harmony import */ var genkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.mjs\");\n/* harmony import */ var genkit_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! genkit/logging */ \"(action-browser)/./node_modules/genkit/lib/logging.mjs\");\n/* harmony import */ var genkit_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.mjs\");\n/* harmony import */ var genkit_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! genkit/plugin */ \"(action-browser)/./node_modules/genkit/lib/plugin.mjs\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\n/* harmony import */ var _embedder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\");\n/* harmony import */ var _gemini_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gemini.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\");\n/* harmony import */ var _list_models_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./list-models.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js\");\n\n\n\n\n\n\n\n\nasync function initializer(ai, options) {\n  let apiVersions = [\"v1\"];\n  if (options?.apiVersion) {\n    if (Array.isArray(options?.apiVersion)) {\n      apiVersions = options?.apiVersion;\n    } else {\n      apiVersions = [options?.apiVersion];\n    }\n  }\n  if (apiVersions.includes(\"v1beta\")) {\n    Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_6__.SUPPORTED_V15_MODELS).forEach(\n      (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: \"v1beta\",\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces\n      })\n    );\n  }\n  if (apiVersions.includes(\"v1\")) {\n    Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_6__.SUPPORTED_V1_MODELS).forEach(\n      (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: void 0,\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces\n      })\n    );\n    Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_6__.SUPPORTED_V15_MODELS).forEach(\n      (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: void 0,\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces\n      })\n    );\n    Object.keys(_embedder_js__WEBPACK_IMPORTED_MODULE_5__.SUPPORTED_MODELS).forEach(\n      (name) => (0,_embedder_js__WEBPACK_IMPORTED_MODULE_5__.defineGoogleAIEmbedder)(ai, name, { apiKey: options?.apiKey })\n    );\n  }\n  if (options?.models) {\n    for (const modelOrRef of options?.models) {\n      const modelName = typeof modelOrRef === \"string\" ? modelOrRef : (\n        // strip out the `googleai/` prefix\n        modelOrRef.name.split(\"/\")[1]\n      );\n      const modelRef2 = typeof modelOrRef === \"string\" ? (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini)(modelOrRef) : modelOrRef;\n      (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n        ai,\n        name: modelName,\n        apiKey: options?.apiKey,\n        baseUrl: options?.baseUrl,\n        info: {\n          ...modelRef2.info,\n          label: `Google AI - ${modelName}`\n        },\n        debugTraces: options?.experimental_debugTraces\n      });\n    }\n  }\n}\nasync function resolver(ai, actionType, actionName, options) {\n  switch (actionType) {\n    case \"model\":\n      resolveModel(ai, actionName, options);\n      break;\n    case \"embedder\":\n      resolveEmbedder(ai, actionName, options);\n      break;\n    default:\n  }\n}\nfunction resolveModel(ai, actionName, options) {\n  const modelRef2 = (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini)(actionName);\n  (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n    ai,\n    name: modelRef2.name,\n    apiKey: options?.apiKey,\n    baseUrl: options?.baseUrl,\n    info: {\n      ...modelRef2.info,\n      label: `Google AI - ${actionName}`\n    },\n    debugTraces: options?.experimental_debugTraces\n  });\n}\nfunction resolveEmbedder(ai, actionName, options) {\n  (0,_embedder_js__WEBPACK_IMPORTED_MODULE_5__.defineGoogleAIEmbedder)(ai, `googleai/${actionName}`, {\n    apiKey: options?.apiKey\n  });\n}\nasync function listActions(options) {\n  const apiKey = options?.apiKey || (0,_common_js__WEBPACK_IMPORTED_MODULE_4__.getApiKeyFromEnvVar)();\n  if (!apiKey) {\n    genkit_logging__WEBPACK_IMPORTED_MODULE_1__.logger.error(\n      \"Pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\"\n    );\n    return [];\n  }\n  const models = await (0,_list_models_js__WEBPACK_IMPORTED_MODULE_7__.listModels)(\n    options?.baseUrl || \"https://generativelanguage.googleapis.com\",\n    apiKey\n  );\n  return [\n    // Models\n    ...models.filter((m) => m.supportedGenerationMethods.includes(\"generateContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const ref = (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini)(\n        m.name.startsWith(\"models/\") ? m.name.substring(\"models/\".length) : m.name\n      );\n      return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.modelActionMetadata)({\n        name: ref.name,\n        info: ref.info,\n        configSchema: _gemini_js__WEBPACK_IMPORTED_MODULE_6__.GeminiConfigSchema\n      });\n    }),\n    // Embedders\n    ...models.filter((m) => m.supportedGenerationMethods.includes(\"embedContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const name = \"googleai/\" + (m.name.startsWith(\"models/\") ? m.name.substring(\"models/\".length) : m.name);\n      return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.embedderActionMetadata)({\n        name,\n        configSchema: _embedder_js__WEBPACK_IMPORTED_MODULE_5__.GeminiEmbeddingConfigSchema,\n        info: {\n          dimensions: 768,\n          label: `Google Gen AI - ${name}`,\n          supports: {\n            input: [\"text\"]\n          }\n        }\n      });\n    })\n  ];\n}\nfunction googleAIPlugin(options) {\n  let listActionsCache;\n  return (0,genkit_plugin__WEBPACK_IMPORTED_MODULE_3__.genkitPlugin)(\n    \"googleai\",\n    async (ai) => await initializer(ai, options),\n    async (ai, actionType, actionName) => await resolver(ai, actionType, actionName, options),\n    async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    }\n  );\n}\nconst googleAI = googleAIPlugin;\ngoogleAI.model = (name, config) => {\n  return (0,genkit_model__WEBPACK_IMPORTED_MODULE_2__.modelRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: _gemini_js__WEBPACK_IMPORTED_MODULE_6__.GeminiConfigSchema\n  });\n};\ngoogleAI.embedder = (name, config) => {\n  return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.embedderRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: _embedder_js__WEBPACK_IMPORTED_MODULE_5__.GeminiEmbeddingConfigSchema\n  });\n};\nvar src_default = googleAI;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/list-models.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar list_models_exports = {};\n__export(list_models_exports, {\n  listModels: () => listModels\n});\nmodule.exports = __toCommonJS(list_models_exports);\nasync function listModels(baseUrl, apiKey) {\n  const res = await fetch(\n    `${baseUrl}/v1beta/models?pageSize=1000&key=${apiKey}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n  const modelResponse = JSON.parse(await res.text());\n  return modelResponse.models;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=list-models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9saXN0LW1vZGVscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxPQUFPLFFBQVEsbUNBQW1DLE9BQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyIvVXNlcnMvbWV0aHVucmFqL0Rlc2t0b3AvRmluYWwgQXBwL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9saXN0LW1vZGVscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbGlzdF9tb2RlbHNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobGlzdF9tb2RlbHNfZXhwb3J0cywge1xuICBsaXN0TW9kZWxzOiAoKSA9PiBsaXN0TW9kZWxzXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGxpc3RfbW9kZWxzX2V4cG9ydHMpO1xuYXN5bmMgZnVuY3Rpb24gbGlzdE1vZGVscyhiYXNlVXJsLCBhcGlLZXkpIHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXG4gICAgYCR7YmFzZVVybH0vdjFiZXRhL21vZGVscz9wYWdlU2l6ZT0xMDAwJmtleT0ke2FwaUtleX1gLFxuICAgIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGNvbnN0IG1vZGVsUmVzcG9uc2UgPSBKU09OLnBhcnNlKGF3YWl0IHJlcy50ZXh0KCkpO1xuICByZXR1cm4gbW9kZWxSZXNwb25zZS5tb2RlbHM7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgbGlzdE1vZGVsc1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0LW1vZGVscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js\n");

/***/ })

};
;