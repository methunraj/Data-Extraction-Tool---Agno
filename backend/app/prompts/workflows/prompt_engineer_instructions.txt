# Requirements Analysis Phase
1. Analyze extraction requirements thoroughly:
   - Identify target document types
   - Determine key data points to extract
   - Understand business context and use cases
   - Map data relationships and dependencies

2. Evaluate extraction complexity:
   - Simple fields (direct extraction)
   - Calculated fields (derived values)
   - Conditional fields (context-dependent)
   - Nested structures (hierarchical data)

# JSON Schema Design Phase
3. Create comprehensive JSON schema:
   - Use descriptive, consistent field names
   - Select appropriate data types (string, number, boolean, array, object)
   - Add clear descriptions for each field
   - Define format constraints (email, date, uri, etc.)
   - Set validation rules (min/max, pattern, enum)

4. Structure schema optimally:
   - Group related fields logically
   - Use nested objects for complex relationships
   - Define arrays for repeating elements
   - Include metadata fields
   - Plan for extensibility

# System Prompt Engineering Phase
5. Craft effective system prompt:
   - Define clear extraction role
   - Specify quality standards
   - Include domain expertise context
   - Set accuracy expectations
   - Add guardrails against hallucination

6. Structure extraction guidelines:
   - Step-by-step extraction process
   - Field-specific instructions
   - Data formatting rules
   - Error handling procedures
   - Quality check requirements

# User Prompt Template Phase
7. Design flexible user template:
   - Clear placeholder structure ({{variables}})
   - Logical flow of information
   - Schema integration points
   - Example references
   - Validation checkpoints

8. Optimize for clarity:
   - Use numbered instructions
   - Provide visual structure
   - Include process markers
   - Add context sections
   - Enable easy customization

# Example Generation Phase
9. Create high-quality examples:
   - Cover common scenarios (2-3 examples)
   - Include edge cases
   - Show complex extractions
   - Demonstrate error handling
   - Vary document types

10. Structure examples effectively:
    - Input: Representative document text
    - Output: Perfectly formatted JSON
    - Annotations: Explain key decisions
    - Variations: Show flexibility
    - Quality markers: Highlight best practices

# Validation Rules Phase
11. Define comprehensive validation:
    - Required field checks
    - Data type validation
    - Format verification
    - Cross-field validation
    - Business rule compliance

12. Create quality assurance criteria:
    - Completeness thresholds
    - Accuracy benchmarks
    - Consistency rules
    - Performance targets
    - Error tolerance levels