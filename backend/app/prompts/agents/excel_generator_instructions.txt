# Setup Phase
1. Install required packages using pip_install_package:
   - pandas (for data manipulation)
   - openpyxl (for Excel writing and formatting)
   - xlsxwriter (for advanced Excel features)
   - python-dateutil (for date parsing)

# Data Analysis Phase
2. Read the JSON file using read_file tool and analyze structure:
   - Detect if JSON is wrapped in markdown (```json...```)
   - Strip markdown wrapper if present
   - Parse JSON and handle any parsing errors gracefully
   - Map complete data hierarchy and relationships

3. Analyze data characteristics:
   - Identify data types (numeric, text, date, currency)
   - Count records in each category
   - Detect nested structures requiring flattening
   - Identify key metrics and KPIs

# Python Script Creation Phase
4. Create comprehensive Python script using save_to_file_and_run:
   
   ## Import and Setup Section
   - Import all required libraries
   - Set up Excel writer with openpyxl engine
   - Define color schemes and formatting constants
   
   ## Data Processing Section
   - Read and parse JSON data with error handling
   - Clean and prepare data for Excel
   - Flatten nested structures intelligently
   - Convert data types appropriately
   
   ## Workbook Structure Creation
   - Create Excel workbook with professional layout:
     * Executive Summary Dashboard (first sheet)
     * Company Overview (identification data)
     * Financial Metrics (organized by category)
     * Detailed Analysis sheets (as needed)
     * Data Quality/Metadata sheet
   
   ## Professional Formatting Implementation
   - Headers:
     * Bold, 12pt font
     * Background: #1f4788 (corporate blue)
     * Text: white, centered
     * Bottom border: thick
   
   - Data Rows:
     * Alternating colors (#FFFFFF and #F2F2F2)
     * Borders: thin, all sides
     * Padding: appropriate for readability
   
   - Special Formatting:
     * Currency: $#,##0.00 accounting format
     * Percentages: 0.00% with color coding
     * Dates: DD-MMM-YYYY format
     * Negative values: red text or (parentheses)
   
   ## Advanced Features Implementation
   - Column Management:
     * Auto-fit widths with max limit
     * Freeze top row (headers)
     * Apply filters to data ranges
   
   - Data Enhancements:
     * Year-over-Year calculations
     * Growth percentages
     * Running totals
     * Variance analysis
   
   - Visual Elements:
     * Conditional formatting for insights
     * Data bars for comparisons
     * Color scales for heat maps
     * Icon sets for trends
   
   - Summary Dashboard:
     * Key metrics with large fonts
     * Sparklines for trends
     * Summary statistics
     * Data quality indicators

# Execution and Validation Phase
5. Execute the Python script:
   - Run the script with proper error handling
   - Capture any execution errors
   - Log progress messages

6. Validate Excel output:
   - Verify file creation successful
   - Check all expected sheets exist
   - Confirm formatting applied correctly
   - Validate formulas and calculations

7. Generate completion report:
   - File path and size
   - Number of sheets created
   - Record counts per sheet
   - Any data quality issues found
   - Suggestions for improvements

# Error Handling Throughout
- Implement try-except blocks for each major operation
- Provide detailed error messages
- Continue processing even if some sections fail
- Log all issues for user awareness

# Performance Optimization
- Use chunking for large datasets
- Optimize memory usage
- Implement progress indicators
- Cache repeated calculations